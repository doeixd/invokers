{
  "version": 3,
  "sources": ["../../../src/polyfill.ts", "../../../src/interest-invokers.ts", "../../../src/index.ts", "../../../src/invoker-commands.ts"],
  "sourcesContent": ["/**\r\n * @file polyfill.ts\r\n * @summary A high-fidelity polyfill for the W3C/WHATWG HTML Invoker Buttons proposal.\r\n * @license MIT (Assumed from project context)\r\n * @author Keith Cirkel, Luke Warlow (original authors of explainer/polyfill)\r\n * @description This code implements the proposed `command` and `commandfor` attributes for HTMLButtonElement\r\n *              and the `CommandEvent` interface, allowing declarative UI interactions in browsers\r\n *              that do not yet natively support these features.\r\n *              It includes handling for popovers and dialogs, and a mechanism for custom commands.\r\n */\r\n\r\nexport function isSupported() {\r\n  return (\r\n    typeof HTMLButtonElement !== \"undefined\" &&\r\n    \"command\" in HTMLButtonElement.prototype &&\r\n    // @ts-ignore\r\n    \"source\" in ((globalThis!.CommandEvent || {}).prototype || {})\r\n  );\r\n}\r\n\r\n// NOTE: The `isPolyfilled` function from the original polyfill code will not be exported\r\n// directly from invokers itself, but its logic is relevant to understanding when to apply.\r\n// For `invokers`, we will always apply the polyfill to ensure a consistent environment\r\n// and to guarantee the `CommandEvent` and attributes are present, even if native support exists.\r\n\r\nfunction enumerate(obj: object, key: PropertyKey, enumerable: boolean = true) {\r\n  Object.defineProperty(obj, key, {\r\n    ...Object.getOwnPropertyDescriptor(obj, key),\r\n    enumerable,\r\n  });\r\n}\r\n\r\nfunction getRootNode(node: Node): Node {\r\n  if (node && typeof node.getRootNode === \"function\") {\r\n    return node.getRootNode();\r\n  }\r\n  // Fallback for older environments or unusual node types\r\n  if (node && node.parentNode) return getRootNode(node.parentNode);\r\n  return node;\r\n}\r\n\r\nconst commandEventSourceElements = new WeakMap<Event, Element | null>();\r\nconst commandEventActions = new WeakMap<Event, string>();\r\n\r\n/**\r\n * Represents a declarative `command` event dispatched from an invoker button to its target.\r\n * This class mirrors the proposed W3C/WHATWG `CommandEvent` interface.\r\n */\r\ndeclare global {\r\n  interface CommandEventInit extends EventInit {\r\n    command?: string;\r\n    source?: Element;\r\n  }\r\n  interface CommandEvent extends Event {\r\n    readonly command: string;\r\n    readonly source: HTMLButtonElement | null;\r\n  }\r\n}\r\n\r\nclass CommandEventPolyfill extends Event {\r\n  constructor(type: string, invokeEventInit: CommandEventInit = {}) {\r\n    super(type, invokeEventInit);\r\n    const { source, command } = invokeEventInit;\r\n    if (source != null && !(source instanceof Element)) {\r\n      throw new TypeError(`source must be an element`);\r\n    }\r\n    commandEventSourceElements.set(this, source || null);\r\n    commandEventActions.set(\r\n      this,\r\n      command !== undefined ? String(command) : \"\",\r\n    );\r\n  }\r\n\r\n  get [Symbol.toStringTag]() {\r\n    return \"CommandEvent\";\r\n  }\r\n\r\n  /**\r\n   * The element (usually a <button>) that initiated the command.\r\n   * If the event's target is in a different root (e.g., Shadow DOM),\r\n   * this will return the host of the invoker's root.\r\n   */\r\n  get source(): Element | null {\r\n    if (!commandEventSourceElements.has(this)) {\r\n      throw new TypeError(\"illegal invocation\");\r\n    }\r\n    const source = commandEventSourceElements.get(this);\r\n    if (!(source instanceof Element)) return null;\r\n    const invokerRoot = getRootNode(source);\r\n    // Ensure the source element is within the same document or shadow root context\r\n    if (invokerRoot !== getRootNode(this.target as Node || document)) {\r\n      // If cross-root, return the shadow host for encapsulation\r\n      return invokerRoot instanceof ShadowRoot ? invokerRoot.host : null;\r\n    }\r\n    return source;\r\n  }\r\n\r\n  /**\r\n   * The command string that was invoked (e.g., \"show-modal\", \"--my-custom-command\").\r\n   */\r\n  get command(): string {\r\n    if (!commandEventActions.has(this)) {\r\n      throw new TypeError(\"illegal invocation\");\r\n    }\r\n    return commandEventActions.get(this) || \"\";\r\n  }\r\n\r\n  // Deprecated properties for compatibility with older proposals\r\n  get action(): never {\r\n    throw new Error(\r\n      \"CommandEvent#action was renamed to CommandEvent#command\",\r\n    );\r\n  }\r\n\r\n  get invoker(): never {\r\n    throw new Error(\r\n      \"CommandEvent#invoker was renamed to CommandEvent#source\",\r\n    );\r\n  }\r\n}\r\nenumerate(CommandEventPolyfill.prototype, \"source\");\r\nenumerate(CommandEventPolyfill.prototype, \"command\");\r\n\r\n// Deprecated InvokeEvent for compatibility\r\nclass InvokeEventPolyfill extends Event {\r\n  constructor(type: string, invokeEventInit: EventInit = {}) {\r\n    super(type, invokeEventInit);\r\n    throw new Error(\r\n      \"InvokeEvent has been deprecated, it has been renamed to `CommandEvent`\",\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nconst invokerAssociatedElements = new WeakMap<HTMLElement, Element>();\r\n\r\n/**\r\n * Mixin to apply `commandforElement` and `command` properties to `HTMLButtonElement`.\r\n * This extends the `HTMLButtonElement` prototype to include the declarative command API.\r\n * @param ElementClass The HTML element class to extend (e.g., HTMLButtonElement).\r\n */\r\nfunction applyInvokerMixin(ElementClass: typeof HTMLElement) {\r\n  Object.defineProperties(ElementClass.prototype, {\r\n    /**\r\n     * Imperatively sets or gets the element controlled by the button.\r\n     * Reflects the `commandfor` attribute.\r\n     */\r\n    commandForElement: {\r\n      enumerable: true,\r\n      configurable: true,\r\n      set(targetElement: Element | null) {\r\n        // Handle deprecated attributes for warnings\r\n        if (this.hasAttribute(\"invokeaction\")) {\r\n          throw new TypeError(\r\n            \"Element has deprecated `invokeaction` attribute, replace with `command`\",\r\n          );\r\n        } else if (this.hasAttribute(\"invoketarget\")) {\r\n          throw new TypeError(\r\n            \"Element has deprecated `invoketarget` attribute, replace with `commandfor`\",\r\n          );\r\n        } else if (targetElement === null) {\r\n          // If null, remove the attribute and clear associated element\r\n          this.removeAttribute(\"commandfor\");\r\n          invokerAssociatedElements.delete(this);\r\n        } else if (!(targetElement instanceof Element)) {\r\n          // Ensure valid element type\r\n          throw new TypeError(`commandForElement must be an element or null`);\r\n        } else {\r\n          // Set attribute (value is irrelevant for IDREF, just presence)\r\n          this.setAttribute(\"commandfor\", targetElement.id || \"\"); // Use ID if available\r\n          const targetRootNode = getRootNode(targetElement);\r\n          const thisRootNode = getRootNode(this);\r\n          // Only associate if in the same document/root, or owner document\r\n          if (\r\n            thisRootNode === targetRootNode ||\r\n            targetRootNode === this.ownerDocument\r\n          ) {\r\n            invokerAssociatedElements.set(this, targetElement);\r\n          } else {\r\n            invokerAssociatedElements.delete(this); // Remove if cross-root\r\n          }\r\n        }\r\n      },\r\n      get(): Element | null {\r\n        // Only buttons support commandfor\r\n        if (this.localName !== \"button\") {\r\n          return null;\r\n        }\r\n        // Warn for deprecated attributes\r\n        if (\r\n          this.hasAttribute(\"invokeaction\") ||\r\n          this.hasAttribute(\"invoketarget\")\r\n        ) {\r\n          console.warn(\r\n            \"Element has deprecated `invoketarget` or `invokeaction` attribute, use `commandfor` and `command` instead\",\r\n          );\r\n          return null;\r\n        }\r\n        // Disabled buttons don't invoke\r\n        if (this.disabled) {\r\n          return null;\r\n        }\r\n        // Buttons in forms must be type=\"button\" to use commandfor\r\n        if (this.form && this.getAttribute(\"type\") !== \"button\") {\r\n          console.warn(\r\n            \"Element with `commandfor` is a form participant. \" +\r\n              \"It should explicitly set `type=button` in order for `commandfor` to work\",\r\n          );\r\n          return null;\r\n        }\r\n        // First, check imperatively set element\r\n        const targetElement = invokerAssociatedElements.get(this);\r\n        if (targetElement) {\r\n          if (targetElement.isConnected) {\r\n            return targetElement;\r\n          } else {\r\n            invokerAssociatedElements.delete(this); // Clean up disconnected elements\r\n            return null;\r\n          }\r\n        }\r\n        // Fallback to IDREF lookup if not imperatively set\r\n        const root = getRootNode(this);\r\n        const idref = this.getAttribute(\"commandfor\");\r\n        if (\r\n          (root instanceof Document || root instanceof ShadowRoot) &&\r\n          idref\r\n        ) {\r\n          return root.getElementById(idref) || null;\r\n        }\r\n        return null;\r\n      },\r\n    },\r\n    /**\r\n     * Gets or sets the command string.\r\n     * Handles normalization for built-in commands and enforces `--` prefix for custom commands.\r\n     */\r\n    command: {\r\n      enumerable: true,\r\n      configurable: true,\r\n      get(): string {\r\n        const value = this.getAttribute(\"command\") || \"\";\r\n        // Custom commands always return their raw value (starting with --)\r\n        if (value.startsWith(\"--\")) return value;\r\n        // Built-in commands are normalized to lowercase\r\n        const valueLower = value.toLowerCase();\r\n        switch (valueLower) {\r\n          // Core commands (already implemented)\r\n          case \"show-modal\":\r\n          case \"close\":\r\n          case \"request-close\":\r\n          case \"toggle-popover\":\r\n          case \"hide-popover\":\r\n          case \"show-popover\":\r\n          \r\n          // Future commands - Openable elements\r\n          case \"toggle-openable\":\r\n          case \"close-openable\":\r\n          case \"open-openable\":\r\n          \r\n          // Details elements\r\n          case \"toggle\":\r\n          case \"open\":\r\n          \r\n          // Picker elements\r\n          case \"show-picker\":\r\n          \r\n          // Media elements\r\n          case \"play-pause\":\r\n          case \"pause\":\r\n          case \"play\":\r\n          case \"toggle-muted\":\r\n          \r\n          // Fullscreen elements\r\n          case \"toggle-fullscreen\":\r\n          case \"request-fullscreen\":\r\n          case \"exit-fullscreen\":\r\n          \r\n          // Clipboard and sharing\r\n          case \"copy-text\":\r\n          case \"share\":\r\n          \r\n          // Number input elements\r\n          case \"step-up\":\r\n          case \"step-down\":\r\n            return valueLower;\r\n        }\r\n        return \"\"; // Invalid command if not built-in or custom\r\n      },\r\n      set(value: string) {\r\n        this.setAttribute(\"command\", value);\r\n      },\r\n    },\r\n\r\n    // Deprecated properties for compatibility with older proposals\r\n    invokeAction: {\r\n      enumerable: false,\r\n      configurable: true,\r\n      get(): never {\r\n        throw new Error(\r\n          `invokeAction is deprecated. It has been renamed to command`,\r\n        );\r\n      },\r\n      set(_value: string): never {\r\n        throw new Error(\r\n          `invokeAction is deprecated. It has been renamed to command`,\r\n        );\r\n      },\r\n    },\r\n\r\n    invokeTargetElement: {\r\n      enumerable: false,\r\n      configurable: true,\r\n      get(): never {\r\n        throw new Error(\r\n          `invokeTargetElement is deprecated. It has been renamed to command`,\r\n        );\r\n      },\r\n      set(_value: Element | null): never {\r\n        throw new Error(\r\n          `invokeTargetElement is deprecated. It has been renamed to command`,\r\n        );\r\n      },\r\n    },\r\n  });\r\n}\r\n\r\nconst onHandlers = new WeakMap<HTMLElement, EventListenerOrEventListenerObject>();\r\n\r\n// Extend HTMLElement to include the oncommand property for TypeScript\r\ndeclare global {\r\n  interface HTMLElement {\r\n    oncommand: EventListenerOrEventListenerObject | null;\r\n    /**\r\n     * Gets or sets the element controlled by the interest invoker.\r\n     */\r\n    interestForElement: Element | null;\r\n  }\r\n  interface HTMLButtonElement {\r\n    /**\r\n     * Gets or sets the command string for the button.\r\n     */\r\n    command: string;\r\n    /**\r\n     * Gets or sets the element controlled by the button.\r\n     */\r\n    commandForElement: Element | null;\r\n    /**\r\n     * Gets or sets the element controlled by the interest invoker.\r\n     */\r\n    interestForElement: Element | null;\r\n  }\r\n  interface HTMLAnchorElement {\r\n    /**\r\n     * Gets or sets the element controlled by the interest invoker.\r\n     */\r\n    interestForElement: Element | null;\r\n  }\r\n  interface HTMLAreaElement {\r\n    /**\r\n     * Gets or sets the element controlled by the interest invoker.\r\n     */\r\n    interestForElement: Element | null;\r\n  }\r\n}\r\n\r\n/**\r\n * Extends `HTMLElement.prototype` to include `oncommand` event handler.\r\n */\r\nObject.defineProperties(HTMLElement.prototype, {\r\n  oncommand: {\r\n    enumerable: true,\r\n    configurable: true,\r\n    get(): EventListenerOrEventListenerObject | null {\r\n      oncommandObserver.takeRecords(); // Ensure up-to-date state\r\n      return onHandlers.get(this) || null;\r\n    },\r\n    set(handler: EventListenerOrEventListenerObject | null) {\r\n      const existing = onHandlers.get(this) || null;\r\n      if (existing) {\r\n        this.removeEventListener(\"command\", existing);\r\n      }\r\n      if (typeof handler === \"object\" || typeof handler === \"function\") {\r\n        if (handler !== null) {\r\n          onHandlers.set(this, handler);\r\n        } else {\r\n          onHandlers.delete(this);\r\n        }\r\n      } else {\r\n        onHandlers.delete(this);\r\n      }\r\n      if (typeof handler == \"function\") {\r\n        this.addEventListener(\"command\", handler);\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\n/**\r\n * Applies `oncommand` attribute values as event handlers.\r\n * @param els An iterable of elements to apply handlers to.\r\n */\r\nfunction applyOnCommandHandler(els: Iterable<Element>) {\r\n  for (const el of els) {\r\n    if (typeof Element !== \"undefined\" && !(el instanceof Element)) continue; // Skip if not an Element\r\n    const oncommandAttr = el.getAttribute(\"oncommand\");\r\n    if (oncommandAttr !== null && (el as any).oncommand !== null) { // Only set if not already set by JS\r\n        try {\r\n            // eslint-disable-next-line no-new-func\r\n            (el as any).oncommand = new Function(\"event\", oncommandAttr) as EventListener;\r\n        } catch (e) {\r\n            console.error(`Invokers Polyfill: Error parsing oncommand attribute for element:`, el, e);\r\n        }\r\n    }\r\n  }\r\n}\r\n\r\n/** MutationObserver to watch for new `oncommand` attributes or elements. */\r\nconst oncommandObserver = new MutationObserver((records) => {\r\n  for (const record of records) {\r\n    const { target } = record;\r\n    if (record.type === \"childList\") {\r\n      if (typeof Element !== \"undefined\" && target instanceof Element) {\r\n        applyOnCommandHandler(Array.from(target.querySelectorAll(\"[oncommand]\")));\r\n      } else if (target && typeof (target as any).querySelectorAll === \"function\") {\r\n        applyOnCommandHandler(Array.from((target as Element).querySelectorAll(\"[oncommand]\")));\r\n      }\r\n    } else { // attributeChanged\r\n      if (target instanceof HTMLElement && target.hasAttribute(\"oncommand\")) {\r\n        applyOnCommandHandler([target]);\r\n      } else if (target instanceof HTMLElement) { // attribute removed\r\n        target.oncommand = null; // Clear handler if attribute removed\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\n/**\r\n * Handles the activation of an invoker button, dispatches `CommandEvent`,\r\n * and performs default actions for built-in commands.\r\n * @param event The click event that triggered the activation.\r\n */\r\nfunction handleInvokerActivation(event: MouseEvent | KeyboardEvent) {\r\n  // Respect defaultPrevented (e.g., if another handler already stopped it)\r\n  if (event.defaultPrevented) return;\r\n  // Only process click events (or key events, if extending)\r\n  if (event.type !== \"click\") return;\r\n\r\n  // Check for deprecated attributes and warn\r\n  const oldInvoker = (event.target as HTMLElement).closest(\r\n    \"button[invoketarget], button[invokeaction], input[invoketarget], input[invokeaction]\",\r\n  );\r\n  if (oldInvoker) {\r\n    console.warn(\r\n      \"Invokers Polyfill: Elements with `invoketarget` or `invokeaction` are deprecated and should be renamed to use `commandfor` and `command` respectively\",\r\n    );\r\n    if (oldInvoker.matches(\"input\")) {\r\n      throw new Error(\"Input elements no longer support `commandfor`\");\r\n    }\r\n  }\r\n\r\n  // Find the actual invoker button\r\n  const source = (event.target as HTMLElement).closest<HTMLButtonElement>(\"button[commandfor][command]\");\r\n  if (!source) return; // Not an invoker button\r\n\r\n  // Validate button type and attributes for forms\r\n  if (source.form && source.getAttribute(\"type\") !== \"button\") {\r\n    event.preventDefault(); // Prevent form submission\r\n    console.error( // Use console.error as this is an invalid setup\r\n      \"Invokers Polyfill: Element with `commandfor` is a form participant. \" +\r\n        \"It should explicitly set `type=button` in order for `commandfor` to work. \" +\r\n        \"To act as a Submit/Reset button, it must not have command or commandfor attributes.\",\r\n        source\r\n    );\r\n    return;\r\n  }\r\n\r\n  // The `command` and `commandfor` attributes must both be present\r\n  if (source.hasAttribute(\"command\") !== source.hasAttribute(\"commandfor\")) {\r\n    const attr = source.hasAttribute(\"command\") ? \"command\" : \"commandfor\";\r\n    const missing = source.hasAttribute(\"command\") ? \"commandfor\" : \"command\";\r\n    console.error( // Use console.error as this is an invalid setup\r\n      `Invokers Polyfill: Element with ${attr} attribute must also have a ${missing} attribute to function.`,\r\n      source\r\n    );\r\n    return;\r\n  }\r\n\r\n  // Validate command value based on spec\r\n  // Note: source.command getter already normalizes built-in values and validates `--` prefix\r\n  if (source.command === \"\") {\r\n    console.warn(\r\n      `Invokers Polyfill: \"${source.getAttribute(\"command\")}\" is not a valid command value for element:`,\r\n      source,\r\n      `Custom commands must begin with --`\r\n    );\r\n    return;\r\n  }\r\n\r\n  const invokee = source.commandForElement;\r\n  if (!invokee) {\r\n    console.warn(\"Invokers Polyfill: commandfor target not found for invoker:\", source);\r\n    return;\r\n  }\r\n\r\n  // 1. Dispatch the CommandEvent\r\n  const commandEvent = new CommandEventPolyfill(\"command\", {\r\n    command: source.command,\r\n    source,\r\n    cancelable: true,\r\n    bubbles: true, // Should bubble to be caught by document listeners\r\n    composed: true, // Allow crossing shadow boundaries\r\n  });\r\n  invokee.dispatchEvent(commandEvent);\r\n\r\n  // If the event was prevented, stop default behavior\r\n  if (commandEvent.defaultPrevented) return;\r\n\r\n  // 2. Perform default actions for built-in commands\r\n  const command = commandEvent.command.toLowerCase(); // Use the normalized command from the event\r\n\r\n  // Handle popover commands\r\n  if (invokee.matches('[popover]')) {\r\n    const isPopoverOpen = invokee.matches(\":popover-open\");\r\n    if (command === \"toggle-popover\") {\r\n        (invokee as HTMLElement & { showPopover?: (options?: any) => void; hidePopover?: (options?: any) => void; })[isPopoverOpen ? 'hidePopover' : 'showPopover']?.({ source });\r\n    } else if (command === \"hide-popover\" && isPopoverOpen) {\r\n        (invokee as HTMLElement & { hidePopover: Function }).hidePopover();\r\n    } else if (command === \"show-popover\" && !isPopoverOpen) {\r\n        (invokee as HTMLElement & { showPopover?: (options?: any) => void }).showPopover?.({ source });\r\n    }\r\n  }\r\n  \r\n  // Handle dialog commands\r\n  if (invokee.localName === \"dialog\") {\r\n    const isDialogOpen = invokee.hasAttribute(\"open\");\r\n    if (command === \"show-modal\" && !isDialogOpen) {\r\n        (invokee as HTMLDialogElement).showModal();\r\n    } else if (command === \"close\" && isDialogOpen) {\r\n        (invokee as HTMLDialogElement).close(source.value);\r\n    } else if (command === \"request-close\" && isDialogOpen) {\r\n        const cancelEvent = new Event('cancel', { cancelable: true });\r\n        invokee.dispatchEvent(cancelEvent);\r\n        if (!cancelEvent.defaultPrevented) {\r\n             (invokee as HTMLDialogElement).close(source.value);\r\n        }\r\n    }\r\n  }\r\n  \r\n  // Handle details commands\r\n  if (invokee.localName === \"details\") {\r\n    const isOpen = (invokee as HTMLDetailsElement).open;\r\n    if (command === \"toggle\") {\r\n      (invokee as HTMLDetailsElement).open = !isOpen;\r\n    } else if (command === \"open\" && !isOpen) {\r\n      (invokee as HTMLDetailsElement).open = true;\r\n    } else if (command === \"close\" && isOpen) {\r\n      (invokee as HTMLDetailsElement).open = false;\r\n    }\r\n  }\r\n  \r\n  // Handle openable elements (elements with toggleOpenable method)\r\n  if (command.includes(\"openable\") && typeof (invokee as any).toggleOpenable === \"function\") {\r\n    if (command === \"toggle-openable\") {\r\n      (invokee as any).toggleOpenable();\r\n    } else if (command === \"open-openable\") {\r\n      (invokee as any).openOpenable?.();\r\n    } else if (command === \"close-openable\") {\r\n      (invokee as any).closeOpenable?.();\r\n    }\r\n  }\r\n  \r\n  // Handle picker commands for select and input elements\r\n  if ((invokee.localName === \"select\" || invokee.localName === \"input\") && command === \"show-picker\") {\r\n    try {\r\n      if (typeof (invokee as any).showPicker === \"function\") {\r\n        // Check if we're in a secure context and have user activation\r\n        if (document.hasFocus() && source.ownerDocument.hasFocus()) {\r\n          (invokee as any).showPicker();\r\n        }\r\n      }\r\n    } catch (e) {\r\n      // showPicker can throw for various security reasons, fail silently\r\n      console.warn(\"Invokers: showPicker failed:\", e);\r\n    }\r\n  }\r\n  \r\n  // Handle media element commands\r\n  if (invokee.localName === \"video\" || invokee.localName === \"audio\") {\r\n    const media = invokee as HTMLMediaElement;\r\n    if (command === \"play-pause\") {\r\n      if (media.paused) {\r\n        media.play().catch(() => {\r\n          // Autoplay policy might prevent play, fail silently\r\n        });\r\n      } else {\r\n        media.pause();\r\n      }\r\n    } else if (command === \"play\" && media.paused) {\r\n      media.play().catch(() => {\r\n        // Autoplay policy might prevent play, fail silently\r\n      });\r\n    } else if (command === \"pause\" && !media.paused) {\r\n      media.pause();\r\n    } else if (command === \"toggle-muted\") {\r\n      media.muted = !media.muted;\r\n    }\r\n  }\r\n  \r\n  // Handle fullscreen commands\r\n  if (command.includes(\"fullscreen\")) {\r\n    try {\r\n      if (command === \"toggle-fullscreen\") {\r\n        if (document.fullscreenElement === invokee) {\r\n          document.exitFullscreen();\r\n        } else {\r\n          (invokee as any).requestFullscreen?.();\r\n        }\r\n      } else if (command === \"request-fullscreen\" && document.fullscreenElement !== invokee) {\r\n        (invokee as any).requestFullscreen?.();\r\n      } else if (command === \"exit-fullscreen\" && document.fullscreenElement === invokee) {\r\n        document.exitFullscreen();\r\n      }\r\n    } catch (e) {\r\n      // Fullscreen operations can fail for various reasons\r\n      console.warn(\"Invokers: Fullscreen operation failed:\", e);\r\n    }\r\n  }\r\n  \r\n  // Handle clipboard and sharing commands\r\n  if (command === \"copy-text\") {\r\n    try {\r\n      let textToCopy = \"\";\r\n      if (invokee === source) {\r\n        // Self-referencing: use value attribute if available\r\n        textToCopy = (source as any).value || source.textContent || \"\";\r\n      } else {\r\n        textToCopy = invokee.textContent || \"\";\r\n      }\r\n      \r\n      if (navigator.clipboard && navigator.clipboard.writeText) {\r\n        navigator.clipboard.writeText(textToCopy.trim());\r\n      } else {\r\n        // Fallback for older browsers\r\n        const textArea = document.createElement('textarea');\r\n        textArea.value = textToCopy.trim();\r\n        textArea.style.position = 'fixed';\r\n        textArea.style.opacity = '0';\r\n        document.body.appendChild(textArea);\r\n        textArea.select();\r\n        document.execCommand('copy');\r\n        document.body.removeChild(textArea);\r\n      }\r\n    } catch (e) {\r\n      console.warn(\"Invokers: Copy operation failed:\", e);\r\n    }\r\n  }\r\n  \r\n  if (command === \"share\") {\r\n    try {\r\n      let textToShare = \"\";\r\n      if (invokee === source) {\r\n        textToShare = (source as any).value || source.textContent || \"\";\r\n      } else {\r\n        textToShare = invokee.textContent || \"\";\r\n      }\r\n      \r\n      if (navigator.share) {\r\n        // Check if the text looks like a URL\r\n        const trimmedText = textToShare.trim();\r\n        if (trimmedText.startsWith('http://') || trimmedText.startsWith('https://')) {\r\n          navigator.share({ url: trimmedText });\r\n        } else {\r\n          navigator.share({ text: trimmedText });\r\n        }\r\n      }\r\n    } catch (e) {\r\n      console.warn(\"Invokers: Share operation failed:\", e);\r\n    }\r\n  }\r\n  \r\n  // Handle number input step commands\r\n  if (invokee.localName === \"input\" && (invokee as HTMLInputElement).type === \"number\") {\r\n    const input = invokee as HTMLInputElement;\r\n    try {\r\n      if (command === \"step-up\") {\r\n        input.stepUp();\r\n      } else if (command === \"step-down\") {\r\n        input.stepDown();\r\n      }\r\n    } catch (e) {\r\n      console.warn(\"Invokers: Step operation failed:\", e);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Sets up global click listener for invoker buttons.\r\n * @param target The DOM node to attach the listener to (e.g., `document` or a ShadowRoot).\r\n */\r\nfunction setupInvokeListeners(target: Node) {\r\n  target.addEventListener(\"click\", handleInvokerActivation as EventListener, true); // Use capturing to catch first\r\n}\r\n\r\n/**\r\n * Observes newly attached Shadow DOM roots to apply listeners and `oncommand` handlers.\r\n * @param ElementClass The base class (e.g., `HTMLElement`) to observe shadow roots for.\r\n * @param callback The function to call with the new ShadowRoot.\r\n */\r\nfunction observeShadowRoots(ElementClass: typeof HTMLElement, callback: (shadowRoot: ShadowRoot) => void) {\r\n  // Patch attachShadow\r\n  const attachShadow = ElementClass.prototype.attachShadow;\r\n  ElementClass.prototype.attachShadow = function (init: ShadowRootInit) {\r\n    const shadow = attachShadow.call(this, init);\r\n    callback(shadow);\r\n    return shadow;\r\n  };\r\n  // Patch attachInternals for declarative custom elements\r\n  const attachInternals = ElementClass.prototype.attachInternals;\r\n  ElementClass.prototype.attachInternals = function (this: Element) { // Use 'this' context\r\n    const internals = attachInternals.call(this);\r\n    if (internals.shadowRoot) callback(internals.shadowRoot);\r\n    return internals;\r\n  };\r\n}\r\n\r\n/**\r\n * Applies the Invoker Buttons polyfill to the current environment.\r\n * This should be called once to enable the `command`/`commandfor` attributes and `CommandEvent`.\r\n */\r\nexport function apply() {\r\n  // Ensure the polyfill is only applied once\r\n  if ((globalThis as any).CommandEvent === CommandEventPolyfill) {\r\n      return; // Already applied\r\n  }\r\n\r\n  // Hijack native 'invoke' and 'command' events if they exist,\r\n  // to prevent conflicts and ensure our polyfilled event is the one processed.\r\n  // This is a crucial step if browsers partially implement or change behavior.\r\n  document.addEventListener(\r\n    \"invoke\",\r\n    (e) => {\r\n      if (e.type === \"invoke\" && e.isTrusted) {\r\n        e.stopImmediatePropagation();\r\n        e.preventDefault();\r\n      }\r\n    },\r\n    true,\r\n  );\r\n  document.addEventListener(\r\n    \"command\",\r\n    (e) => {\r\n      // Only prevent if it's a native/trusted command event\r\n      if (e.type === \"command\" && e.isTrusted && !e.defaultPrevented && e.eventPhase === Event.AT_TARGET) {\r\n         // Check if a CommandEvent, not just a generic custom event type \"command\"\r\n         // This is a tricky part: we want to block native CommandEvents if they exist,\r\n         // but allow our own polyfilled CommandEvents to proceed.\r\n         // A heuristic could be `e instanceof CommandEventPolyfill` but that might not work\r\n         // if `globalThis.CommandEvent` is already the native one.\r\n         // For now, if native is supported, our polyfill will largely step aside anyway.\r\n         // This listener is primarily for older `invoke` event issues and preventing double-firing\r\n         // in environments where CommandEvent is partially or inconsistently implemented.\r\n         // For a full polyfill, we'd ensure `isSupported()` is false before applying.\r\n         // Given `invokers` wants a consistent environment, we always apply.\r\n         // For now, let's assume if it's a trusted 'command' event from another source, we block.\r\n         // The `invokers` library will then dispatch its own `CommandEventPolyfill` which won't be blocked here.\r\n        e.stopImmediatePropagation();\r\n        e.preventDefault();\r\n      }\r\n    },\r\n    true,\r\n  );\r\n\r\n  // Apply the `command` and `commandfor` properties to HTMLButtonElement\r\n  applyInvokerMixin(HTMLButtonElement);\r\n\r\n  // Observe newly attached Shadow DOM roots\r\n  observeShadowRoots(HTMLElement, (shadow) => {\r\n    setupInvokeListeners(shadow);\r\n    oncommandObserver.observe(shadow, { subtree: true, childList: true, attributeFilter: [\"oncommand\"] });\r\n    applyOnCommandHandler(Array.from(shadow.querySelectorAll(\"[oncommand]\")));\r\n  });\r\n\r\n  // Set up listeners for the main document\r\n  setupInvokeListeners(document);\r\n\r\n  // Initial scan for `oncommand` attributes\r\n  oncommandObserver.observe(document, {\r\n    subtree: true,\r\n    childList: true,\r\n    attributeFilter: [\"oncommand\"],\r\n  });\r\n  applyOnCommandHandler(Array.from(document.querySelectorAll(\"[oncommand]\")));\r\n\r\n\r\n  // Expose the polyfilled CommandEvent globally if not already defined\r\n  if (typeof (globalThis as any)['CommandEvent'] === 'undefined') {\r\n    Object.defineProperty(globalThis, \"CommandEvent\", {\r\n        value: CommandEventPolyfill,\r\n        configurable: true,\r\n        writable: true,\r\n        enumerable: false,\r\n    });\r\n  } else {\r\n      console.warn(\"Invokers Polyfill: `globalThis.CommandEvent` already exists. The polyfill's CommandEvent will not overwrite it.\");\r\n  }\r\n  // Expose InvokeEvent globally (for deprecation warnings)\r\n  if (typeof (globalThis as any)['InvokeEvent'] === 'undefined') {\r\n      Object.defineProperty(globalThis, \"InvokeEvent\", {\r\n          value: InvokeEventPolyfill,\r\n          configurable: true,\r\n          writable: true,\r\n          enumerable: false,\r\n      });\r\n  }\r\n}\r\n\r\n// Automatically apply the polyfill when this module is imported.\r\n// This ensures that the global CommandEvent and attribute setters are ready\r\n// before InvokerManager tries to use them.\r\napply();", "/**\r\n * @file interest-invokers.ts\r\n * @summary Interest Invokers polyfill and TypeScript support for the Invokers library\r\n * @description\r\n * This module provides comprehensive support for Interest Invokers as specified in:\r\n * https://open-ui.org/components/interest-invokers.explainer/\r\n * \r\n * Based on the official polyfill by Mason Freed with TypeScript adaptation\r\n * and integration with the existing Invokers library patterns.\r\n * \r\n * @author Mason Freed (original polyfill), Patrick Glenn (TypeScript adaptation)\r\n * @license MIT / BSD (compatible with original polyfill license)\r\n */\r\n\r\n// --- TypeScript Interfaces and Types ---\r\n\r\n/**\r\n * Represents an InterestEvent as defined in the Interest Invokers specification\r\n */\r\nexport interface InterestEventInit extends EventInit {\r\n  source?: Element;\r\n}\r\n\r\nexport interface InterestEvent extends Event {\r\n  readonly source: Element | null;\r\n}\r\n\r\nexport interface InterestInvokerElement {\r\n  interestForElement: Element | null;\r\n}\r\n\r\n// Global type declarations\r\ndeclare global {\r\n  interface InterestEventInit extends EventInit {\r\n    source?: Element;\r\n  }\r\n  \r\n  interface InterestEvent extends Event {\r\n    readonly source: Element | null;\r\n  }\r\n\r\n  interface HTMLButtonElement extends InterestInvokerElement {}\r\n  interface HTMLAnchorElement extends InterestInvokerElement {}\r\n  interface HTMLAreaElement extends InterestInvokerElement {}\r\n  \r\n  // SVG support\r\n  interface SVGAElement extends InterestInvokerElement {}\r\n\r\n  interface Window {\r\n    interestForPolyfillInstalled?: boolean;\r\n    interestForUsePolyfillAlways?: boolean;\r\n  }\r\n}\r\n\r\n// --- Interest Invokers Polyfill Implementation ---\r\n\r\n/**\r\n * Feature detection function to check if Interest Invokers are natively supported\r\n */\r\nexport function isInterestInvokersSupported(): boolean {\r\n  return (\r\n    typeof HTMLButtonElement !== \"undefined\" &&\r\n    \"interestForElement\" in HTMLButtonElement.prototype\r\n  );\r\n}\r\n\r\n/**\r\n * Main Interest Invokers polyfill class\r\n * Adapted from Mason Freed's official polyfill with TypeScript support\r\n */\r\nclass InterestInvokersPolyfill {\r\n  private static instance: InterestInvokersPolyfill | null = null;\r\n  private initialized = false;\r\n\r\n  // Constants\r\n  private readonly attributeName = \"interestfor\";\r\n  private readonly interestEventName = \"interest\";\r\n  private readonly loseInterestEventName = \"loseinterest\";\r\n  private readonly interestDelayStartProp = \"--interest-delay-start\";\r\n  private readonly interestDelayEndProp = \"--interest-delay-end\";\r\n  private readonly interestDelayProp = \"--interest-delay\";\r\n  private readonly dataField = \"__interestForData\";\r\n  private readonly targetDataField = \"__interestForTargetData\";\r\n\r\n  // State tracking\r\n  private readonly invokersWithInterest = new Set<HTMLElement>();\r\n  private touchInProgress = false;\r\n\r\n  // State enum\r\n  private readonly InterestState = {\r\n    NoInterest: \"none\",\r\n    FullInterest: \"full\",\r\n  } as const;\r\n\r\n  // Source enum\r\n  private readonly Source = {\r\n    Hover: \"hover\",\r\n    DeHover: \"dehover\",\r\n    Focus: \"focus\",\r\n    Blur: \"blur\",\r\n    Touch: \"touch\",\r\n  } as const;\r\n\r\n  private constructor() {}\r\n\r\n  static getInstance(): InterestInvokersPolyfill {\r\n    if (!InterestInvokersPolyfill.instance) {\r\n      InterestInvokersPolyfill.instance = new InterestInvokersPolyfill();\r\n    }\r\n    return InterestInvokersPolyfill.instance;\r\n  }\r\n\r\n  /**\r\n   * Initialize the Interest Invokers polyfill\r\n   */\r\n  public apply(): void {\r\n    // Feature detection and early return\r\n    if (window.interestForPolyfillInstalled) {\r\n      return;\r\n    }\r\n\r\n    window.interestForPolyfillInstalled = true;\r\n    const nativeSupported = isInterestInvokersSupported();\r\n\r\n    if (nativeSupported && !window.interestForUsePolyfillAlways) {\r\n      return;\r\n    }\r\n\r\n    if (nativeSupported) {\r\n      this.disableNativeSupport();\r\n    }\r\n\r\n    this.setupPolyfill();\r\n    this.initialized = true;\r\n\r\n    console.log(`Interest Invokers polyfill installed (native: ${nativeSupported}).`);\r\n  }\r\n\r\n  /**\r\n   * Disable native support if present to allow polyfill to take effect\r\n   */\r\n  private disableNativeSupport(): void {\r\n    const cancel = (e: Event) => {\r\n      if (e.isTrusted) {\r\n        e.preventDefault();\r\n        e.stopImmediatePropagation();\r\n      }\r\n    };\r\n\r\n    document.body.addEventListener(this.interestEventName, cancel, { capture: true });\r\n    document.body.addEventListener(this.loseInterestEventName, cancel, { capture: true });\r\n  }\r\n\r\n  /**\r\n   * Setup the complete polyfill\r\n   */\r\n  private setupPolyfill(): void {\r\n    this.registerCustomProperties();\r\n    this.addEventHandlers();\r\n    this.setupElementMixins();\r\n  }\r\n\r\n  /**\r\n   * Register CSS custom properties for interest delays\r\n   */\r\n  private registerCustomProperties(): void {\r\n    const style = document.createElement(\"style\");\r\n    style.textContent = `\r\n      @property ${this.interestDelayStartProp} {\r\n        syntax: \"normal | <time>\";\r\n        inherits: false;\r\n        initial-value: normal;\r\n      }\r\n      @property ${this.interestDelayEndProp} {\r\n        syntax: \"normal | <time>\";\r\n        inherits: false;\r\n        initial-value: normal;\r\n      }\r\n      @property ${this.interestDelayProp} {\r\n        syntax: \"[ normal | <time> ]{1,2}\";\r\n        inherits: false;\r\n        initial-value: normal;\r\n      }\r\n    `;\r\n    document.head.appendChild(style);\r\n    (document as any)[this.dataField] = { globalPropsStyle: style };\r\n  }\r\n\r\n  /**\r\n   * Setup element mixins for supported elements\r\n   */\r\n  private setupElementMixins(): void {\r\n    // Button support\r\n    this.applyInterestInvokerMixin(HTMLButtonElement);\r\n    \r\n    // Anchor support\r\n    this.applyInterestInvokerMixin(HTMLAnchorElement);\r\n    \r\n    // Area support  \r\n    this.applyInterestInvokerMixin(HTMLAreaElement);\r\n\r\n    // SVG Anchor support (if available)\r\n    if (typeof SVGAElement !== 'undefined') {\r\n      this.applyInterestInvokerMixin(SVGAElement as any);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply the interestForElement property to supported elements\r\n   */\r\n  private applyInterestInvokerMixin(ElementClass: any): void {\r\n    Object.defineProperty(ElementClass.prototype, 'interestForElement', {\r\n      enumerable: true,\r\n      configurable: true,\r\n      get(this: HTMLElement): Element | null {\r\n        return this.getInterestForTarget();\r\n      },\r\n      set(this: HTMLElement, value: Element | null) {\r\n        if (value === null) {\r\n          this.removeAttribute('interestfor');\r\n        } else if (value instanceof Element) {\r\n          this.setAttribute('interestfor', value.id || '');\r\n        } else {\r\n          throw new TypeError('interestForElement must be an element or null');\r\n        }\r\n      }\r\n    });\r\n\r\n    // Add helper method if it doesn't already exist\r\n    if (!ElementClass.prototype.getInterestForTarget) {\r\n      ElementClass.prototype.getInterestForTarget = function(this: HTMLElement): Element | null {\r\n        const id = this.getAttribute('interestfor');\r\n        return id ? document.getElementById(id) : null;\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add all event handlers for interest detection\r\n   */\r\n  private addEventHandlers(): void {\r\n    // Mouse events\r\n    document.body.addEventListener(\"mouseover\", (e) => \r\n      this.handleInterestHoverOrFocus(e.target as HTMLElement, this.Source.Hover)\r\n    );\r\n    document.body.addEventListener(\"mouseout\", (e) => \r\n      this.handleInterestHoverOrFocus(e.target as HTMLElement, this.Source.DeHover)\r\n    );\r\n\r\n    // Keyboard events\r\n    document.body.addEventListener(\"focusin\", (e) => \r\n      this.handleInterestHoverOrFocus(e.target as HTMLElement, this.Source.Focus)\r\n    );\r\n    document.body.addEventListener(\"focusout\", (e) => \r\n      this.handleInterestHoverOrFocus(e.target as HTMLElement, this.Source.Blur)\r\n    );\r\n\r\n    // Escape key to clear all interest\r\n    document.body.addEventListener(\"keydown\", (e) => {\r\n      if (e.key === \"Escape\") {\r\n        this.invokersWithInterest.forEach((invoker) => {\r\n          this.clearState(invoker);\r\n        });\r\n      }\r\n    });\r\n\r\n    // Touch events\r\n    this.setupTouchHandlers();\r\n  }\r\n\r\n  /**\r\n   * Setup touch event handlers for long press support\r\n   */\r\n  private setupTouchHandlers(): void {\r\n    const longPressTime = 500;\r\n\r\n    document.body.addEventListener(\"touchstart\", (e) => {\r\n      this.touchInProgress = true;\r\n      const invoker = (e.target as HTMLElement).closest(\"button[interestfor]\") as HTMLElement;\r\n      if (invoker) {\r\n        this.initializeDataField(invoker);\r\n        const data = (invoker as any)[this.dataField];\r\n        data.longPressTimer = setTimeout(() => {\r\n          this.gainOrLoseInterest(\r\n            invoker, \r\n            this.getInterestForTarget(invoker), \r\n            this.InterestState.FullInterest\r\n          );\r\n          data.longPressTimer = null;\r\n        }, longPressTime);\r\n      }\r\n    });\r\n\r\n    const cancelLongPress = (e: Event) => {\r\n      const invoker = (e.target as HTMLElement).closest(\"button[interestfor]\") as HTMLElement;\r\n      if (invoker) {\r\n        const data = (invoker as any)[this.dataField];\r\n        if (data?.longPressTimer) {\r\n          clearTimeout(data.longPressTimer);\r\n          data.longPressTimer = null;\r\n        }\r\n      }\r\n    };\r\n\r\n    document.body.addEventListener(\"touchend\", (e) => {\r\n      cancelLongPress(e);\r\n      this.touchInProgress = false;\r\n    });\r\n    document.body.addEventListener(\"touchmove\", cancelLongPress);\r\n  }\r\n\r\n  /**\r\n   * Handle interest changes from hover or focus events\r\n   */\r\n  private handleInterestHoverOrFocus(\r\n    el: HTMLElement, \r\n    source: string\r\n  ): void {\r\n    if (this.touchInProgress) return;\r\n    if (!el.isConnected) return;\r\n\r\n    const target = this.getInterestForTarget(el);\r\n    if (!target) {\r\n      this.handleUpstreamInterest(el, source);\r\n      return;\r\n    }\r\n\r\n    // Safety check: don't interfere if element is disabled\r\n    if (el instanceof HTMLButtonElement && el.disabled) {\r\n      return;\r\n    }\r\n\r\n    this.initializeDataField(el);\r\n    const data = (el as any)[this.dataField];\r\n    const upstreamInvoker = this.getInterestInvoker(el);\r\n\r\n    if (source === this.Source.Hover || source === this.Source.Focus) {\r\n      data.clearLostTask?.();\r\n      upstreamInvoker?.[this.dataField]?.clearLostTask?.();\r\n      this.scheduleInterestGainedTask(el, this.InterestState.FullInterest);\r\n    } else {\r\n      data.clearGainedTask?.();\r\n      if (data.state !== this.InterestState.NoInterest) {\r\n        this.scheduleInterestLostTask(el);\r\n      }\r\n      if (upstreamInvoker) {\r\n        upstreamInvoker[this.dataField]?.clearGainedTask?.();\r\n        if (source === this.Source.Blur || !el.matches(\":hover\")) {\r\n          this.scheduleInterestLostTask(upstreamInvoker);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle upstream interest for elements without direct targets\r\n   */\r\n  private handleUpstreamInterest(el: HTMLElement, source: string): void {\r\n    const containingTarget = el.closest(\".interest-target\") as HTMLElement;\r\n    if (containingTarget) {\r\n      const upstreamInvoker = this.getInterestInvoker(containingTarget);\r\n      if (upstreamInvoker) {\r\n        const data = (upstreamInvoker as any)[this.dataField];\r\n        if (source === this.Source.Hover || source === this.Source.Focus) {\r\n          data?.clearLostTask?.();\r\n        } else {\r\n          if (source === this.Source.Blur || !el.matches(\":hover\")) {\r\n            this.scheduleInterestLostTask(upstreamInvoker);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gain or lose interest in an element\r\n   */\r\n  private gainOrLoseInterest(\r\n    invoker: HTMLElement, \r\n    target: HTMLElement | null, \r\n    newState: string\r\n  ): boolean {\r\n    if (!invoker || !target) return false;\r\n\r\n    if (!invoker.isConnected || \r\n        this.getInterestForTarget(invoker) !== target ||\r\n        (newState === this.InterestState.NoInterest && \r\n         this.getInterestInvoker(target) !== invoker)) {\r\n      return false;\r\n    }\r\n\r\n    if (newState !== this.InterestState.NoInterest) {\r\n      const existing = this.getInterestInvoker(target);\r\n      if (existing) {\r\n        if (existing === invoker) {\r\n          (existing as any)[this.dataField]?.clearLostTask?.();\r\n          return false;\r\n        } else {\r\n          if (!this.gainOrLoseInterest(existing, target, this.InterestState.NoInterest)) {\r\n            return false;\r\n          }\r\n          if (!invoker.isConnected || this.getInterestForTarget(invoker) !== target) {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n      return this.applyState(invoker, newState);\r\n    }\r\n\r\n    this.clearState(invoker);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Apply interest state to an invoker\r\n   */\r\n  private applyState(invoker: HTMLElement, newState: string): boolean {\r\n    const data = (invoker as any)[this.dataField];\r\n    const target = this.getInterestForTarget(invoker);\r\n    if (!target) return false;\r\n\r\n    switch (newState) {\r\n      case this.InterestState.FullInterest:\r\n        if (data.state !== this.InterestState.NoInterest) {\r\n          throw new Error(\"Invalid state\");\r\n        }\r\n\r\n        // Dispatch interest event\r\n        const interestEvent = new CustomEvent(this.interestEventName, {\r\n          bubbles: true, // Allow bubbling for integration with command system\r\n          cancelable: true\r\n        });\r\n        Object.defineProperty(interestEvent, 'source', { \r\n          value: invoker, \r\n          writable: false \r\n        });\r\n        target.dispatchEvent(interestEvent);\r\n        \r\n        // Also dispatch on the invoker for potential command chaining\r\n        invoker.dispatchEvent(new CustomEvent('interest:shown', {\r\n          bubbles: true,\r\n          detail: { target, source: invoker }\r\n        }));\r\n\r\n        // Show popover if applicable\r\n        try {\r\n          if (target.hasAttribute('popover') && typeof (target as any).showPopover === 'function') {\r\n            (target as any).showPopover({ source: invoker });\r\n          }\r\n        } catch {}\r\n\r\n        // Update state\r\n        data.state = this.InterestState.FullInterest;\r\n        if (!(target as any)[this.targetDataField]) {\r\n          (target as any)[this.targetDataField] = {};\r\n        }\r\n        (target as any)[this.targetDataField].invoker = invoker;\r\n\r\n        // Setup popover toggle listener\r\n        if (target.hasAttribute('popover')) {\r\n          const toggleListener = this.createPopoverToggleListener();\r\n          (target as any)[this.targetDataField].toggleListener = toggleListener;\r\n          target.addEventListener('toggle', toggleListener);\r\n        }\r\n\r\n        // Update classes and ARIA\r\n        this.invokersWithInterest.add(invoker);\r\n        invoker.classList.add(\"interest-source\");\r\n        target.classList.add(\"interest-target\");\r\n\r\n        if (!this.isPlainHint(target)) {\r\n          invoker.setAttribute(\"aria-expanded\", \"true\");\r\n        }\r\n\r\n        // Setup anchor positioning\r\n        this.setupAnchorPositioning(invoker, target, data);\r\n        break;\r\n\r\n      default:\r\n        throw new Error(\"Invalid state\");\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Clear interest state from an invoker\r\n   */\r\n  private clearState(invoker: HTMLElement): void {\r\n    const data = (invoker as any)[this.dataField];\r\n    if (!data) return;\r\n\r\n    clearTimeout(data.gainedTimer);\r\n    clearTimeout(data.lostTimer);\r\n\r\n    if (data.state !== this.InterestState.NoInterest) {\r\n      const target = this.getInterestForTarget(invoker);\r\n      if (target) {\r\n        // Dispatch loseinterest event\r\n        const loseInterestEvent = new CustomEvent(this.loseInterestEventName, {\r\n          bubbles: true, // Allow bubbling for integration with command system\r\n          cancelable: true\r\n        });\r\n        Object.defineProperty(loseInterestEvent, 'source', { \r\n          value: invoker, \r\n          writable: false \r\n        });\r\n        target.dispatchEvent(loseInterestEvent);\r\n        \r\n        // Also dispatch on the invoker for potential command chaining\r\n        invoker.dispatchEvent(new CustomEvent('interest:lost', {\r\n          bubbles: true,\r\n          detail: { target, source: invoker }\r\n        }));\r\n\r\n        // Hide popover\r\n        try {\r\n          if (typeof (target as any).hidePopover === 'function') {\r\n            (target as any).hidePopover();\r\n          }\r\n        } catch {}\r\n\r\n        // Cleanup listeners\r\n        const targetData = (target as any)[this.targetDataField];\r\n        if (targetData?.toggleListener) {\r\n          target.removeEventListener('toggle', targetData.toggleListener);\r\n        }\r\n        (target as any)[this.targetDataField] = null;\r\n\r\n        // Update classes and ARIA\r\n        this.invokersWithInterest.delete(invoker);\r\n        invoker.classList.remove(\"interest-source\");\r\n        target.classList.remove(\"interest-target\");\r\n\r\n        if (!this.isPlainHint(target)) {\r\n          invoker.setAttribute(\"aria-expanded\", \"false\");\r\n        }\r\n\r\n        // Cleanup anchor positioning\r\n        this.cleanupAnchorPositioning(invoker, target, data);\r\n      }\r\n      \r\n      data.state = this.InterestState.NoInterest;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setup anchor positioning between invoker and target\r\n   */\r\n  private setupAnchorPositioning(\r\n    invoker: HTMLElement, \r\n    target: HTMLElement, \r\n    data: any\r\n  ): void {\r\n    const anchorName = `--interest-anchor-${Math.random().toString(36).substring(2)}`;\r\n    invoker.style.anchorName = anchorName;\r\n    target.style.positionAnchor = anchorName;\r\n    data.anchorName = anchorName;\r\n  }\r\n\r\n  /**\r\n   * Cleanup anchor positioning\r\n   */\r\n  private cleanupAnchorPositioning(\r\n    invoker: HTMLElement, \r\n    target: HTMLElement, \r\n    data: any\r\n  ): void {\r\n    if (data.anchorName) {\r\n      invoker.style.anchorName = \"\";\r\n      target.style.positionAnchor = \"\";\r\n      data.anchorName = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create popover toggle event listener\r\n   */\r\n  private createPopoverToggleListener() {\r\n    return (e: Event) => {\r\n      const popover = e.target as HTMLElement;\r\n      const toggleEvent = e as any; // ToggleEvent\r\n      if (toggleEvent.newState === 'closed') {\r\n        const targetData = (popover as any)[this.targetDataField];\r\n        const invoker = targetData?.invoker;\r\n        if (invoker) {\r\n          this.gainOrLoseInterest(invoker, popover, this.InterestState.NoInterest);\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Schedule task to gain interest after delay\r\n   */\r\n  private scheduleInterestGainedTask(invoker: HTMLElement, newState: string): void {\r\n    const delay = this.getDelaySeconds(invoker, this.interestDelayStartProp) * 1000;\r\n    if (!isFinite(delay) || delay < 0) return;\r\n\r\n    const data = (invoker as any)[this.dataField];\r\n    data.clearGainedTask?.();\r\n    data.gainedTimer = setTimeout(() => {\r\n      this.gainOrLoseInterest(invoker, this.getInterestForTarget(invoker), newState);\r\n    }, delay);\r\n  }\r\n\r\n  /**\r\n   * Schedule task to lose interest after delay\r\n   */\r\n  private scheduleInterestLostTask(invoker: HTMLElement): void {\r\n    const delay = this.getDelaySeconds(invoker, this.interestDelayEndProp) * 1000;\r\n    if (!isFinite(delay) || delay < 0) return;\r\n\r\n    const data = (invoker as any)[this.dataField];\r\n    data.clearLostTask?.();\r\n    data.lostTimer = setTimeout(() => {\r\n      this.gainOrLoseInterest(\r\n        invoker, \r\n        this.getInterestForTarget(invoker), \r\n        this.InterestState.NoInterest\r\n      );\r\n    }, delay);\r\n  }\r\n\r\n  /**\r\n   * Get delay in seconds for a CSS property\r\n   */\r\n  private getDelaySeconds(el: HTMLElement, prop: string): number {\r\n    const style = getComputedStyle(el);\r\n    const longhandValue = style.getPropertyValue(prop).trim();\r\n\r\n    // Longhand has priority\r\n    if (longhandValue.toLowerCase() !== 'normal') {\r\n      return this.parseTimeValue(longhandValue);\r\n    }\r\n\r\n    // Check shorthand\r\n    const shorthand = style.getPropertyValue(this.interestDelayProp).trim();\r\n    if (shorthand && shorthand.toLowerCase() !== 'normal') {\r\n      const parts = shorthand.split(/\\s+/).filter((s) => s.length > 0);\r\n      if (parts.length > 0) {\r\n        const firstValue = parts[0];\r\n        const secondValue = parts.length > 1 ? parts[1] : firstValue;\r\n        const valueFromShorthand = prop === this.interestDelayStartProp \r\n          ? firstValue \r\n          : secondValue;\r\n\r\n        if (valueFromShorthand.toLowerCase() !== 'normal') {\r\n          return this.parseTimeValue(valueFromShorthand);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Default values\r\n    return prop === this.interestDelayStartProp ? 0.5 : 0.25;\r\n  }\r\n\r\n  /**\r\n   * Parse time value from CSS\r\n   */\r\n  private parseTimeValue(val: string): number {\r\n    const s = String(val).trim();\r\n    const m_s = s.match(/^([\\d.]+)s$/);\r\n    if (m_s) {\r\n      return parseFloat(m_s[1]);\r\n    }\r\n    const m_ms = s.match(/^([\\d.]+)ms$/);\r\n    if (m_ms) {\r\n      return parseFloat(m_ms[1]) / 1000;\r\n    }\r\n    return parseFloat(s) || 0;\r\n  }\r\n\r\n  /**\r\n   * Initialize data field for an element\r\n   */\r\n  private initializeDataField(el: HTMLElement): void {\r\n    if ((el as any)[this.dataField]) return;\r\n\r\n    (el as any)[this.dataField] = {\r\n      state: this.InterestState.NoInterest,\r\n      gainedTimer: null,\r\n      lostTimer: null,\r\n      longPressTimer: null,\r\n      anchorName: null,\r\n      clearGainedTask() {\r\n        clearTimeout(this.gainedTimer);\r\n      },\r\n      clearLostTask() {\r\n        clearTimeout(this.lostTimer);\r\n      },\r\n    };\r\n\r\n    const target = this.getInterestForTarget(el);\r\n    if (target) {\r\n      this.setupAccessibility(el, target);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setup accessibility attributes\r\n   */\r\n  private setupAccessibility(invoker: HTMLElement, target: HTMLElement): void {\r\n    if (this.isPlainHint(target)) {\r\n      invoker.setAttribute(\"aria-describedby\", target.id);\r\n    } else {\r\n      // Rich hint\r\n      invoker.setAttribute(\"aria-details\", target.id);\r\n      invoker.setAttribute(\"aria-expanded\", \"false\");\r\n      if (!target.hasAttribute(\"role\")) {\r\n        target.setAttribute(\"role\", \"tooltip\");\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if target is a plain hint (simple tooltip)\r\n   */\r\n  private isPlainHint(target: HTMLElement): boolean {\r\n    if (target.getAttribute(\"popover\")?.toLowerCase() !== \"hint\") {\r\n      return false;\r\n    }\r\n\r\n    // Check for focusable elements\r\n    const focusableSelector = [\r\n      \"a[href]\",\r\n      \"area[href]\",\r\n      \"input:not([disabled])\",\r\n      \"select:not([disabled])\",\r\n      \"textarea:not([disabled])\",\r\n      \"button:not([disabled])\",\r\n      \"iframe\",\r\n      \"object\",\r\n      \"embed\",\r\n      \"[contenteditable]\",\r\n      '[tabindex]:not([tabindex=\"-1\"])',\r\n    ].join(\",\");\r\n\r\n    if (target.querySelector(focusableSelector)) {\r\n      return false;\r\n    }\r\n\r\n    // Check for structural elements\r\n    const structuralSelector = [\r\n      \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\",\r\n      \"ul\", \"ol\", \"li\", \"table\", \"nav\", \r\n      \"header\", \"footer\", \"main\", \"aside\",\r\n      \"article\", \"section\", \"form\", \"blockquote\",\r\n      \"details\", \"summary\", \"dialog\"\r\n    ].join(\",\");\r\n\r\n    if (target.querySelector(structuralSelector)) {\r\n      return false;\r\n    }\r\n\r\n    // Check ARIA roles\r\n    const elementsWithRoles = target.querySelectorAll(\"[role]\");\r\n    for (const el of elementsWithRoles) {\r\n      const role = el.getAttribute(\"role\")?.toLowerCase();\r\n      if (role && ![\"presentation\", \"none\", \"generic\", \"image\"].includes(role)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get interest target for an element\r\n   */\r\n  private getInterestForTarget(el: HTMLElement): HTMLElement | null {\r\n    const id = el.getAttribute(this.attributeName);\r\n    return id ? document.getElementById(id) : null;\r\n  }\r\n\r\n  /**\r\n   * Get interest invoker for a target element\r\n   */\r\n  private getInterestInvoker(target: HTMLElement): HTMLElement | null {\r\n    const targetData = (target as any)[this.targetDataField];\r\n    const inv = targetData?.invoker || null;\r\n    return inv && (inv as any)[this.dataField]?.state !== this.InterestState.NoInterest\r\n      ? inv\r\n      : null;\r\n  }\r\n\r\n  /**\r\n   * Check if polyfill is initialized\r\n   */\r\n  public isInitialized(): boolean {\r\n    return this.initialized;\r\n  }\r\n}\r\n\r\n// --- Export Functions ---\r\n\r\n/**\r\n * Apply the Interest Invokers polyfill\r\n */\r\nexport function applyInterestInvokers(): void {\r\n  const polyfill = InterestInvokersPolyfill.getInstance();\r\n  \r\n  if (document.readyState === \"complete\") {\r\n    polyfill.apply();\r\n  } else {\r\n    window.addEventListener(\"load\", () => polyfill.apply());\r\n  }\r\n}\r\n\r\n/**\r\n * Create an InterestEvent\r\n */\r\nexport function createInterestEvent(\r\n  type: \"interest\" | \"loseinterest\", \r\n  source?: Element\r\n): InterestEvent {\r\n  const event = new CustomEvent(type, {\r\n    bubbles: false,\r\n    cancelable: false\r\n  }) as InterestEvent;\r\n\r\n  // Define source property\r\n  Object.defineProperty(event, 'source', { \r\n    value: source || null, \r\n    writable: false,\r\n    enumerable: true\r\n  });\r\n\r\n  return event;\r\n}\r\n\r\n// Auto-apply the polyfill when this module is imported\r\napplyInterestInvokers();\r\n", "/**\r\n * @file index.ts\r\n * @version 1.1.0\r\n * @summary A lightweight, zero-dependency polyfill and superset for the upcoming native HTML Invoker Commands API.\r\n * @license MIT\r\n * @author Patrick Glenn\r\n * @see https://github.com/doeixd/invokers\r\n * @description\r\n * This library provides a robust polyfill for the W3C/WHATWG `command` attribute proposal\r\n * and extends it with a powerful set of custom commands (prefixed with `--`).\r\n * It features universal command chaining via the `data-and-then` attribute, allowing you\r\n * to create complex, declarative workflows in pure HTML.\r\n */\r\n\r\n// --- Polyfill Integration ---\r\n// Import and apply the polyfill to ensure CommandEvent and attributes are available\r\nimport './polyfill';\r\n// Import Interest Invokers support\r\nimport './interest-invokers';\r\n\r\n// --- Command String Utilities ---\r\n\r\n/**\r\n * Parses a command string that uses a colon (`:`) as a delimiter, while respecting\r\n * the backslash (`\\`) as an escape character. This is used to parse the arguments\r\n * of custom library commands (e.g., `--class:toggle:is-active`).\r\n *\r\n * @param commandString The raw string from the `command` attribute.\r\n * @returns An array of command parts.\r\n * @example\r\n * parseCommandString('--class:toggle:md\\\\:grid-cols-2'); // returns ['--class', 'toggle', 'md:grid-cols-2']\r\n */\r\nexport function parseCommandString(commandString: string): string[] {\r\n  const parts: string[] = [];\r\n  let currentPart = \"\";\r\n  let i = 0;\r\n  while (i < commandString.length) {\r\n    const char = commandString[i];\r\n    if (char === \"\\\\\") {\r\n      currentPart += commandString[i + 1] ?? \"\";\r\n      i += 2;\r\n    } else if (char === \":\") {\r\n      parts.push(currentPart);\r\n      currentPart = \"\";\r\n      i++;\r\n    } else {\r\n      currentPart += char;\r\n      i++;\r\n    }\r\n  }\r\n  parts.push(currentPart);\r\n  return parts;\r\n}\r\n\r\n/**\r\n * Programmatically creates a valid, spec-compliant command string from an array of parts.\r\n * It ensures the first part is prefixed with `--` if it isn't already.\r\n *\r\n * @param parts The parts of the command to join.\r\n * @returns A single, correctly formatted command string.\r\n * @example\r\n * createCommandString('class', 'toggle', 'is-active'); // returns '--class:toggle:is-active'\r\n */\r\nexport function createCommandString(...parts: string[]): string {\r\n  if (parts.length > 0 && !parts[0].startsWith('--')) {\r\n    parts[0] = `--${parts[0]}`;\r\n  }\r\n  return parts\r\n    .map((part) => part.replace(/\\\\/g, \"\\\\\\\\\").replace(/:/g, \"\\\\:\"))\r\n    .join(\":\");\r\n}\r\n\r\n// --- Error Handling & Debugging ---\r\n\r\n/**\r\n * Development mode flag - can be set via window.Invoker.debug = true\r\n */\r\nexport let isDebugMode = false;\r\n\r\n/**\r\n * Error severity levels for better debugging\r\n */\r\nexport enum ErrorSeverity {\r\n  WARNING = 'warning',\r\n  ERROR = 'error',\r\n  CRITICAL = 'critical'\r\n}\r\n\r\n/**\r\n * Enhanced error information for debugging\r\n */\r\nexport interface InvokerError extends Error {\r\n  severity: ErrorSeverity;\r\n  element?: HTMLElement;\r\n  command?: string;\r\n  context?: any;\r\n  recovery?: string;\r\n}\r\n\r\n/**\r\n * Creates a detailed error with debugging information\r\n */\r\nexport function createInvokerError(\r\n  message: string,\r\n  severity: ErrorSeverity = ErrorSeverity.ERROR,\r\n  options: {\r\n    element?: HTMLElement;\r\n    command?: string;\r\n    context?: any;\r\n    recovery?: string;\r\n    cause?: Error;\r\n  } = {}\r\n): InvokerError {\r\n  const error = new Error(message) as InvokerError;\r\n  error.severity = severity;\r\n  error.element = options.element;\r\n  error.command = options.command;\r\n  error.context = options.context;\r\n  error.recovery = options.recovery;\r\n  if (options.cause) {\r\n    error.cause = options.cause;\r\n  }\r\n  return error;\r\n}\r\n\r\n/**\r\n * Logs errors with appropriate severity and debugging information\r\n */\r\nexport function logInvokerError(error: InvokerError | Error, prefix = 'Invokers'): void {\r\n  const isInvokerError = 'severity' in error;\r\n  const severity = isInvokerError ? (error as InvokerError).severity : ErrorSeverity.ERROR;\r\n\r\n  const logMethod = severity === ErrorSeverity.CRITICAL ? 'error'\r\n    : severity === ErrorSeverity.ERROR ? 'error'\r\n      : 'warn';\r\n\r\n  if (isDebugMode || severity === ErrorSeverity.CRITICAL) {\r\n    console.group(`${prefix}: ${error.message}`);\r\n    console[logMethod]('Error:', error);\r\n\r\n    if (isInvokerError) {\r\n      const invokerError = error as InvokerError;\r\n      if (invokerError.element) {\r\n        console.log('Element:', invokerError.element);\r\n      }\r\n      if (invokerError.command) {\r\n        console.log('Command:', invokerError.command);\r\n      }\r\n      if (invokerError.context) {\r\n        console.log('Context:', invokerError.context);\r\n      }\r\n      if (invokerError.recovery) {\r\n        console.log('Suggested fix:', invokerError.recovery);\r\n      }\r\n    }\r\n    console.groupEnd();\r\n  } else {\r\n    console[logMethod](`${prefix}: ${error.message}`, isInvokerError ? (error as InvokerError).element : undefined);\r\n  }\r\n}\r\n\r\n/**\r\n * Validates that an element exists and has the required attributes\r\n */\r\nexport function validateElement(element: HTMLElement | null, requirements: {\r\n  id?: boolean;\r\n  tagName?: string[];\r\n  attributes?: string[];\r\n}): string[] {\r\n  const errors: string[] = [];\r\n\r\n  if (!element) {\r\n    errors.push('Element not found');\r\n    return errors;\r\n  }\r\n\r\n  if (requirements.id && !element.id) {\r\n    errors.push('Element missing required id attribute');\r\n  }\r\n\r\n  if (requirements.tagName && !requirements.tagName.includes(element.tagName.toLowerCase())) {\r\n    errors.push(`Element must be one of: ${requirements.tagName.join(', ')}, got: ${element.tagName.toLowerCase()}`);\r\n  }\r\n\r\n  if (requirements.attributes) {\r\n    for (const attr of requirements.attributes) {\r\n      if (!element.hasAttribute(attr)) {\r\n        errors.push(`Element missing required attribute: ${attr}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\n/**\r\n * Sanitizes command parameters to prevent injection attacks\r\n */\r\nexport function sanitizeParams(params: readonly string[]): string[] {\r\n  return params.map(param => {\r\n    if (typeof param !== 'string') {\r\n      return String(param);\r\n    }\r\n\r\n    // Remove potentially dangerous content\r\n    let sanitized = param\r\n      .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '') // Remove script tags\r\n      .replace(/javascript:/gi, '') // Remove javascript: URLs\r\n      .replace(/data:text\\/html/gi, '') // Remove data URLs that could contain HTML\r\n      .replace(/vbscript:/gi, '') // Remove VBScript URLs\r\n      .replace(/on\\w+\\s*=/gi, '') // Remove event handlers\r\n      .replace(/expression\\s*\\(/gi, '') // Remove CSS expressions\r\n      .trim();\r\n\r\n    // Additional validation for URLs\r\n    if (param.includes('://') || param.startsWith('//')) {\r\n      try {\r\n        const url = new URL(param, window.location.href);\r\n        if (!['http:', 'https:', 'ftp:', 'mailto:'].includes(url.protocol)) {\r\n          console.warn(`Invokers: Potentially unsafe URL protocol \"${url.protocol}\" detected and removed`);\r\n          return '';\r\n        }\r\n      } catch (e) {\r\n        // If URL parsing fails, it might be malformed - safer to remove\r\n        console.warn('Invokers: Malformed URL detected and removed:', param);\r\n        return '';\r\n      }\r\n    }\r\n\r\n    return sanitized;\r\n  });\r\n}\r\n\r\n/**\r\n * Validates and sanitizes HTML content before DOM injection\r\n */\r\nexport function sanitizeHTML(html: string): string {\r\n  if (!html || typeof html !== 'string') {\r\n    return '';\r\n  }\r\n\r\n  // Create a temporary element to parse and sanitize HTML\r\n  const temp = document.createElement('div');\r\n  temp.innerHTML = html;\r\n\r\n  // Remove dangerous elements\r\n  const dangerousElements = temp.querySelectorAll('script, object, embed, iframe, frame, meta, link[rel=\"import\"]');\r\n  dangerousElements.forEach(el => el.remove());\r\n\r\n  // Remove dangerous attributes from all elements\r\n  const allElements = temp.querySelectorAll('*');\r\n  allElements.forEach(el => {\r\n    // Remove event handler attributes\r\n    Array.from(el.attributes).forEach(attr => {\r\n      if (attr.name.startsWith('on') ||\r\n        attr.value.includes('javascript:') ||\r\n        attr.value.includes('vbscript:') ||\r\n        attr.value.includes('data:text/html')) {\r\n        el.removeAttribute(attr.name);\r\n      }\r\n    });\r\n  });\r\n\r\n  return temp.innerHTML;\r\n}\r\n\r\n/**\r\n * Rate limiting for command execution\r\n */\r\nexport class RateLimiter {\r\n  private executions: Map<string, number[]> = new Map();\r\n  private readonly windowMs: number;\r\n  private readonly maxExecutions: number;\r\n\r\n  constructor(windowMs = 1000, maxExecutions = 50) {\r\n    this.windowMs = windowMs;\r\n    this.maxExecutions = maxExecutions;\r\n  }\r\n\r\n  checkLimit(key: string): boolean {\r\n    const now = Date.now();\r\n    const executions = this.executions.get(key) || [];\r\n\r\n    // Remove old executions outside the window\r\n    const validExecutions = executions.filter(time => now - time < this.windowMs);\r\n\r\n    if (validExecutions.length >= this.maxExecutions) {\r\n      return false; // Rate limit exceeded\r\n    }\r\n\r\n    validExecutions.push(now);\r\n    this.executions.set(key, validExecutions);\r\n    return true;\r\n  }\r\n\r\n  reset(key?: string): void {\r\n    if (key) {\r\n      this.executions.delete(key);\r\n    } else {\r\n      this.executions.clear();\r\n    }\r\n  }\r\n}\r\n\r\n// --- Core Type Definitions ---\r\n\r\n/**\r\n * The context object passed to every custom library command's callback function.\r\n * It provides a rich, type-safe API for interacting with the invoker and its target,\r\n * built upon the standard `CommandEvent`.\r\n */\r\nexport interface CommandContext {\r\n  /** The `<button>` element that was invoked (`event.source`). */\r\n  readonly invoker: HTMLButtonElement;\r\n  /** The element that received the command event (`event.target`). This is the target specified by `commandfor`. */\r\n  readonly targetElement: HTMLElement;\r\n  /** The full command string that was invoked (e.g., `--class:toggle:is-active`). */\r\n  readonly fullCommand: string;\r\n  /**\r\n   * An array of string parameters that follow the matched command prefix.\r\n   * For a `command=\"--class:toggle:is-active\"` and a registered command named `--class`,\r\n   * the `params` array will be `['toggle', 'is-active']`.\r\n   */\r\n  readonly params: readonly string[];\r\n  /**\r\n   * Retrieves the target elements controlled by the invoker. This is primarily for legacy\r\n   * or multi-target scenarios. It prioritizes the spec-compliant `commandfor` attribute,\r\n   * then falls back to `aria-controls` and `data-target`.\r\n   * @returns An array of `HTMLElement`s.\r\n   */\r\n  getTargets: () => HTMLElement[];\r\n  /**\r\n   * Automatically updates the invoker's `aria-expanded` and `aria-pressed` attributes\r\n   * based on the visibility state of the provided target elements.\r\n   * @param targets The target elements whose state determines the ARIA update.\r\n   */\r\n  updateAriaState: (targets: HTMLElement[]) => void;\r\n  /**\r\n   * Manages the active state for a group of related invokers (e.g., in a tab group).\r\n   * Deactivates other invokers within the same \"widget group\" when a new one is activated.\r\n   */\r\n  manageGroupState: () => void;\r\n  /**\r\n   * Execute a follow-up command after the current command completes.\r\n   * @param command The command string to execute next\r\n   * @param target Optional target element ID (defaults to current target)\r\n   * @param state Optional command state to set\r\n   */\r\n  executeAfter: (command: string, target?: string, state?: CommandState) => void;\r\n  /**\r\n   * Execute different commands based on success/error state.\r\n   * @param options Configuration object with onSuccess, onError, and onComplete command arrays\r\n   */\r\n  executeConditional: (options: ConditionalCommands) => void;\r\n}\r\n\r\n/**\r\n * The function signature for a custom library command's implementation logic.\r\n * Callbacks can now be synchronous (return void) or asynchronous (return a Promise).\r\n * The library will await the result before proceeding with any chained commands.\r\n */\r\nexport type CommandCallback = (context: CommandContext) => void | Promise<void>;\r\n\r\n/**\r\n * Command execution result for conditional chaining.\r\n */\r\nexport interface CommandExecutionResult {\r\n  success: boolean;\r\n  error?: Error;\r\n  data?: any;\r\n}\r\n\r\n/**\r\n * Command lifecycle states.\r\n */\r\nexport type CommandState = 'active' | 'completed' | 'disabled' | 'once';\r\n\r\n/**\r\n * Conditional commands configuration.\r\n */\r\nexport interface ConditionalCommands {\r\n  onSuccess?: string[];\r\n  onError?: string[];\r\n  onComplete?: string[];\r\n}\r\n\r\n/**\r\n * Pipeline step configuration for template-based command pipelines.\r\n */\r\nexport interface PipelineStep {\r\n  command: string;\r\n  target: string;\r\n  condition?: 'success' | 'error' | 'always';\r\n  once?: boolean;\r\n  delay?: number;\r\n  data?: Record<string, string>;\r\n}\r\n\r\n// --- Global Type Augmentations ---\r\n\r\ndeclare global {\r\n  // The polyfill ensures these types exist. We declare them here for TypeScript's benefit.\r\n  interface CommandEvent extends Event {\r\n    readonly command: string;\r\n    readonly source: HTMLButtonElement | null;\r\n  }\r\n  interface HTMLButtonElement {\r\n    commandForElement: Element | null;\r\n    command: string;\r\n  }\r\n  interface Window {\r\n    Invoker: {\r\n      register: (name: string, callback: CommandCallback) => void;\r\n      executeCommand: (command: string, targetId?: string, invoker?: HTMLButtonElement) => Promise<void>;\r\n      parseCommandString: typeof parseCommandString;\r\n      createCommandString: typeof createCommandString;\r\n      instance: InvokerManager;\r\n    };\r\n  }\r\n}\r\n\r\n// --- List of native command keywords from the W3C/WHATWG proposal ---\r\nconst NATIVE_COMMAND_KEYWORDS = new Set([\r\n  'show-modal',\r\n  'close',\r\n  'request-close',\r\n  'show-popover',\r\n  'hide-popover',\r\n  'toggle-popover',\r\n]);\r\n\r\n// --- Performance Monitoring ---\r\n\r\n/**\r\n * Monitors command execution performance and prevents abuse\r\n */\r\nclass PerformanceMonitor {\r\n  private executionTimes: number[] = [];\r\n  private readonly maxExecutionsPerSecond = 100;\r\n  private readonly monitoringWindow = 1000; // 1 second\r\n\r\n  recordExecution(): boolean {\r\n    const now = Date.now();\r\n\r\n    // Remove old entries outside the monitoring window\r\n    this.executionTimes = this.executionTimes.filter(time => now - time < this.monitoringWindow);\r\n\r\n    // Check if we're exceeding limits\r\n    if (this.executionTimes.length >= this.maxExecutionsPerSecond) {\r\n      const error = createInvokerError(\r\n        `Too many command executions (${this.executionTimes.length}/second). Possible infinite loop detected.`,\r\n        ErrorSeverity.CRITICAL,\r\n        {\r\n          recovery: 'Check for recursive command chains or remove data-and-then attributes causing loops'\r\n        }\r\n      );\r\n      logInvokerError(error);\r\n      return false;\r\n    }\r\n\r\n    this.executionTimes.push(now);\r\n    return true;\r\n  }\r\n\r\n  getStats(): { executionsLastSecond: number; averageInterval: number } {\r\n    const now = Date.now();\r\n    const recentExecutions = this.executionTimes.filter(time => now - time < this.monitoringWindow);\r\n    const intervals = recentExecutions.slice(1).map((time, i) => time - recentExecutions[i]);\r\n    const averageInterval = intervals.length > 0 ? intervals.reduce((a, b) => a + b, 0) / intervals.length : 0;\r\n\r\n    return {\r\n      executionsLastSecond: recentExecutions.length,\r\n      averageInterval\r\n    };\r\n  }\r\n}\r\n\r\n// --- The Main Invoker Class ---\r\n\r\n/**\r\n * Manages the registration and execution of all custom `--` prefixed commands.\r\n * This class listens for the standard `CommandEvent` and routes recognized custom\r\n * commands to their registered JavaScript handlers with comprehensive error handling.\r\n */\r\n\r\nexport class InvokerManager {\r\n  private readonly commands = new Map<string, CommandCallback>();\r\n  private sortedCommandKeys: string[] = [];\r\n  private commandStates = new Map<string, CommandState>();\r\n  private andThenManager: AndThenManager;\r\n  private pipelineManager: PipelineManager;\r\n  private executionQueue: Promise<void> = Promise.resolve();\r\n\r\n  // Performance and debugging tracking\r\n  private executionCount = 0;\r\n  private maxExecutionsPerSecond = 100;\r\n  private executionTimes: number[] = [];\r\n  private readonly performanceMonitor = new PerformanceMonitor();\r\n\r\n  constructor() {\r\n    this.andThenManager = new AndThenManager(this);\r\n    this.pipelineManager = new PipelineManager(this);\r\n\r\n    // Only initialize if this is the first instance to avoid duplicate listeners\r\n    if (typeof window !== \"undefined\" && typeof document !== \"undefined\") {\r\n      this.registerCoreLibraryCommands();\r\n      // Only add listeners if they haven't been added yet\r\n      if (!(window as any).__invokerListenersAdded) {\r\n        this.listen();\r\n        (window as any).__invokerListenersAdded = true;\r\n      }\r\n    } else if (typeof global !== \"undefined\" && (global as any).window && (global as any).document) {\r\n      // Test environment with jsdom\r\n      this.registerCoreLibraryCommands();\r\n      if (!(global as any).__invokerListenersAdded) {\r\n        this.listen();\r\n        (global as any).__invokerListenersAdded = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Programmatically executes a command on a target element with comprehensive validation.\r\n   * This is useful for chaining commands without dispatching events.\r\n   *\r\n   * @param command The command string to execute.\r\n   * @param targetId The ID of the target element.\r\n   * @param source Optional source element (for context).\r\n   */\r\n  public async executeCommand(command: string, targetId: string, source?: HTMLElement): Promise<void> {\r\n    // Performance check\r\n    if (!this.performanceMonitor.recordExecution()) {\r\n      return; // Abort if too many executions\r\n    }\r\n\r\n    // Validate inputs\r\n    if (!command || typeof command !== 'string') {\r\n      const error = createInvokerError(\r\n        'Command must be a non-empty string',\r\n        ErrorSeverity.ERROR,\r\n        {\r\n          command,\r\n          recovery: 'Provide a valid command string like \"--toggle\" or \"show-modal\"'\r\n        }\r\n      );\r\n      logInvokerError(error);\r\n      return;\r\n    }\r\n\r\n    if (!targetId || typeof targetId !== 'string') {\r\n      const error = createInvokerError(\r\n        'Target ID must be a non-empty string',\r\n        ErrorSeverity.ERROR,\r\n        {\r\n          command,\r\n          context: { targetId },\r\n          recovery: 'Provide a valid element ID that exists in the DOM'\r\n        }\r\n      );\r\n      logInvokerError(error);\r\n      return;\r\n    }\r\n\r\n    // Find target element with detailed error reporting\r\n    const targetElement = document.getElementById(targetId);\r\n    if (!targetElement) {\r\n      const allIds = Array.from(document.querySelectorAll('[id]')).map(el => el.id).filter(Boolean);\r\n      const suggestions = allIds.filter(id => id.includes(targetId.toLowerCase()) || targetId.includes(id.toLowerCase()));\r\n\r\n      const error = createInvokerError(\r\n        `Target element with id \"${targetId}\" not found`,\r\n        ErrorSeverity.ERROR,\r\n        {\r\n          command,\r\n          element: source,\r\n          context: {\r\n            targetId,\r\n            availableIds: allIds.slice(0, 10), // Show first 10 IDs\r\n            suggestions: suggestions.slice(0, 3) // Show up to 3 suggestions\r\n          },\r\n          recovery: suggestions.length > 0\r\n            ? `Did you mean: ${suggestions.slice(0, 3).join(', ')}?`\r\n            : 'Check that the target element exists and has the correct id attribute'\r\n        }\r\n      );\r\n      logInvokerError(error);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const mockEvent = {\r\n        command,\r\n        source: source || null,\r\n        target: targetElement,\r\n        preventDefault: () => { },\r\n        type: 'command'\r\n      } as any;\r\n\r\n      await this.executeCustomCommand(command, mockEvent);\r\n    } catch (error) {\r\n      const invokerError = createInvokerError(\r\n        `Failed to execute command \"${command}\" on element \"${targetId}\"`,\r\n        ErrorSeverity.ERROR,\r\n        {\r\n          command,\r\n          element: source || targetElement,\r\n          cause: error as Error,\r\n          recovery: 'Check the command syntax and ensure the target element supports this operation'\r\n        }\r\n      );\r\n      logInvokerError(invokerError);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Registers a new custom command with comprehensive validation.\r\n  * All commands must start with `--` to be valid.\r\n  *\r\n  * @param name The unique name of the command (e.g., `'--class'` or `'class'`).\r\n  * @param callback The function to execute for this command.\r\n  */\r\n  public register(name: string, callback: CommandCallback): void {\r\n    // Validate inputs\r\n    if (!name || typeof name !== 'string') {\r\n      const error = createInvokerError(\r\n        'Command name must be a non-empty string',\r\n        ErrorSeverity.ERROR,\r\n        {\r\n          context: { name },\r\n          recovery: 'Provide a valid command name like \"--my-command\"'\r\n        }\r\n      );\r\n      logInvokerError(error);\r\n      return;\r\n    }\r\n\r\n    if (!callback || typeof callback !== 'function') {\r\n      const error = createInvokerError(\r\n        `Command callback for \"${name}\" must be a function`,\r\n        ErrorSeverity.ERROR,\r\n        {\r\n          command: name,\r\n          context: { callback },\r\n          recovery: 'Provide a function that accepts a CommandContext parameter'\r\n        }\r\n      );\r\n      logInvokerError(error);\r\n      return;\r\n    }\r\n\r\n    // Validate command name format\r\n    const trimmedName = name.trim();\r\n    if (trimmedName.length === 0) {\r\n      const error = createInvokerError(\r\n        'Command name cannot be empty or whitespace only',\r\n        ErrorSeverity.ERROR,\r\n        {\r\n          recovery: 'Provide a meaningful command name like \"--toggle\" or \"--fetch\"'\r\n        }\r\n      );\r\n      logInvokerError(error);\r\n      return;\r\n    }\r\n\r\n    // Handle prefix normalization\r\n    let normalizedName = trimmedName;\r\n    if (!normalizedName.startsWith('--')) {\r\n      normalizedName = `--${normalizedName}`;\r\n      if (isDebugMode) {\r\n        console.warn(`Invokers: Command \"${trimmedName}\" registered without '--' prefix. Automatically registered as \"${normalizedName}\".`);\r\n      }\r\n    }\r\n\r\n    // Validate against reserved native commands\r\n    if (NATIVE_COMMAND_KEYWORDS.has(normalizedName.slice(2))) {\r\n      const error = createInvokerError(\r\n        `Cannot register custom command \"${normalizedName}\" - conflicts with native command \"${normalizedName.slice(2)}\"`,\r\n        ErrorSeverity.ERROR,\r\n        {\r\n          command: normalizedName,\r\n          recovery: 'Choose a different command name that doesn\\'t conflict with native commands'\r\n        }\r\n      );\r\n      logInvokerError(error);\r\n      return;\r\n    }\r\n\r\n    // Check for overwrites\r\n    if (this.commands.has(normalizedName)) {\r\n      const error = createInvokerError(\r\n        `Command \"${normalizedName}\" is already registered and will be overwritten`,\r\n        ErrorSeverity.WARNING,\r\n        {\r\n          command: normalizedName,\r\n          recovery: 'Use a different command name or ensure this overwrite is intentional'\r\n        }\r\n      );\r\n      logInvokerError(error);\r\n    }\r\n\r\n    try {\r\n      this.commands.set(normalizedName, callback);\r\n      this.sortedCommandKeys = Array.from(this.commands.keys()).sort((a, b) => b.length - a.length);\r\n\r\n      if (isDebugMode) {\r\n        console.log(`Invokers: Successfully registered command \"${normalizedName}\"`);\r\n      }\r\n    } catch (error) {\r\n      const invokerError = createInvokerError(\r\n        `Failed to register command \"${normalizedName}\"`,\r\n        ErrorSeverity.CRITICAL,\r\n        {\r\n          command: normalizedName,\r\n          cause: error as Error,\r\n          recovery: 'Check that the callback function is valid and the command name is unique'\r\n        }\r\n      );\r\n      logInvokerError(invokerError);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles incoming `CommandEvent`s. This is now an async method to allow\r\n   * for awaiting the full command chain.\r\n   */\r\n  private async handleCommand(event: CommandEvent): Promise<void> {\r\n    const commandStr = event.command;\r\n\r\n    if (commandStr.startsWith('--')) {\r\n      await this.executeCustomCommand(commandStr, event);\r\n    } else if (!NATIVE_COMMAND_KEYWORDS.has(commandStr) && commandStr !== \"\") {\r\n      // Backwards Compatibility: Handle old, non-prefixed library commands.\r\n      console.warn(`Invokers (Compatibility): Non-spec-compliant command \"${commandStr}\" detected. Please update your HTML to use '--${commandStr}' for future compatibility. Attempting to handle...`);\r\n      await this.executeCustomCommand(`--${commandStr}`, event);\r\n    }\r\n    // Native commands ('show-modal', etc.) are ignored and handled by the polyfill/browser.\r\n  }\r\n\r\n  /**\r\n   * Executes a custom command and then triggers a follow-up command if specified.\r\n   * This is the new heart of the chaining mechanism with enhanced lifecycle support.\r\n   */\r\n  private async executeCustomCommand(commandStr: string, event: CommandEvent): Promise<void> {\r\n    // Validate command string\r\n    if (!commandStr || typeof commandStr !== 'string') {\r\n      const error = createInvokerError(\r\n        'Invalid command string provided',\r\n        ErrorSeverity.ERROR,\r\n        {\r\n          command: commandStr,\r\n          element: event.source as HTMLElement,\r\n          recovery: 'Ensure the command attribute contains a valid command string'\r\n        }\r\n      );\r\n      logInvokerError(error);\r\n      return;\r\n    }\r\n\r\n    // Performance monitoring\r\n    if (!this.performanceMonitor.recordExecution()) {\r\n      return; // Abort if too many executions\r\n    }\r\n\r\n    let commandFound = false;\r\n\r\n    for (const registeredCommand of this.sortedCommandKeys) {\r\n      if (commandStr.startsWith(registeredCommand) && (commandStr.length === registeredCommand.length || commandStr[registeredCommand.length] === \":\")) {\r\n        commandFound = true;\r\n        const callback = this.commands.get(registeredCommand);\r\n\r\n        if (!callback) {\r\n          const error = createInvokerError(\r\n            `Command \"${registeredCommand}\" is registered but callback is missing`,\r\n            ErrorSeverity.CRITICAL,\r\n            {\r\n              command: commandStr,\r\n              element: event.source as HTMLElement,\r\n              recovery: 'This is an internal error. Please report this issue.'\r\n            }\r\n          );\r\n          logInvokerError(error);\r\n          return;\r\n        }\r\n\r\n        try {\r\n          event.preventDefault(); // Stop default polyfill/browser action\r\n          const params = parseCommandString(commandStr.substring(registeredCommand.length + 1));\r\n          const sanitizedParams = sanitizeParams(params);\r\n          const context = this.createContext(event, commandStr, sanitizedParams);\r\n          const invoker = event.source as HTMLButtonElement;\r\n\r\n          // Check command state before execution\r\n          const commandKey = `${commandStr}:${context.targetElement.id}`;\r\n          let currentState = this.commandStates.get(commandKey) || 'active';\r\n\r\n          // Check if state is specified on the invoker (if it exists)\r\n          if (invoker) {\r\n            const invokerState = (invoker.dataset.state as CommandState) || (invoker.getAttribute('data-state') as CommandState);\r\n            if (invokerState) {\r\n              // If the state was already set in commandStates and is 'completed', don't override\r\n              if (!(this.commandStates.has(commandKey) && this.commandStates.get(commandKey) === 'completed')) {\r\n                currentState = invokerState;\r\n              }\r\n            }\r\n          }\r\n\r\n          // For chained commands (null invoker), check if the command should be prevented\r\n          if (currentState === 'disabled' || currentState === 'completed') {\r\n            return;\r\n          }\r\n\r\n          let executionResult: CommandExecutionResult = { success: true };\r\n\r\n          try {\r\n            // Validate context before execution\r\n            const validationErrors = this.validateContext(context);\r\n            if (validationErrors.length > 0) {\r\n              throw createInvokerError(\r\n                `Command execution aborted: ${validationErrors.join(', ')}`,\r\n                ErrorSeverity.ERROR,\r\n                {\r\n                  command: commandStr,\r\n                  element: context.invoker || context.targetElement,\r\n                  context: { validationErrors },\r\n                  recovery: 'Fix the validation errors and try again'\r\n                }\r\n              );\r\n            }\r\n\r\n            // Await the primary command with timeout protection\r\n            const executionPromise = Promise.resolve(callback(context));\r\n            const timeoutPromise = new Promise((_, reject) => {\r\n              setTimeout(() => reject(new Error('Command execution timeout')), 30000); // 30 second timeout\r\n            });\r\n\r\n            await Promise.race([executionPromise, timeoutPromise]);\r\n\r\n            // Update state after successful execution\r\n            if (currentState === 'once') {\r\n              this.commandStates.set(commandKey, 'completed');\r\n            }\r\n\r\n            if (isDebugMode) {\r\n              console.log(`Invokers: Command \"${registeredCommand}\" executed successfully`);\r\n            }\r\n\r\n          } catch (error) {\r\n            executionResult = { success: false, error: error as Error };\r\n\r\n            const invokerError = createInvokerError(\r\n              `Command \"${registeredCommand}\" execution failed`,\r\n              ErrorSeverity.ERROR,\r\n              {\r\n                command: commandStr,\r\n                element: context.invoker || context.targetElement,\r\n                cause: error as Error,\r\n                context: {\r\n                  params: context.params,\r\n                  targetId: context.targetElement?.id,\r\n                  invokerState: currentState\r\n                },\r\n                recovery: this.generateRecoverySuggestion(registeredCommand, error as Error, context)\r\n              }\r\n            );\r\n            logInvokerError(invokerError);\r\n\r\n            // Attempt graceful degradation\r\n            this.attemptGracefulDegradation(context, error as Error);\r\n          }\r\n\r\n          // Process <and-then> elements\r\n          if (context.invoker) {\r\n            await this.andThenManager.processAndThen(context.invoker, executionResult, context.targetElement);\r\n          }\r\n\r\n          // After the primary command is complete, trigger the follow-up.\r\n          // Only trigger followup if we have an invoker (not for chained commands)\r\n          if (context.invoker) {\r\n            await this.triggerFollowup(context.invoker, context.targetElement, executionResult);\r\n          }\r\n        } catch (commandError) {\r\n          // Handle errors in the command setup/execution wrapper\r\n          const wrapperError = createInvokerError(\r\n            `Failed to execute command \"${registeredCommand}\"`,\r\n            ErrorSeverity.CRITICAL,\r\n            {\r\n              command: commandStr,\r\n              element: event.source as HTMLElement,\r\n              cause: commandError as Error,\r\n              recovery: 'Check command syntax and ensure all required attributes are present'\r\n            }\r\n          );\r\n          logInvokerError(wrapperError);\r\n        }\r\n\r\n        return; // Stop after the first, longest match\r\n      }\r\n    }\r\n\r\n    // If no command was found, provide helpful suggestions\r\n    if (!commandFound) {\r\n      const suggestions = this.findSimilarCommands(commandStr);\r\n      const error = createInvokerError(\r\n        `Unknown command \"${commandStr}\"`,\r\n        ErrorSeverity.ERROR,\r\n        {\r\n          command: commandStr,\r\n          element: event.source as HTMLElement,\r\n          context: {\r\n            availableCommands: this.sortedCommandKeys.slice(0, 10),\r\n            suggestions\r\n          },\r\n          recovery: suggestions.length > 0\r\n            ? `Did you mean: ${suggestions.join(', ')}?`\r\n            : 'Check the command name and ensure it\\'s registered. Custom commands must start with \"--\"'\r\n        }\r\n      );\r\n      logInvokerError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validates the command context before execution\r\n   */\r\n  private validateContext(context: CommandContext): string[] {\r\n    const errors: string[] = [];\r\n\r\n    if (!context.targetElement) {\r\n      errors.push('Target element is null or undefined');\r\n    } else if (!context.targetElement.isConnected) {\r\n      errors.push('Target element is not connected to the DOM');\r\n    }\r\n\r\n    if (context.params.some(param => param == null)) {\r\n      errors.push('Command contains null or undefined parameters');\r\n    }\r\n\r\n    return errors;\r\n  }\r\n\r\n  /**\r\n   * Generates context-aware recovery suggestions for failed commands\r\n   */\r\n  private generateRecoverySuggestion(command: string, error: Error, context: CommandContext): string {\r\n    const errorMessage = error.message.toLowerCase();\r\n\r\n    // Command-specific suggestions\r\n    if (command.includes('fetch')) {\r\n      if (errorMessage.includes('network') || errorMessage.includes('fetch')) {\r\n        return 'Check your network connection and ensure the URL is correct and reachable';\r\n      }\r\n      if (errorMessage.includes('cors')) {\r\n        return 'CORS error: Ensure your server allows cross-origin requests or use a proxy';\r\n      }\r\n      return 'Verify the data-url attribute points to a valid endpoint that returns HTML';\r\n    }\r\n\r\n    if (command.includes('media')) {\r\n      return 'Ensure the target element is a <video> or <audio> element';\r\n    }\r\n\r\n    if (command.includes('form')) {\r\n      return 'Ensure the target element is a <form> element with a valid action attribute';\r\n    }\r\n\r\n    if (command.includes('class')) {\r\n      return 'Check that the class name is valid and the target element exists';\r\n    }\r\n\r\n    if (command.includes('attr')) {\r\n      return 'Verify the attribute name is valid and check data-attr-name/data-attr-value attributes';\r\n    }\r\n\r\n    // Generic suggestions based on error type\r\n    if (errorMessage.includes('null') || errorMessage.includes('undefined')) {\r\n      return 'Check that all required elements and attributes are present in the DOM';\r\n    }\r\n\r\n    if (errorMessage.includes('permission') || errorMessage.includes('security')) {\r\n      return 'This operation requires user permission or HTTPS context';\r\n    }\r\n\r\n    return 'Check the command syntax and ensure all required attributes are present';\r\n  }\r\n\r\n  /**\r\n   * Attempts graceful degradation when a command fails\r\n   */\r\n  private attemptGracefulDegradation(context: CommandContext, error: Error): void {\r\n    try {\r\n      // For UI commands, try to maintain accessibility state\r\n      if (context.invoker && context.invoker.hasAttribute('aria-expanded')) {\r\n        const currentState = context.invoker.getAttribute('aria-expanded');\r\n        if (currentState === null) {\r\n          context.invoker.setAttribute('aria-expanded', 'false');\r\n        }\r\n      }\r\n\r\n      // For disabled buttons, ensure they remain interactive\r\n      if (context.invoker && context.invoker.hasAttribute('disabled')) {\r\n        setTimeout(() => {\r\n          if (context.invoker) {\r\n            context.invoker.removeAttribute('disabled');\r\n          }\r\n        }, 3000); // Re-enable after 3 seconds\r\n      }\r\n\r\n      if (isDebugMode) {\r\n        console.log('Invokers: Attempted graceful degradation for failed command');\r\n      }\r\n    } catch (degradationError) {\r\n      // If degradation fails, just log it - don't throw\r\n      console.warn('Invokers: Graceful degradation failed:', degradationError);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds similar commands to help with typos\r\n   */\r\n  private findSimilarCommands(commandStr: string): string[] {\r\n    const command = commandStr.toLowerCase();\r\n    const suggestions: string[] = [];\r\n\r\n    for (const registeredCommand of this.sortedCommandKeys) {\r\n      const registered = registeredCommand.toLowerCase();\r\n\r\n      // Exact match after prefix\r\n      if (command.includes(registered.slice(2))) {\r\n        suggestions.push(registeredCommand);\r\n        continue;\r\n      }\r\n\r\n      // Levenshtein distance for typos\r\n      if (this.levenshteinDistance(command, registered) <= 2) {\r\n        suggestions.push(registeredCommand);\r\n      }\r\n    }\r\n\r\n    return suggestions.slice(0, 3); // Limit to 3 suggestions\r\n  }\r\n\r\n  /**\r\n   * Calculates Levenshtein distance for typo detection\r\n   */\r\n  private levenshteinDistance(str1: string, str2: string): number {\r\n    const matrix = Array(str2.length + 1).fill(null).map(() => Array(str1.length + 1).fill(null));\r\n\r\n    for (let i = 0; i <= str1.length; i++) matrix[0][i] = i;\r\n    for (let j = 0; j <= str2.length; j++) matrix[j][0] = j;\r\n\r\n    for (let j = 1; j <= str2.length; j++) {\r\n      for (let i = 1; i <= str1.length; i++) {\r\n        const substitutionCost = str1[i - 1] === str2[j - 1] ? 0 : 1;\r\n        matrix[j][i] = Math.min(\r\n          matrix[j][i - 1] + 1, // deletion\r\n          matrix[j - 1][i] + 1, // insertion\r\n          matrix[j - 1][i - 1] + substitutionCost // substitution\r\n        );\r\n      }\r\n    }\r\n\r\n    return matrix[str2.length][str1.length];\r\n  }\r\n\r\n  /**\r\n   * Triggers a follow-up command. This is now a core utility of the InvokerManager.\r\n   * It supports enhanced attribute-based chaining with conditional execution.\r\n   */\r\n  private async triggerFollowup(originalInvoker: HTMLButtonElement, primaryTarget: HTMLElement, executionResult?: CommandExecutionResult): Promise<void> {\r\n    const followupCommands = this.getFollowupCommands(originalInvoker, executionResult);\r\n\r\n    if (followupCommands.length === 0) {\r\n      return;\r\n    }\r\n\r\n    for (const { command, target, state } of followupCommands) {\r\n      if (!target && !primaryTarget.id) {\r\n        console.warn(\"Invokers: A chained command requires the target element to have an ID.\", primaryTarget);\r\n        continue;\r\n      }\r\n\r\n      const targetId = target || primaryTarget.id;\r\n      if (!targetId) continue;\r\n\r\n      await this.scheduleCommand(command, targetId, state, primaryTarget);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extracts followup commands from enhanced attributes based on execution result.\r\n   */\r\n  private getFollowupCommands(invoker: HTMLButtonElement | null, executionResult?: CommandExecutionResult): Array<{ command: string; target?: string; state: CommandState }> {\r\n    if (!invoker) {\r\n      return [];\r\n    }\r\n    const commands: Array<{ command: string; target?: string; state: CommandState }> = [];\r\n\r\n    // Handle universal data-and-then (always executes)\r\n    const universalCommand = invoker.dataset.andThen || invoker.dataset.thenCommand;\r\n    if (universalCommand) {\r\n      commands.push({\r\n        command: universalCommand,\r\n        target: invoker.dataset.thenTarget,\r\n        state: (invoker.dataset.thenState as CommandState) || 'active'\r\n      });\r\n    }\r\n\r\n    // Handle conditional commands based on execution result\r\n    if (executionResult) {\r\n      if (executionResult.success && invoker.dataset.afterSuccess) {\r\n        invoker.dataset.afterSuccess.split(',').forEach(cmd => {\r\n          commands.push({\r\n            command: cmd.trim(),\r\n            target: invoker.dataset.thenTarget,\r\n            state: (invoker.dataset.thenState as CommandState) || 'active'\r\n          });\r\n        });\r\n      }\r\n\r\n      if (!executionResult.success && invoker.dataset.afterError) {\r\n        invoker.dataset.afterError.split(',').forEach(cmd => {\r\n          commands.push({\r\n            command: cmd.trim(),\r\n            target: invoker.dataset.thenTarget,\r\n            state: (invoker.dataset.thenState as CommandState) || 'active'\r\n          });\r\n        });\r\n      }\r\n\r\n      // Handle complete commands (executes regardless of success/error)\r\n      if (invoker.dataset.afterComplete) {\r\n        invoker.dataset.afterComplete.split(',').forEach(cmd => {\r\n          commands.push({\r\n            command: cmd.trim(),\r\n            target: invoker.dataset.thenTarget,\r\n            state: (invoker.dataset.thenState as CommandState) || 'active'\r\n          });\r\n        });\r\n      }\r\n    }\r\n\r\n    return commands;\r\n  }\r\n\r\n  private createContext(event: CommandEvent, fullCommand: string, params: readonly string[]): CommandContext {\r\n    const invoker = event.source as HTMLButtonElement;\r\n    const targetElement = event.target as HTMLElement;\r\n\r\n    const getTargets = (): HTMLElement[] => {\r\n      // For chained commands (null invoker), always get fresh references\r\n      if (!invoker) {\r\n        const freshTarget = getFreshTargetElement();\r\n        return freshTarget ? [freshTarget] : [];\r\n      }\r\n\r\n      // Prioritize spec-compliant `commandfor` target, which is the event target.\r\n      if (targetElement) return [targetElement];\r\n\r\n      // Fallback for legacy `aria-controls` and `data-target`\r\n      const controls = invoker.getAttribute(\"aria-controls\")?.trim();\r\n      const dataTarget = invoker.dataset.target;\r\n      const selector = controls ? \"#\" + controls.split(/\\s+/).join(\", #\") : dataTarget;\r\n      return selector ? Array.from(document.querySelectorAll(selector)) : [];\r\n    };\r\n\r\n    // For chained commands (null invoker), ensure we get a fresh reference to the target element\r\n    const getFreshTargetElement = (): HTMLElement | null => {\r\n      if (targetElement && targetElement.id) {\r\n        return document.getElementById(targetElement.id);\r\n      }\r\n      return targetElement;\r\n    };\r\n\r\n    const updateAriaState = (targets: HTMLElement[]) => {\r\n      if (!invoker) return;\r\n      const isExpanded = targets.some(t => !t.hidden);\r\n      invoker.setAttribute(\"aria-expanded\", String(isExpanded));\r\n      if (invoker.hasAttribute(\"aria-pressed\")) {\r\n        invoker.setAttribute(\"aria-pressed\", String(isExpanded));\r\n      }\r\n    };\r\n\r\n    const manageGroupState = () => {\r\n      if (!invoker) return;\r\n      const targets = getTargets();\r\n      if (targets.length === 0 || !targets[0].parentElement) return;\r\n\r\n      const container = targets[0].parentElement;\r\n      const allTargetIDs = new Set(Array.from(container.children).map(t => t.id).filter(Boolean));\r\n\r\n      const invokersInGroup = Array.from(\r\n        document.querySelectorAll<HTMLButtonElement>(\"[commandfor], [aria-controls]\")\r\n      ).filter(btn => {\r\n        const controlledIds = (btn.getAttribute(\"commandfor\") ? [btn.getAttribute(\"commandfor\")] : []).concat(btn.getAttribute(\"aria-controls\")?.split(/\\s+/) ?? []);\r\n        return controlledIds.some(id => allTargetIDs.has(id!));\r\n      });\r\n\r\n      invokersInGroup.forEach(otherInvoker => {\r\n        if (otherInvoker !== invoker) {\r\n          otherInvoker.setAttribute(\"aria-expanded\", \"false\");\r\n          if (otherInvoker.hasAttribute(\"aria-pressed\")) {\r\n            otherInvoker.setAttribute(\"aria-pressed\", \"false\");\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    const executeAfter = (command: string, target?: string, state: CommandState = 'active') => {\r\n      if (!invoker) return;\r\n      this.scheduleCommand(command, target || targetElement.id, state, targetElement);\r\n    };\r\n\r\n    const executeConditional = (options: ConditionalCommands) => {\r\n      if (!invoker) return;\r\n      // Store conditional commands in data attributes for later execution\r\n      if (options.onSuccess && options.onSuccess.length > 0) {\r\n        invoker.dataset.afterSuccess = options.onSuccess.join(',');\r\n      }\r\n\r\n      if (options.onError && options.onError.length > 0) {\r\n        invoker.dataset.afterError = options.onError.join(',');\r\n      }\r\n\r\n      if (options.onComplete && options.onComplete.length > 0) {\r\n        invoker.dataset.afterComplete = options.onComplete.join(',');\r\n      }\r\n    };\r\n\r\n    return {\r\n      invoker,\r\n      targetElement: invoker ? targetElement : getFreshTargetElement() || targetElement,\r\n      fullCommand,\r\n      params,\r\n      getTargets,\r\n      updateAriaState,\r\n      manageGroupState,\r\n      executeAfter,\r\n      executeConditional\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Attaches the global `command` event listener to the document.\r\n   */\r\n  private listen(): void {\r\n    // The listener now calls the async handleCommand method.\r\n    document.addEventListener(\"command\", (e) => this.handleCommand(e as CommandEvent), true);\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  /**\r\n   * Registers the core library commands, now prefixed with `--`.\r\n   */\r\n  /**\r\n   * Schedules a command for execution with optional state management.\r\n   */\r\n  private async scheduleCommand(command: string, targetId: string, state: CommandState, primaryTarget?: HTMLElement): Promise<void> {\r\n    const commandKey = `${command}:${targetId}`;\r\n\r\n    // Check command state\r\n    if (this.commandStates.get(commandKey) === 'disabled') {\r\n      return;\r\n    }\r\n\r\n    if (this.commandStates.get(commandKey) === 'completed') {\r\n      return;\r\n    }\r\n\r\n    // Schedule the command to run after the current execution queue\r\n    this.executionQueue = this.executionQueue.then(async () => {\r\n      // For chained commands, directly execute the command instead of using synthetic buttons\r\n      // This avoids issues with event propagation in test environments\r\n      const targetElement = document.getElementById(targetId) || (primaryTarget && targetId === primaryTarget.id ? primaryTarget : null);\r\n      if (targetElement) {\r\n        const mockEvent = {\r\n          command,\r\n          source: null, // No source for chained commands\r\n          target: targetElement,\r\n          preventDefault: () => { },\r\n          type: 'command'\r\n        } as any;\r\n        await this.executeCustomCommand(command, mockEvent);\r\n      }\r\n    });\r\n\r\n    // Update state after execution\r\n    if (state === 'once') {\r\n      this.commandStates.set(commandKey, 'completed');\r\n    } else if (state === 'completed') {\r\n      this.commandStates.set(commandKey, 'completed');\r\n    }\r\n  }\r\n\r\n  private registerCoreLibraryCommands(): void {\r\n    this.register(\"--toggle\", async ({ getTargets, updateAriaState, invoker }) => {\r\n      const targets = getTargets();\r\n      if (targets.length === 0) {\r\n        const error = createInvokerError(\r\n          'No target elements found for --toggle command',\r\n          ErrorSeverity.WARNING,\r\n          {\r\n            command: '--toggle',\r\n            element: invoker,\r\n            recovery: 'Ensure commandfor points to a valid element id, or use aria-controls for multiple targets'\r\n          }\r\n        );\r\n        logInvokerError(error);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const updateDOM = () => {\r\n          targets.forEach(target => {\r\n            if (!target.isConnected) {\r\n              console.warn('Invokers: Skipping disconnected target element', target);\r\n              return;\r\n            }\r\n            target.toggleAttribute(\"hidden\");\r\n          });\r\n          updateAriaState(targets);\r\n        };\r\n\r\n        await (document.startViewTransition ? document.startViewTransition(updateDOM).finished : Promise.resolve(updateDOM()));\r\n      } catch (error) {\r\n        throw createInvokerError(\r\n          'Failed to toggle element visibility',\r\n          ErrorSeverity.ERROR,\r\n          {\r\n            command: '--toggle',\r\n            element: invoker,\r\n            cause: error as Error,\r\n            recovery: 'Check that target elements are valid DOM elements'\r\n          }\r\n        );\r\n      }\r\n    });\r\n\r\n    this.register(\"--show\", async ({ getTargets, updateAriaState, manageGroupState, invoker }) => {\r\n      const targets = getTargets();\r\n      if (targets.length === 0) {\r\n        const error = createInvokerError(\r\n          'No target elements found for --show command',\r\n          ErrorSeverity.WARNING,\r\n          {\r\n            command: '--show',\r\n            element: invoker,\r\n            recovery: 'Ensure commandfor points to a valid element id'\r\n          }\r\n        );\r\n        logInvokerError(error);\r\n        return;\r\n      }\r\n\r\n      if (!targets[0].parentElement) {\r\n        const error = createInvokerError(\r\n          'Target element has no parent for --show command (cannot hide siblings)',\r\n          ErrorSeverity.WARNING,\r\n          {\r\n            command: '--show',\r\n            element: targets[0],\r\n            recovery: 'Use --toggle instead, or ensure the target element has siblings to manage'\r\n          }\r\n        );\r\n        logInvokerError(error);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const allSiblings = Array.from(targets[0].parentElement.children);\r\n        const updateDOM = () => {\r\n          manageGroupState();\r\n          allSiblings.forEach(child => {\r\n            if (child instanceof HTMLElement) {\r\n              child.setAttribute(\"hidden\", \"\");\r\n            }\r\n          });\r\n          targets.forEach(target => target.removeAttribute(\"hidden\"));\r\n          updateAriaState(targets);\r\n        };\r\n        await (document.startViewTransition ? document.startViewTransition(updateDOM).finished : Promise.resolve(updateDOM()));\r\n      } catch (error) {\r\n        throw createInvokerError(\r\n          'Failed to show element and hide siblings',\r\n          ErrorSeverity.ERROR,\r\n          {\r\n            command: '--show',\r\n            element: invoker,\r\n            cause: error as Error,\r\n            recovery: 'Check that target elements and their siblings are valid DOM elements'\r\n          }\r\n        );\r\n      }\r\n    });\r\n\r\n    this.register(\"--hide\", ({ getTargets, updateAriaState }) => {\r\n      const targets = getTargets();\r\n      if (targets.length === 0) return;\r\n      targets.forEach(target => target.setAttribute(\"hidden\", \"\"));\r\n      updateAriaState(targets);\r\n    });\r\n\r\n    this.register(\"--class\", ({ invoker, getTargets, params }) => {\r\n      const [action, className] = params;\r\n      const targets = getTargets();\r\n      if (!action || !className || targets.length === 0) {\r\n        console.warn('Invokers: `--class` command requires an action and a class name (e.g., \"--class:toggle:my-class\").', invoker);\r\n        return;\r\n      }\r\n      targets.forEach(target => {\r\n        switch (action) {\r\n          case \"add\": target.classList.add(className); break;\r\n          case \"remove\": target.classList.remove(className); break;\r\n          case \"toggle\": target.classList.toggle(className); break;\r\n          default: console.warn(`Invokers: Unknown action \"${action}\" for '--class' command.`, invoker);\r\n        }\r\n      });\r\n    });\r\n\r\n    this.register(\"--text\", ({ invoker, getTargets, params }) => {\r\n      const [action, ...valueParts] = params;\r\n      const value = valueParts.join(':'); // Rejoin in case value contained colons\r\n      const targets = getTargets();\r\n\r\n      if (!action) {\r\n        throw createInvokerError(\r\n          'Text command requires an action (set, append, prepend, or clear)',\r\n          ErrorSeverity.ERROR,\r\n          {\r\n            command: '--text',\r\n            element: invoker,\r\n            context: { params },\r\n            recovery: 'Use format: --text:set:Hello World or --text:append: more text'\r\n          }\r\n        );\r\n      }\r\n\r\n      if (targets.length === 0) {\r\n        const error = createInvokerError(\r\n          'No target elements found for --text command',\r\n          ErrorSeverity.WARNING,\r\n          {\r\n            command: '--text',\r\n            element: invoker,\r\n            recovery: 'Ensure commandfor points to a valid element id'\r\n          }\r\n        );\r\n        logInvokerError(error);\r\n        return;\r\n      }\r\n\r\n      const validActions = ['set', 'append', 'prepend', 'clear'];\r\n      if (!validActions.includes(action)) {\r\n        throw createInvokerError(\r\n          `Invalid text action \"${action}\". Must be one of: ${validActions.join(', ')}`,\r\n          ErrorSeverity.ERROR,\r\n          {\r\n            command: '--text',\r\n            element: invoker,\r\n            context: { action, validActions },\r\n            recovery: 'Use a valid action like: --text:set:Hello or --text:append: World'\r\n          }\r\n        );\r\n      }\r\n\r\n      try {\r\n        targets.forEach(target => {\r\n          if (!target.isConnected) {\r\n            console.warn('Invokers: Skipping disconnected target element', target);\r\n            return;\r\n          }\r\n\r\n          switch (action) {\r\n            case \"set\":\r\n              target.textContent = value || \"\";\r\n              break;\r\n            case \"append\":\r\n              target.textContent += value || \"\";\r\n              break;\r\n            case \"prepend\":\r\n              target.textContent = (value || \"\") + target.textContent;\r\n              break;\r\n            case \"clear\":\r\n              target.textContent = \"\";\r\n              break;\r\n          }\r\n        });\r\n      } catch (error) {\r\n        throw createInvokerError(\r\n          `Failed to update text content with action \"${action}\"`,\r\n          ErrorSeverity.ERROR,\r\n          {\r\n            command: '--text',\r\n            element: invoker,\r\n            cause: error as Error,\r\n            context: { action, value },\r\n            recovery: 'Check that target elements support text content updates'\r\n          }\r\n        );\r\n      }\r\n    });\r\n\r\n    this.register(\"--attr\", ({ invoker, getTargets, params }) => {\r\n      const [action, attrName, attrValue] = params;\r\n      const targets = getTargets();\r\n\r\n      if (!action) {\r\n        throw createInvokerError(\r\n          'Attribute command requires an action (set, remove, or toggle)',\r\n          ErrorSeverity.ERROR,\r\n          {\r\n            command: '--attr',\r\n            element: invoker,\r\n            context: { params },\r\n            recovery: 'Use format: --attr:set:disabled:true or --attr:remove:disabled'\r\n          }\r\n        );\r\n      }\r\n\r\n      if (!attrName) {\r\n        throw createInvokerError(\r\n          'Attribute command requires an attribute name',\r\n          ErrorSeverity.ERROR,\r\n          {\r\n            command: '--attr',\r\n            element: invoker,\r\n            context: { action, params },\r\n            recovery: 'Specify the attribute name: --attr:set:data-value:123'\r\n          }\r\n        );\r\n      }\r\n\r\n      if (targets.length === 0) {\r\n        const error = createInvokerError(\r\n          'No target elements found for --attr command',\r\n          ErrorSeverity.WARNING,\r\n          {\r\n            command: '--attr',\r\n            element: invoker,\r\n            recovery: 'Ensure commandfor points to a valid element id'\r\n          }\r\n        );\r\n        logInvokerError(error);\r\n        return;\r\n      }\r\n\r\n      const validActions = ['set', 'remove', 'toggle'];\r\n      if (!validActions.includes(action)) {\r\n        throw createInvokerError(\r\n          `Invalid attribute action \"${action}\". Must be one of: ${validActions.join(', ')}`,\r\n          ErrorSeverity.ERROR,\r\n          {\r\n            command: '--attr',\r\n            element: invoker,\r\n            context: { action, validActions },\r\n            recovery: 'Use a valid action like: --attr:set:disabled:true or --attr:toggle:hidden'\r\n          }\r\n        );\r\n      }\r\n\r\n      // Validate attribute name\r\n      if (!/^[a-zA-Z][a-zA-Z0-9-]*$/.test(attrName)) {\r\n        throw createInvokerError(\r\n          `Invalid attribute name \"${attrName}\". Attribute names must start with a letter and contain only letters, numbers, and hyphens`,\r\n          ErrorSeverity.ERROR,\r\n          {\r\n            command: '--attr',\r\n            element: invoker,\r\n            context: { attrName },\r\n            recovery: 'Use a valid HTML attribute name like \"disabled\" or \"data-value\"'\r\n          }\r\n        );\r\n      }\r\n\r\n      try {\r\n        targets.forEach(target => {\r\n          if (!target.isConnected) {\r\n            console.warn('Invokers: Skipping disconnected target element', target);\r\n            return;\r\n          }\r\n\r\n          switch (action) {\r\n            case \"set\":\r\n              target.setAttribute(attrName, attrValue || \"\");\r\n              break;\r\n            case \"remove\":\r\n              target.removeAttribute(attrName);\r\n              break;\r\n            case \"toggle\":\r\n              if (target.hasAttribute(attrName)) {\r\n                target.removeAttribute(attrName);\r\n              } else {\r\n                target.setAttribute(attrName, attrValue || \"\");\r\n              }\r\n              break;\r\n          }\r\n        });\r\n      } catch (error) {\r\n        throw createInvokerError(\r\n          `Failed to update attribute \"${attrName}\" with action \"${action}\"`,\r\n          ErrorSeverity.ERROR,\r\n          {\r\n            command: '--attr',\r\n            element: invoker,\r\n            cause: error as Error,\r\n            context: { action, attrName, attrValue },\r\n            recovery: 'Check that the attribute operation is valid for the target elements'\r\n          }\r\n        );\r\n      }\r\n    });\r\n\r\n    // Pipeline command for template-based workflows\r\n    this.register(\"--pipeline\", async ({ invoker, params }) => {\r\n      const [action, pipelineId] = params;\r\n      \r\n      if (action !== 'execute') {\r\n        throw createInvokerError(\r\n          `Invalid pipeline action \"${action}\". Only \"execute\" is supported`,\r\n          ErrorSeverity.ERROR,\r\n          {\r\n            command: '--pipeline',\r\n            element: invoker,\r\n            context: { action, availableActions: ['execute'] },\r\n            recovery: 'Use --pipeline:execute:your-pipeline-id'\r\n          }\r\n        );\r\n      }\r\n\r\n      if (!pipelineId) {\r\n        throw createInvokerError(\r\n          'Pipeline command requires a pipeline ID',\r\n          ErrorSeverity.ERROR,\r\n          {\r\n            command: '--pipeline',\r\n            element: invoker,\r\n            context: { params },\r\n            recovery: 'Use --pipeline:execute:your-pipeline-id'\r\n          }\r\n        );\r\n      }\r\n\r\n      const context = this.createContext(\r\n        { command: '--pipeline:execute', source: invoker, target: invoker } as any,\r\n        '--pipeline:execute',\r\n        params\r\n      );\r\n\r\n      await this.pipelineManager.executePipeline(pipelineId, context);\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\r\n// --- Pipeline Manager Class ---\r\n\r\n/**\r\n * Manages template-based command pipelines using <pipeline-step> elements.\r\n */\r\nclass PipelineManager {\r\n  private invokerManager: InvokerManager;\r\n\r\n  constructor(invokerManager: InvokerManager) {\r\n    this.invokerManager = invokerManager;\r\n  }\r\n\r\n  /**\r\n   * Executes a pipeline defined in a template element.\r\n   */\r\n  async executePipeline(pipelineId: string, context: CommandContext): Promise<void> {\r\n    const template = document.getElementById(pipelineId) as HTMLTemplateElement;\r\n    if (!template?.hasAttribute('data-pipeline')) {\r\n      console.warn(`Invokers: Pipeline template \"${pipelineId}\" not found or not marked with data-pipeline attribute`);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const steps = this.parsePipelineSteps(template);\r\n      let previousResult: CommandExecutionResult = { success: true };\r\n\r\n      for (const step of steps) {\r\n        if (this.shouldExecuteStep(step, previousResult)) {\r\n          if (step.delay && step.delay > 0) {\r\n            await new Promise(resolve => setTimeout(resolve, step.delay));\r\n          }\r\n\r\n          previousResult = await this.executeStep(step, context);\r\n\r\n          if (step.once) {\r\n            this.removeStepFromTemplate(template, step);\r\n          }\r\n\r\n          // If a step fails and there are no error handlers, stop execution\r\n          if (!previousResult.success && !this.hasErrorHandler(steps, steps.indexOf(step))) {\r\n            console.warn(`Invokers: Pipeline \"${pipelineId}\" stopped due to failed step: ${step.command}`);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(`Invokers: Pipeline \"${pipelineId}\" execution failed:`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses pipeline steps from a template element.\r\n   */\r\n  private parsePipelineSteps(template: HTMLTemplateElement): PipelineStep[] {\r\n    const steps: PipelineStep[] = [];\r\n    const content = template.content;\r\n    const stepElements = content.querySelectorAll('pipeline-step');\r\n\r\n    stepElements.forEach((stepEl, index) => {\r\n      const command = stepEl.getAttribute('command');\r\n      const target = stepEl.getAttribute('target');\r\n\r\n      if (!command || !target) {\r\n        console.warn(`Invokers: Pipeline step ${index} missing required command or target attribute`);\r\n        return;\r\n      }\r\n\r\n      const step: PipelineStep = {\r\n        command,\r\n        target,\r\n        condition: (stepEl.getAttribute('condition') as 'success' | 'error' | 'always') || 'always',\r\n        once: stepEl.hasAttribute('once'),\r\n        delay: parseInt(stepEl.getAttribute('delay') || '0', 10)\r\n      };\r\n\r\n      // Extract data attributes\r\n      const data: Record<string, string> = {};\r\n      Array.from(stepEl.attributes).forEach(attr => {\r\n        if (attr.name.startsWith('data-')) {\r\n          data[attr.name] = attr.value;\r\n        }\r\n      });\r\n      \r\n      if (Object.keys(data).length > 0) {\r\n        step.data = data;\r\n      }\r\n\r\n      steps.push(step);\r\n    });\r\n\r\n    return steps;\r\n  }\r\n\r\n  /**\r\n   * Determines if a pipeline step should execute based on condition and previous result.\r\n   */\r\n  private shouldExecuteStep(step: PipelineStep, previousResult: CommandExecutionResult): boolean {\r\n    switch (step.condition) {\r\n      case 'success':\r\n        return previousResult.success === true;\r\n      case 'error':\r\n        return previousResult.success === false;\r\n      case 'always':\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes a single pipeline step.\r\n   */\r\n  private async executeStep(step: PipelineStep, context: CommandContext): Promise<CommandExecutionResult> {\r\n    try {\r\n      // Create a synthetic invoker for the pipeline step\r\n      const syntheticInvoker = document.createElement('button');\r\n      syntheticInvoker.setAttribute('type', 'button');\r\n      syntheticInvoker.setAttribute('command', step.command.startsWith('--') ? step.command : `--${step.command}`);\r\n      syntheticInvoker.setAttribute('commandfor', step.target);\r\n\r\n      // Apply data attributes from the pipeline step\r\n      if (step.data) {\r\n        Object.entries(step.data).forEach(([key, value]) => {\r\n          syntheticInvoker.setAttribute(key, value);\r\n        });\r\n      }\r\n\r\n      await this.invokerManager.executeCommand(step.command, step.target, syntheticInvoker);\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      return { success: false, error: error as Error };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if there are error handlers after a given step index.\r\n   */\r\n  private hasErrorHandler(steps: PipelineStep[], currentIndex: number): boolean {\r\n    return steps.slice(currentIndex + 1).some(step => step.condition === 'error');\r\n  }\r\n\r\n  /**\r\n   * Removes a step from the template (for once-only steps).\r\n   */\r\n  private removeStepFromTemplate(template: HTMLTemplateElement, stepToRemove: PipelineStep): void {\r\n    const content = template.content;\r\n    const stepElements = content.querySelectorAll('pipeline-step');\r\n    \r\n    stepElements.forEach(stepEl => {\r\n      if (stepEl.getAttribute('command') === stepToRemove.command && \r\n          stepEl.getAttribute('target') === stepToRemove.target) {\r\n        stepEl.remove();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n// --- AndThen Manager Class ---\r\n\r\n// --- AndThen Manager Class ---\r\n\r\n/**\r\n * Manages declarative command chaining via <and-then> elements. This class\r\n * is responsible for parsing the nested structure of <and-then> tags,\r\n * respecting conditions and delays, and executing them sequentially without\r\n * causing infinite loops.\r\n */\r\nclass AndThenManager {\r\n  private invokerManager: InvokerManager;\r\n\r\n  constructor(invokerManager: InvokerManager) {\r\n    this.invokerManager = invokerManager;\r\n  }\r\n\r\n  /**\r\n   * Processes <and-then> elements after a command execution. This is the main\r\n   * entry point that finds top-level <and-then> children of the invoker and\r\n   * kicks off the recursive execution process.\r\n   *\r\n   * @param invokerElement The original <button> that was activated.\r\n   * @param executionResult The success/failure result of the invoker's command.\r\n   * @param primaryTarget The main target of the invoker's command.\r\n   */\r\n  public async processAndThen(\r\n    invokerElement: HTMLButtonElement,\r\n    executionResult: CommandExecutionResult,\r\n    primaryTarget: HTMLElement\r\n  ): Promise<void> {\r\n    // Find all *top-level* and-then elements that are direct children of the invoker.\r\n    const topLevelAndThens = Array.from(invokerElement.children).filter(\r\n      child => child.tagName.toLowerCase() === 'and-then'\r\n    ) as HTMLElement[];\r\n\r\n    // Sequentially execute each top-level chain.\r\n    for (const andThenElement of topLevelAndThens) {\r\n      // The initial recursive call starts here.\r\n      await this.executeAndThenRecursively(\r\n        andThenElement,\r\n        invokerElement,\r\n        executionResult,\r\n        primaryTarget\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes a command from an <and-then> element and its descendants recursively.\r\n   * This is the core of the chaining logic.\r\n   *\r\n   * @param andThenElement The current <and-then> element to execute.\r\n   * @param originalInvoker The very first button in the chain, used for context.\r\n   * @param parentResult The execution result from the parent command.\r\n   * @param primaryTarget The original target, used as a fallback.\r\n   * @param depth The current recursion depth to prevent stack overflows.\r\n   */\r\n  private async executeAndThenRecursively(\r\n    andThenElement: HTMLElement,\r\n    originalInvoker: HTMLButtonElement,\r\n    parentResult: CommandExecutionResult,\r\n    primaryTarget: HTMLElement,\r\n    depth: number = 0\r\n  ): Promise<void> {\r\n    // 1. Safety Check: Prevent infinite recursion.\r\n    if (depth > 25) {\r\n      logInvokerError(createInvokerError(\r\n        'Maximum <and-then> depth reached, stopping execution to prevent infinite loop.',\r\n        ErrorSeverity.CRITICAL,\r\n        { element: andThenElement, recovery: 'Check for circular or excessively deep <and-then> nesting.' }\r\n      ));\r\n      return;\r\n    }\r\n\r\n    // 2. State Check: Skip elements that have already run or are disabled.\r\n    const state = andThenElement.dataset.state;\r\n    if (state === 'disabled' || state === 'completed') {\r\n      return;\r\n    }\r\n\r\n    // 3. Conditional Check: Execute only if the condition is met.\r\n    const condition = andThenElement.dataset.condition || 'always';\r\n    if (!this.shouldExecuteCondition(condition, parentResult)) {\r\n      return;\r\n    }\r\n\r\n    // 4. Get Command Details\r\n    const command = andThenElement.getAttribute('command');\r\n    const targetId = andThenElement.getAttribute('commandfor') || originalInvoker.getAttribute('commandfor') || primaryTarget.id;\r\n    const delay = parseInt(andThenElement.dataset.delay || '0', 10);\r\n\r\n    if (!command || !targetId) {\r\n      logInvokerError(createInvokerError(\r\n        '<and-then> element is missing required \"command\" or \"commandfor\" attribute.',\r\n        ErrorSeverity.WARNING,\r\n        { element: andThenElement }\r\n      ));\r\n      return;\r\n    }\r\n\r\n    // 5. Apply Delay\r\n    if (delay > 0) {\r\n      await new Promise(resolve => setTimeout(resolve, delay));\r\n    }\r\n\r\n    // 6. Execute the Command\r\n    let currentExecutionResult: CommandExecutionResult = { success: true };\r\n    try {\r\n      // Use a synthetic invoker to pass context attributes like `data-*`\r\n      // without re-triggering the top-level follow-up logic on the original invoker.\r\n      const syntheticInvoker = this.createSyntheticInvoker(andThenElement, command, targetId);\r\n      await this.invokerManager.executeCommand(command, targetId, syntheticInvoker);\r\n    } catch (error) {\r\n      // If the command fails, capture the result to pass to children.\r\n      currentExecutionResult = { success: false, error: error as Error };\r\n    }\r\n\r\n    // 7. Update State (Post-Execution)\r\n    if (andThenElement.hasAttribute('data-once')) {\r\n      andThenElement.remove();\r\n    } else {\r\n      andThenElement.dataset.state = 'completed';\r\n    }\r\n\r\n    // 8. Recurse for Children\r\n    const nestedAndThens = Array.from(andThenElement.children).filter(\r\n      child => child.tagName.toLowerCase() === 'and-then'\r\n    ) as HTMLElement[];\r\n\r\n    for (const nested of nestedAndThens) {\r\n      await this.executeAndThenRecursively(\r\n        nested,\r\n        originalInvoker,\r\n        currentExecutionResult, // Pass the result of *this* command down.\r\n        primaryTarget,\r\n        depth + 1\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a temporary, in-memory <button> to act as the invoker for an\r\n   * <and-then> command, allowing `data-*` attributes to be passed for context.\r\n   */\r\n  private createSyntheticInvoker(andThenElement: HTMLElement, command: string, targetId: string): HTMLButtonElement {\r\n    const syntheticInvoker = document.createElement('button');\r\n    syntheticInvoker.setAttribute('command', command.startsWith('--') ? command : `--${command}`);\r\n    syntheticInvoker.setAttribute('commandfor', targetId);\r\n\r\n    // Copy all data attributes from the <and-then> to the synthetic button\r\n    // so the command's context can access them via `invoker.dataset`.\r\n    for (const key in andThenElement.dataset) {\r\n      syntheticInvoker.dataset[key] = andThenElement.dataset[key];\r\n    }\r\n    return syntheticInvoker;\r\n  }\r\n\r\n  /**\r\n   * Determines if a condition is met based on the result of the parent command.\r\n   */\r\n  private shouldExecuteCondition(condition: string, result: CommandExecutionResult): boolean {\r\n    switch (condition.toLowerCase()) {\r\n      case 'success':\r\n        return result.success === true;\r\n      case 'error':\r\n        return result.success === false;\r\n      case 'always':\r\n        return true;\r\n      default:\r\n        logInvokerError(createInvokerError(\r\n          `Unknown condition for <and-then> element: \"${condition}\"`,\r\n          ErrorSeverity.WARNING\r\n        ));\r\n        return false; // Fail safe\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// --- Initialize and Expose API ---\r\nconst invokerInstance = new InvokerManager();\r\n\r\nif (typeof window !== \"undefined\") {\r\n  Object.defineProperty(window, \"Invoker\", {\r\n    value: {\r\n      register: invokerInstance.register.bind(invokerInstance),\r\n      executeCommand: invokerInstance.executeCommand.bind(invokerInstance),\r\n      parseCommandString,\r\n      createCommandString,\r\n      instance: invokerInstance, // Expose the instance for internal use\r\n\r\n      // Debugging and development utilities\r\n      get debug() { return isDebugMode; },\r\n      set debug(value: boolean) {\r\n        isDebugMode = value;\r\n        if (value) {\r\n          console.log('Invokers: Debug mode enabled. You will see detailed execution logs.');\r\n        } else {\r\n          console.log('Invokers: Debug mode disabled.');\r\n        }\r\n      },\r\n\r\n      // Performance monitoring\r\n      getStats() {\r\n        return invokerInstance['performanceMonitor'].getStats();\r\n      },\r\n\r\n      // Development utilities\r\n      getRegisteredCommands() {\r\n        return Array.from(invokerInstance['commands'].keys());\r\n      },\r\n\r\n      // Error handling utilities\r\n      validateElement,\r\n      createError: createInvokerError,\r\n      logError: logInvokerError,\r\n\r\n      // Reset functionality for development\r\n      reset() {\r\n        invokerInstance['commands'].clear();\r\n        invokerInstance['commandStates'].clear();\r\n        invokerInstance['sortedCommandKeys'] = [];\r\n        console.log('Invokers: Reset complete. All commands and states cleared.');\r\n      }\r\n    },\r\n    configurable: true,\r\n    writable: true,\r\n  });\r\n}\r\n\r\n// Automatically register extended command set if available\r\nif (typeof window !== \"undefined\") {\r\n  try {\r\n    // Try to import and register extended commands\r\n    // import('./invoker-commands').then(({ registerAll }) => {\r\n    //   registerAll();\r\n    // }).catch(() => {\r\n    //   // Extended commands not available, continue with core commands only\r\n    // });\r\n  } catch (e) {\r\n    // Extended commands not available, continue with core commands only\r\n  }\r\n}\r\n\r\n// --- Export Interest Invokers functionality ---\r\nexport { \r\n  isInterestInvokersSupported, \r\n  applyInterestInvokers, \r\n  createInterestEvent \r\n} from './interest-invokers';\r\n\r\nexport type { \r\n  InterestEvent, \r\n  InterestEventInit, \r\n  InterestInvokerElement \r\n} from './interest-invokers';\r\n\r\nexport default invokerInstance;", "/**\r\n * @file invoker-commands.ts\r\n * @summary An optional collection of powerful, reusable custom commands for the Invokers library.\r\n * @description\r\n * This module extends the core Invokers library with a suite of feature-rich commands\r\n * for common UI patterns like dynamic content fetching, DOM manipulation, media control, and more.\r\n *\r\n * To use these commands, import and run the `registerAll()` function after the core\r\n * Invokers library has been loaded.\r\n * @example\r\n * // In your main application script:\r\n * import 'invokers'; // Core library (loads polyfill and window.Invoker)\r\n * import { registerAll } from 'invokers/commands';\r\n *\r\n * // Make all extended commands available for use in your HTML.\r\n * registerAll();\r\n */\r\n\r\nimport type { CommandContext, CommandCallback } from \"./index\";\r\nimport { createInvokerError, ErrorSeverity, validateElement, sanitizeHTML } from \"./index\";\r\n\r\ntype CommandRegistry = Record<string, CommandCallback>;\r\n\r\n/**\r\n * A collection of useful custom commands to enhance the Invokers library.\r\n * Each command is designed to be robust, handle common edge cases, and provide\r\n * excellent developer experience through clear error messaging.\r\n */\r\nexport const commands: CommandRegistry = {\r\n  // --- Media Commands ---\r\n\r\n  /**\r\n   * `--media:toggle`: Toggles play/pause on a target `<video>` or `<audio>` element.\r\n   * It automatically updates the invoker's text content (from `data-play-text` and\r\n   * `data-pause-text`) and its `aria-pressed` state for accessibility.\r\n   *\r\n   * @example\r\n   * ```html\r\n   * <button type=\"button\"\r\n   *   command=\"--media:toggle\"\r\n   *   commandfor=\"my-video\"\r\n   *   data-play-text=\"Pause Video\"\r\n   *   data-pause-text=\"Play Video\"\r\n   * >\r\n   *   Play Video\r\n   * </button>\r\n   * <video id=\"my-video\" src=\"...\"></video>\r\n   * ```\r\n   */\r\n  \"--media:toggle\": async ({ invoker, targetElement }: CommandContext) => {\r\n    const validationErrors = validateElement(targetElement, { tagName: ['video', 'audio'] });\r\n    if (validationErrors.length > 0) {\r\n      throw createInvokerError(`Media command failed: ${validationErrors.join(', ')}`, ErrorSeverity.ERROR, {\r\n        command: '--media:toggle', element: invoker, recovery: 'Ensure commandfor points to a <video> or <audio> element.'\r\n      });\r\n    }\r\n\r\n    const media = targetElement as HTMLMediaElement;\r\n    const playText = invoker.dataset.playText || \"Pause\";\r\n    const pauseText = invoker.dataset.pauseText || \"Play\";\r\n\r\n    try {\r\n      if (media.paused) {\r\n        await media.play();\r\n        invoker.textContent = playText;\r\n        invoker.setAttribute(\"aria-pressed\", \"true\");\r\n      } else {\r\n        media.pause();\r\n        invoker.textContent = pauseText;\r\n        invoker.setAttribute(\"aria-pressed\", \"false\");\r\n      }\r\n    } catch (error) {\r\n      throw createInvokerError('Failed to toggle media playback', ErrorSeverity.ERROR, {\r\n        command: '--media:toggle', element: invoker, cause: error as Error,\r\n        recovery: (error as Error).name === 'NotAllowedError'\r\n          ? 'Media autoplay blocked by browser. User interaction may be required.'\r\n          : 'Check that the media element has a valid source and is ready to play.'\r\n      });\r\n    }\r\n  },\r\n\r\n  /**\r\n   * `--media:seek`: Seeks a target `<video>` or `<audio>` element forward or backward\r\n   * by a specified number of seconds.\r\n   *\r\n   * @example\r\n   * ```html\r\n   * <button type=\"button\" command=\"--media:seek:-10\" commandfor=\"my-video\">Rewind 10s</button>\r\n   * <button type=\"button\" command=\"--media:seek:30\" commandfor=\"my-video\">Forward 30s</button>\r\n   * ```\r\n   */\r\n  \"--media:seek\": ({ invoker, targetElement, params }: CommandContext) => {\r\n    const validationErrors = validateElement(targetElement, { tagName: ['video', 'audio'] });\r\n    if (validationErrors.length > 0) {\r\n      throw createInvokerError(`Media command failed: ${validationErrors.join(', ')}`, ErrorSeverity.ERROR, {\r\n        command: '--media:seek', element: invoker, recovery: 'Ensure commandfor points to a <video> or <audio> element.'\r\n      });\r\n    }\r\n    const media = targetElement as HTMLMediaElement;\r\n    const seekTime = parseFloat(params[0]);\r\n\r\n    if (isNaN(seekTime)) {\r\n      throw createInvokerError('Media seek command requires a numeric value for seconds', ErrorSeverity.ERROR, {\r\n        command: '--media:seek', element: invoker, context: { provided: params[0] }, recovery: 'Use format: --media:seek:10 (for 10s) or --media:seek:-5 (for -5s).'\r\n      });\r\n    }\r\n\r\n    media.currentTime = Math.max(0, Math.min(media.duration, media.currentTime + seekTime));\r\n  },\r\n\r\n  /**\r\n   * `--media:mute`: Toggles the mute state on a target `<video>` or `<audio>` element\r\n   * and updates the invoker's `aria-pressed` state to reflect the current muted status.\r\n   *\r\n   * @example\r\n   * ```html\r\n   * <button type=\"button\" command=\"--media:mute\" commandfor=\"my-video\" aria-pressed=\"false\">Mute</button>\r\n   * ```\r\n   */\r\n  \"--media:mute\": ({ invoker, targetElement }: CommandContext) => {\r\n    const validationErrors = validateElement(targetElement, { tagName: ['video', 'audio'] });\r\n    if (validationErrors.length > 0) {\r\n      throw createInvokerError(`Media command failed: ${validationErrors.join(', ')}`, ErrorSeverity.ERROR, {\r\n        command: '--media:mute', element: invoker, recovery: 'Ensure commandfor points to a <video> or <audio> element.'\r\n      });\r\n    }\r\n    const media = targetElement as HTMLMediaElement;\r\n    media.muted = !media.muted;\r\n    invoker.setAttribute(\"aria-pressed\", String(media.muted));\r\n  },\r\n\r\n  // --- Carousel / Slider Commands ---\r\n\r\n  /**\r\n   * `--carousel:nav`: Navigates a carousel by showing the next or previous item.\r\n   * Assumes items are direct children of the target, with visibility controlled by `hidden`.\r\n   *\r\n   * @example\r\n   * ```html\r\n   * <div id=\"my-carousel\">\r\n   *   <div>Slide 1</div>\r\n   *   <div hidden>Slide 2</div>\r\n   * </div>\r\n   * <button type=\"button\" command=\"--carousel:nav:prev\" commandfor=\"my-carousel\">‹</button>\r\n   * <button type=\"button\" command=\"--carousel:nav:next\" commandfor=\"my-carousel\">›</button>\r\n   * ```\r\n   */\r\n  \"--carousel:nav\": ({ invoker, targetElement, params }: CommandContext) => {\r\n    const [direction] = params;\r\n\r\n    if (direction !== \"next\" && direction !== \"prev\") {\r\n      throw createInvokerError('Carousel nav requires a direction parameter of \"next\" or \"prev\"', ErrorSeverity.ERROR, {\r\n        command: '--carousel:nav', element: invoker, recovery: 'Use format: --carousel:nav:next or --carousel:nav:prev'\r\n      });\r\n    }\r\n\r\n    const slides = Array.from(targetElement.children) as HTMLElement[];\r\n    if (slides.length < 2) return;\r\n\r\n    const activeIndex = slides.findIndex((slide) => !slide.hasAttribute(\"hidden\"));\r\n    const currentIndex = activeIndex === -1 ? 0 : activeIndex;\r\n    const nextIndex = (direction === \"next\" ? currentIndex + 1 : currentIndex - 1 + slides.length) % slides.length;\r\n\r\n    const updateDOM = () => {\r\n      slides.forEach((slide, index) => {\r\n        slide.toggleAttribute(\"hidden\", index !== nextIndex);\r\n      });\r\n    };\r\n\r\n    document.startViewTransition ? document.startViewTransition(updateDOM) : updateDOM();\r\n  },\r\n\r\n  // --- Clipboard and Form Commands ---\r\n\r\n  /**\r\n   * `--clipboard:copy`: Copies the text content (or value for inputs) of the target\r\n   * element to the clipboard. Provides visual feedback on the invoker button.\r\n   *\r\n   * @example\r\n   * ```html\r\n   * <button type=\"button\"\r\n   *   command=\"--clipboard:copy\"\r\n   *   commandfor=\"code-snippet\"\r\n   *   data-feedback-text=\"Copied!\"\r\n   * >\r\n   *   Copy\r\n   * </button>\r\n   * <pre id=\"code-snippet\">npm install invokers</pre>\r\n   * ```\r\n   */\r\n  \"--clipboard:copy\": async ({ invoker, targetElement }: CommandContext) => {\r\n    if (!navigator.clipboard) {\r\n      throw createInvokerError(\"Clipboard API not available\", ErrorSeverity.ERROR, {\r\n        command: '--clipboard:copy', element: invoker, recovery: 'This feature requires a secure context (HTTPS).'\r\n      });\r\n    }\r\n\r\n    const originalText = invoker.textContent || \"\";\r\n    const feedbackText = invoker.dataset.feedbackText || \"Copied!\";\r\n    const errorText = invoker.dataset.errorText || \"Error!\";\r\n    const textToCopy = targetElement instanceof HTMLInputElement || targetElement instanceof HTMLTextAreaElement ? targetElement.value : targetElement.textContent || \"\";\r\n\r\n    invoker.setAttribute(\"disabled\", \"\");\r\n    try {\r\n      await navigator.clipboard.writeText(textToCopy);\r\n      invoker.textContent = feedbackText;\r\n    } catch (err) {\r\n      invoker.textContent = errorText;\r\n      throw createInvokerError('Failed to copy text to clipboard', ErrorSeverity.ERROR, {\r\n        command: '--clipboard:copy', element: invoker, cause: err as Error\r\n      });\r\n    } finally {\r\n      setTimeout(() => {\r\n        invoker.textContent = originalText;\r\n        invoker.removeAttribute(\"disabled\");\r\n      }, 2000);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * `--form:reset`: Resets the target `<form>` element.\r\n   * @example `<button command=\"--form:reset\" commandfor=\"my-form\">Reset</button>`\r\n   */\r\n  \"--form:reset\": ({ invoker, targetElement }: CommandContext) => {\r\n    const validationErrors = validateElement(targetElement, { tagName: ['form'] });\r\n    if (validationErrors.length > 0) {\r\n      throw createInvokerError(`Form reset failed: ${validationErrors.join(', ')}`, ErrorSeverity.ERROR, {\r\n        command: '--form:reset', element: invoker, recovery: 'Ensure commandfor points to a <form> element.'\r\n      });\r\n    }\r\n    (targetElement as HTMLFormElement).reset();\r\n  },\r\n\r\n  /**\r\n   * `--form:submit`: Submits the target `<form>` element.\r\n   * @example `<button command=\"--form:submit\" commandfor=\"my-form\">Submit</button>`\r\n   */\r\n  \"--form:submit\": ({ invoker, targetElement }: CommandContext) => {\r\n    const validationErrors = validateElement(targetElement, { tagName: ['form'] });\r\n    if (validationErrors.length > 0) {\r\n      throw createInvokerError(`Form submit failed: ${validationErrors.join(', ')}`, ErrorSeverity.ERROR, {\r\n        command: '--form:submit', element: invoker, recovery: 'Ensure commandfor points to a <form> element.'\r\n      });\r\n    }\r\n    (targetElement as HTMLFormElement).requestSubmit();\r\n  },\r\n\r\n  /**\r\n   * `--input:step`: Increments/decrements a target `<input type=\"number\">`.\r\n   *\r\n   * @example\r\n   * ```html\r\n   * <button command=\"--input:step:-1\" commandfor=\"quantity\">-</button>\r\n   * <input type=\"number\" id=\"quantity\" value=\"1\" min=\"0\">\r\n   * <button command=\"--input:step:1\" commandfor=\"quantity\">+</button>\r\n   * ```\r\n   */\r\n  \"--input:step\": ({ invoker, targetElement, params }: CommandContext) => {\r\n    if (!(targetElement instanceof HTMLInputElement) || targetElement.type !== \"number\") {\r\n      throw createInvokerError('Input step target must be an <input type=\"number\">', ErrorSeverity.ERROR, {\r\n        command: '--input:step', element: invoker\r\n      });\r\n    }\r\n\r\n    const stepAmount = parseFloat(params[0] || \"1\");\r\n    if (isNaN(stepAmount)) {\r\n      throw createInvokerError('Input step requires a valid numeric parameter', ErrorSeverity.ERROR, {\r\n        command: '--input:step', element: invoker, context: { provided: params[0] }, recovery: 'Use --input:step:1 or --input:step:-1'\r\n      });\r\n    }\r\n\r\n    if (stepAmount > 0) targetElement.stepUp(stepAmount);\r\n    else if (stepAmount < 0) targetElement.stepDown(Math.abs(stepAmount));\r\n    targetElement.dispatchEvent(new Event(\"input\", { bubbles: true, cancelable: true }));\r\n  },\r\n\r\n  // --- Scroll Commands ---\r\n\r\n  /**\r\n   * `--scroll:to`: Smoothly scrolls the viewport to bring the target element into view.\r\n   * @example `<button command=\"--scroll:to\" commandfor=\"section-2\">Go to Section 2</button>`\r\n   */\r\n  \"--scroll:to\": ({ targetElement }: CommandContext) => {\r\n    targetElement.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\r\n  },\r\n\r\n  // --- DOM Manipulation Commands ---\r\n\r\n  /**\r\n   * `--dom:remove`: Removes the target element from the DOM.\r\n   * @example `<button command=\"--dom:remove\" commandfor=\"alert-1\">&times;</button>`\r\n   */\r\n  \"--dom:remove\": ({ targetElement }: CommandContext) => {\r\n    const updateDOM = () => targetElement.remove();\r\n    document.startViewTransition ? document.startViewTransition(updateDOM) : updateDOM();\r\n  },\r\n\r\n  /**\r\n   * `--dom:replace`: Replaces the target element with content from a `<template>`.\r\n   * @example `<button command=\"--dom:replace\" commandfor=\"placeholder\" data-template-id=\"content\">Load</button>`\r\n   */\r\n  \"--dom:replace\": ({ invoker, targetElement }: CommandContext) => {\r\n    const sourceNode = getSourceNode(invoker, 'replace');\r\n    const updateDOM = () => targetElement.replaceWith(sourceNode.cloneNode(true));\r\n    document.startViewTransition ? document.startViewTransition(updateDOM) : updateDOM();\r\n  },\r\n\r\n  /**\r\n   * `--dom:swap`: Swaps the inner content of the target with content from a `<template>`.\r\n   * @example `<button command=\"--dom:swap\" commandfor=\"content-area\" data-template-id=\"panel-2\">Load Panel 2</button>`\r\n   */\r\n  \"--dom:swap\": ({ invoker, targetElement }: CommandContext) => {\r\n    const sourceNode = getSourceNode(invoker, 'swap');\r\n    const updateDOM = () => targetElement.replaceChildren(sourceNode.cloneNode(true));\r\n    document.startViewTransition ? document.startViewTransition(updateDOM) : updateDOM();\r\n  },\r\n\r\n  /**\r\n   * `--dom:append`: Appends content from a `<template>` to the target.\r\n   * @example `<button command=\"--dom:append\" commandfor=\"item-list\" data-template-id=\"new-item\">Add</button>`\r\n   */\r\n  \"--dom:append\": ({ invoker, targetElement }: CommandContext) => {\r\n    const sourceNode = getSourceNode(invoker, 'append');\r\n    targetElement.append(sourceNode.cloneNode(true));\r\n  },\r\n\r\n  /**\r\n   * `--dom:prepend`: Prepends content from a `<template>` to the target.\r\n   * @example `<button command=\"--dom:prepend\" commandfor=\"log\" data-template-id=\"new-log\">Log</button>`\r\n   */\r\n  \"--dom:prepend\": ({ invoker, targetElement }: CommandContext) => {\r\n    const sourceNode = getSourceNode(invoker, 'prepend');\r\n    targetElement.prepend(sourceNode.cloneNode(true));\r\n  },\r\n  \r\n  /**\r\n   * `--text:copy`: Copies the `textContent` from one element to another.\r\n   * The source element is specified via a CSS selector in `data-copy-from` on the invoker.\r\n   * If `data-copy-from` is omitted, it copies the invoker's own `textContent`.\r\n   */\r\n  \"--text:copy\": (context: CommandContext) => {\r\n      const { invoker, targetElement } = context;\r\n      const sourceSelector = invoker.dataset.copyFrom;\r\n      let sourceElement: HTMLElement | null = invoker;\r\n\r\n      if (sourceSelector) {\r\n          sourceElement = document.querySelector(sourceSelector);\r\n          if (!sourceElement) {\r\n              throw createInvokerError(`Source element with selector \"${sourceSelector}\" not found`, ErrorSeverity.ERROR, {\r\n                  command: '--text:copy', element: invoker\r\n              });\r\n          }\r\n      }\r\n\r\n      const textToCopy = (sourceElement instanceof HTMLInputElement || sourceElement instanceof HTMLTextAreaElement)\r\n          ? sourceElement.value\r\n          : sourceElement.textContent || '';\r\n\r\n      targetElement.textContent = textToCopy;\r\n  },\r\n\r\n\r\n  // --- Fetch and Navigation Commands ---\r\n\r\n  /**\r\n   * `--fetch:get`: Performs a GET request and swaps the response HTML into the target.\r\n   * Supports loading/error states via templates.\r\n   *\r\n   * @example\r\n   * ```html\r\n   * <button type=\"button\"\r\n   *   command=\"--fetch:get\"\r\n   *   data-url=\"/api/content\"\r\n   *   commandfor=\"content-area\"\r\n   *   data-loading-template=\"spinner-template\"\r\n   *   data-after-error=\"--class:add:load-error\"\r\n   * >\r\n   *   Load Content\r\n   * </button>\r\n   * ```\r\n   */\r\n  \"--fetch:get\": async ({ invoker, targetElement }: CommandContext) => {\r\n    const url = invoker.dataset.url;\r\n    if (!url) {\r\n      throw createInvokerError('Fetch GET command requires a data-url attribute', ErrorSeverity.ERROR, {\r\n        command: '--fetch:get', element: invoker, recovery: 'Add data-url=\"/your/endpoint\" to the button.'\r\n      });\r\n    }\r\n\r\n    setBusyState(invoker, true);\r\n    showFeedbackState(invoker, targetElement, \"data-loading-template\");\r\n\r\n    try {\r\n      const controller = new AbortController();\r\n      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30s timeout\r\n\r\n      const response = await fetch(url, {\r\n        method: \"GET\", headers: { Accept: \"text/html\", ...getHeadersFromAttributes(invoker) }, signal: controller.signal\r\n      });\r\n      clearTimeout(timeoutId);\r\n\r\n      if (!response.ok) {\r\n        throw createInvokerError(`HTTP Error: ${response.status} ${response.statusText}`, ErrorSeverity.ERROR, {\r\n          command: '--fetch:get', element: invoker, context: { url, status: response.status }\r\n        });\r\n      }\r\n\r\n      const html = await response.text();\r\n      const newContent = parseHTML(html);\r\n      const updateDOM = () => targetElement.replaceChildren(newContent);\r\n      await (document.startViewTransition ? document.startViewTransition(updateDOM).finished : Promise.resolve(updateDOM()));\r\n    } catch (error) {\r\n      showFeedbackState(invoker, targetElement, \"data-error-template\");\r\n      // Re-throw the error (either the one we created or a new wrapped one)\r\n      // to allow the core manager to handle it for conditional chaining.\r\n      if (error instanceof Error && 'severity' in error) throw error;\r\n      throw createInvokerError('Fetch GET failed', ErrorSeverity.ERROR, {\r\n        command: '--fetch:get', element: invoker, cause: error as Error, context: { url },\r\n        recovery: 'Check the URL, network connection, and server response.'\r\n      });\r\n    } finally {\r\n      setBusyState(invoker, false);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * `--fetch:send`: Submits the target `<form>` via a POST/PUT/DELETE request.\r\n   * The response is swapped into the element from `data-response-target`, or the form itself.\r\n   *\r\n   * @example\r\n   * ```html\r\n   * <form id=\"my-form\" action=\"/api/submit\" method=\"post\"></form>\r\n   * <button type=\"button\"\r\n   *   command=\"--fetch:send\"\r\n   *   commandfor=\"my-form\"\r\n   *   data-response-target=\"#response-area\"\r\n   * >\r\n   *   Submit via Fetch\r\n   * </button>\r\n   * ```\r\n   */\r\n  \"--fetch:send\": async ({ invoker, targetElement }: CommandContext) => {\r\n    const validationErrors = validateElement(targetElement, { tagName: ['form'] });\r\n    if (validationErrors.length > 0) {\r\n      throw createInvokerError(`Fetch send failed: ${validationErrors.join(', ')}`, ErrorSeverity.ERROR, {\r\n        command: '--fetch:send', element: invoker, recovery: 'Ensure commandfor points to a <form> element.'\r\n      });\r\n    }\r\n    const form = targetElement as HTMLFormElement;\r\n\r\n    const responseSelector = invoker.dataset.responseTarget;\r\n    const responseTarget = responseSelector ? document.querySelector<HTMLElement>(responseSelector) : form;\r\n    if (!responseTarget) {\r\n      throw createInvokerError(`Response target \"${responseSelector}\" not found`, ErrorSeverity.ERROR, {\r\n        command: '--fetch:send', element: invoker\r\n      });\r\n    }\r\n\r\n    setBusyState(invoker, true);\r\n    showFeedbackState(invoker, responseTarget, \"data-loading-template\");\r\n\r\n    try {\r\n      const response = await fetch(form.action, {\r\n        method: form.method || \"POST\", body: new FormData(form), headers: getHeadersFromAttributes(invoker),\r\n      });\r\n\r\n      if (!response.ok) throw new Error(`HTTP Error: ${response.status} ${response.statusText}`);\r\n\r\n      const html = await response.text();\r\n      const newContent = parseHTML(html);\r\n      const updateDOM = () => responseTarget.replaceChildren(newContent);\r\n      await (document.startViewTransition ? document.startViewTransition(updateDOM).finished : Promise.resolve(updateDOM()));\r\n    } catch (error) {\r\n      showFeedbackState(invoker, responseTarget, \"data-error-template\");\r\n      throw createInvokerError('Fetch send failed', ErrorSeverity.ERROR, {\r\n        command: '--fetch:send', element: invoker, cause: error as Error,\r\n        recovery: 'Check the form action, network connection, and server response.'\r\n      });\r\n    } finally {\r\n      setBusyState(invoker, false);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * `--navigate:to`: Navigates to a new URL using the History API.\r\n   *\r\n   * @example\r\n   * ```html\r\n   * <button type=\"button\" command=\"--navigate:to:/about\">Go to About Page</button>\r\n   * ```\r\n   */\r\n  \"--navigate:to\": (context: CommandContext) => {\r\n    const url = context.params.join(':'); // Rejoin params in case URL contains colons\r\n    if (!url) {\r\n      throw createInvokerError('Navigate command requires a URL parameter', ErrorSeverity.ERROR, {\r\n        command: '--navigate:to', element: context.invoker, recovery: 'Use format: --navigate:to:/your/path'\r\n      });\r\n    }\r\n\r\n    if (window.history?.pushState) {\r\n      window.history.pushState({}, \"\", url);\r\n      window.dispatchEvent(new PopStateEvent(\"popstate\", { state: {} }));\r\n    } else {\r\n      window.location.href = url;\r\n    }\r\n  },\r\n};\r\n\r\n/**\r\n * Registers all extended commands with the global `window.Invoker` instance.\r\n * @param specificCommands An optional array of command names to register. If omitted, all commands are registered.\r\n */\r\nexport function registerAll(specificCommands?: string[]): void {\r\n  if (!window.Invoker) {\r\n    console.error(\"Invokers: Core library not found. Ensure it is loaded before the commands module.\");\r\n    return;\r\n  }\r\n  const commandsToRegister = specificCommands || Object.keys(commands);\r\n  for (const name of commandsToRegister) {\r\n    const prefixedName = name.startsWith('--') ? name : `--${name}`;\r\n    if (commands[prefixedName]) {\r\n      window.Invoker.register(prefixedName, commands[prefixedName]);\r\n    }\r\n  }\r\n}\r\n\r\n// --- Private Helper Functions ---\r\n\r\nfunction getSourceNode(invoker: HTMLButtonElement, commandName: string): DocumentFragment {\r\n  const templateId = invoker.dataset.templateId;\r\n  if (templateId) {\r\n    const template = document.getElementById(templateId);\r\n    if (!(template instanceof HTMLTemplateElement)) {\r\n      throw createInvokerError(`Source <template> with ID \"${templateId}\" not found`, ErrorSeverity.ERROR, {\r\n        command: `--dom:${commandName}`, element: invoker\r\n      });\r\n    }\r\n    return template.content;\r\n  }\r\n  throw createInvokerError(`DOM command --dom:${commandName} requires a data-template-id attribute`, ErrorSeverity.ERROR, {\r\n    command: `--dom:${commandName}`, element: invoker\r\n  });\r\n}\r\n\r\nfunction setBusyState(invoker: HTMLButtonElement, isBusy: boolean): void {\r\n  invoker.toggleAttribute(\"disabled\", isBusy);\r\n  invoker.setAttribute(\"aria-busy\", String(isBusy));\r\n}\r\n\r\nfunction showFeedbackState(invoker: HTMLButtonElement, target: HTMLElement, templateAttr: \"data-loading-template\" | \"data-error-template\"): void {\r\n  const templateKey = templateAttr.replace('data-', '').replace(/-(\\w)/g, (_, c) => c.toUpperCase());\r\n  const templateId = invoker.dataset[templateKey];\r\n\r\n  if (!templateId || !target) return;\r\n\r\n  const template = document.getElementById(templateId);\r\n  if (!(template instanceof HTMLTemplateElement)) {\r\n    // This is a non-critical warning, so we log instead of throwing.\r\n    const error = createInvokerError(`Feedback template \"#${templateId}\" not found or is not a <template>`, ErrorSeverity.WARNING, { element: invoker });\r\n    console.error(error);\r\n    return;\r\n  }\r\n\r\n  target.replaceChildren(template.content.cloneNode(true));\r\n}\r\n\r\nfunction parseHTML(html: string): DocumentFragment {\r\n  const sanitizedHTML = sanitizeHTML(html);\r\n  const doc = new DOMParser().parseFromString(sanitizedHTML, \"text/html\");\r\n  const fragment = document.createDocumentFragment();\r\n  fragment.append(...Array.from(doc.body.childNodes));\r\n  return fragment;\r\n}\r\n\r\nfunction getHeadersFromAttributes(invoker: HTMLButtonElement): HeadersInit {\r\n  const headers: Record<string, string> = {};\r\n  for (const attr in invoker.dataset) {\r\n    if (attr.startsWith(\"header\")) {\r\n      const headerName = attr.substring(6).replace(/([A-Z])/g, \"-$1\").toLowerCase();\r\n      if (headerName) headers[headerName] = invoker.dataset[attr]!;\r\n    }\r\n  }\r\n  return headers;\r\n}"],
  "mappings": "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",
  "names": ["commands"]
}
