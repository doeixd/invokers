{
  "version": 3,
  "sources": ["../../../src/index.ts", "../../../src/invoker-commands.ts"],
  "sourcesContent": ["/**\n * @file invoker.ts\n * @version 0.0.0\n * @summary A type-safe, platform-first library that brings declarative HTML and ARIA attributes to life.\n * @license MIT\n * @author Patrick Glenn\n * @see https://github.com/doeixd/invokers\n */\n\n// --- Command String Utilities ---\n\n/**\n * Parses a command string that uses a colon (`:`) as a delimiter, while respecting\n * the backslash (`\\`) as an escape character for colons within arguments. This enables\n * complex command structures directly in HTML.\n *\n * @param commandString The raw string from the `command` attribute.\n * @returns An array of command parts.\n * @example\n * // Basic parsing\n * parseCommandString('class:toggle:is-active');\n * // returns ['class', 'toggle', 'is-active']\n *\n * // Parsing with an escaped colon\n * parseCommandString('class:toggle:md\\\\:grid-cols-2');\n * // returns ['class', 'toggle', 'md:grid-cols-2']\n */\nexport function parseCommandString(commandString: string): string[] {\n  const parts: string[] = [];\n  let currentPart = \"\";\n  let i = 0;\n  while (i < commandString.length) {\n    const char = commandString[i];\n    if (char === \"\\\\\") {\n      // Escape sequence: add the next character to the current part and skip it.\n      currentPart += commandString[i + 1] ?? \"\";\n      i += 2;\n    } else if (char === \":\") {\n      // Delimiter: push the current part and start a new one.\n      parts.push(currentPart);\n      currentPart = \"\";\n      i++;\n    } else {\n      // Regular character: add to the current part.\n      currentPart += char;\n      i++;\n    }\n  }\n  parts.push(currentPart);\n  return parts;\n}\n\n/**\n * Programmatically creates a valid command string from an array of parts. It automatically\n * escapes any colons or backslashes within the parts to ensure the string can be\n * correctly parsed by `parseCommandString`.\n *\n * @param parts The parts of the command to join.\n * @returns A single, correctly formatted command string.\n * @example\n * // Create a command with a class name that contains a colon\n * createCommandString('class', 'toggle', 'md:grid-cols-2');\n * // returns 'class:toggle:md\\\\:grid-cols-2'\n */\nexport function createCommandString(...parts: string[]): string {\n  return parts\n    .map((part) => part.replace(/\\\\/g, \"\\\\\\\\\").replace(/:/g, \"\\\\:\"))\n    .join(\":\");\n}\n\n// --- Core Type Definitions for Maximum DX ---\n\n/**\n * The context object passed to every command's callback function.\n * It provides a rich, type-safe API for interacting with the invoker and its targets.\n */\nexport interface CommandContext {\n  /** The `<button>` element that was invoked. */\n  readonly invoker: HTMLButtonElement;\n  /** The element that received the command event (often the invoker or a parent). */\n  readonly targetElement: HTMLElement;\n  /**\n   * An array of string parameters that follow the matched command prefix.\n   * For a `command=\"class:toggle:is-active\"` and a registered command named `class`,\n   * the `params` array will be `['toggle', 'is-active']`.\n   */\n  readonly params: readonly string[];\n  /**\n   * Retrieves the target elements controlled by the invoker.\n   * Prioritizes the `aria-controls` attribute for accessibility, falling back to `data-target`.\n   * @returns An array of `HTMLElement`s. An empty array is returned if no targets are found.\n   */\n  getTargets: () => HTMLElement[];\n  /**\n   * Automatically updates the invoker's `aria-expanded` and `aria-pressed` attributes\n   * based on the visibility state of its targets.\n   * @param targets The target elements whose state determines the ARIA update.\n   */\n  updateAriaState: (targets: HTMLElement[]) => void;\n  /**\n   * Manages the active state for a group of related invokers (e.g., in a tab group).\n   * Deactivates other invokers within the same widget group when a new one is activated.\n   */\n  manageGroupState: () => void;\n}\n\n/**\n * The function signature for a command's implementation logic.\n * @param context A `CommandContext` object providing tools to manipulate the DOM.\n */\nexport type CommandCallback = (context: CommandContext) => void;\n\n// --- Global Type Augmentations for Seamless Platform Integration ---\n\n/**\n * We must inform TypeScript about the custom `CommandEvent` to handle it safely.\n */\ninterface CommandEvent extends Event {\n  readonly command: string;\n  readonly invokerElement: HTMLButtonElement;\n}\n\n/**\n * The InvokerAction interface, part of the nascent Invokers API proposal.\n */\ninterface InvokerAction {\n  action: () => void;\n  behavior?: \"auto\" | \"toggle\";\n  type?: \"button\" | \"reset\" | \"submit\";\n}\n\ndeclare global {\n  /**\n   * Add the `command` event to the global event map for elements.\n   * This enables type-safe `addEventListener('command', ...)`.\n   */\n  interface HTMLElementEventMap {\n    command: CommandEvent;\n  }\n  /**\n   * Augment HTMLElement with the proposed `invokers` property for better type alignment\n   * with future platform APIs.\n   */\n  interface HTMLElement {\n    invokers: {\n      add: (invoker: InvokerAction) => void;\n      remove: (invoker: InvokerAction) => void;\n    };\n  }\n  interface Window {\n    /** The global API for the Invoker.js library. */\n    Invoker: {\n      /**\n       * Registers a new custom command with the library.\n       * @param name The unique name of the command. Can be a prefix for namespaced commands.\n       * @param callback The function to execute when the command is invoked.\n       * @example\n       * Invoker.register('console:log', ({ invoker, params }) => {\n       *   console.log('Button clicked:', invoker);\n       *   console.log('Message:', params[0]); // For command=\"console:log:Hello World\"\n       * });\n       */\n      register: (name: string, callback: CommandCallback) => void;\n      /**\n       * A utility to parse a command string with escaped delimiters.\n       * @see parseCommandString\n       */\n      parseCommandString: typeof parseCommandString;\n      /**\n       * A utility to programmatically create a valid command string.\n       * @see createCommandString\n       */\n      createCommandString: typeof createCommandString;\n    };\n  }\n}\n\n// --- The Main Invoker Class (Singleton Pattern) ---\n\n/**\n * Manages the registration and execution of all declarative commands.\n * This class is instantiated once and handles all events globally.\n */\nexport class InvokerManager {\n  private readonly commands = new Map<string, CommandCallback>();\n  private sortedCommandKeys: string[] = [];\n\n  constructor() {\n    // Gracefully handle non-browser environments (e.g., SSR).\n    if (typeof window !== \"undefined\" && typeof document !== \"undefined\") {\n      this.registerCoreCommands();\n      this.listen();\n    }\n  }\n\n  /**\n   * Registers a new command, making it available for use in HTML. Commands are matched\n   * using a longest-prefix algorithm, allowing for namespaced command registration.\n   * For example, registering `class` will handle commands like `class:toggle:is-active`.\n   *\n   * @param name The unique name of the command.\n   * @param callback The function to execute for this command.\n   */\n  public register(name: string, callback: CommandCallback): void {\n    if (this.commands.has(name)) {\n      console.warn(\n        `Invokers: Command \"${name}\" is already registered and will be overwritten.`,\n      );\n    }\n    this.commands.set(name, callback);\n    // Pre-sort keys by length (desc) to ensure longest-prefix matching.\n    this.sortedCommandKeys = Array.from(this.commands.keys()).sort(\n      (a, b) => b.length - a.length,\n    );\n  }\n\n  /**\n   * Handles the incoming 'command' event, finds the appropriate registered\n   * command callback, and executes it with a constructed context.\n   * @param event The dispatched CommandEvent.\n   */\n  private handleCommand(event: CommandEvent): void {\n    const commandStr = event.command;\n\n    // Find the longest registered command that is a prefix of the invoked command.\n    for (const registeredCommand of this.sortedCommandKeys) {\n      if (commandStr.startsWith(registeredCommand)) {\n        // Ensure it's a full match or is followed by a delimiter to avoid partial matches\n        // (e.g., 'show' matching 'showcase' incorrectly).\n        if (\n          commandStr.length === registeredCommand.length ||\n          commandStr[registeredCommand.length] === \":\"\n        ) {\n          const callback = this.commands.get(registeredCommand);\n          if (callback) {\n            // Parse the rest of the string into parameters.\n            const paramsStr = commandStr.substring(\n              registeredCommand.length + 1,\n            );\n            const params = paramsStr ? parseCommandString(paramsStr) : [];\n            callback(this.createContext(event, params));\n          }\n          // Stop after the first, longest match is found and executed.\n          return;\n        }\n      }\n    }\n  }\n\n  /**\n   * Creates the CommandContext object for a given command event.\n   * @param event The CommandEvent from the DOM.\n   * @param params The parsed parameters for the specific command invocation.\n   * @returns A fully populated CommandContext object.\n   */\n  private createContext(\n    event: CommandEvent,\n    params: readonly string[],\n  ): CommandContext {\n    const invoker = event.invokerElement;\n\n    const getTargetsInternal = (element: HTMLElement): HTMLElement[] => {\n      const controls = element.getAttribute(\"aria-controls\")?.trim();\n      const selector = controls\n        ? \"#\" + controls.split(/\\s+/).join(\", #\")\n        : element.dataset.target;\n      return selector ? Array.from(document.querySelectorAll(selector)) : [];\n    };\n\n    return {\n      invoker,\n      targetElement: event.target as HTMLElement,\n      params,\n      getTargets: () => getTargetsInternal(invoker),\n      updateAriaState: (targets) => {\n        const isExpanded = targets.some((t) => !t.hasAttribute(\"hidden\"));\n        invoker.setAttribute(\"aria-expanded\", String(isExpanded));\n        if (invoker.hasAttribute(\"aria-pressed\")) {\n          invoker.setAttribute(\"aria-pressed\", String(isExpanded));\n        }\n      },\n      manageGroupState: () => {\n        const targets = getTargetsInternal(invoker);\n        if (targets.length === 0 || !targets[0].parentElement) return;\n\n        const container = targets[0].parentElement;\n        const allTargetIDs = new Set(\n          Array.from(container.children)\n            .map((t) => t.id)\n            .filter(Boolean),\n        );\n\n        const invokersInGroup = Array.from(\n          document.querySelectorAll<HTMLButtonElement>(\"[aria-controls]\"),\n        ).filter((btn) => {\n          const controlledIds =\n            btn.getAttribute(\"aria-controls\")?.split(/\\s+/) ?? [];\n          return controlledIds.some((id) => allTargetIDs.has(id));\n        });\n\n        invokersInGroup.forEach((otherInvoker) => {\n          if (otherInvoker !== invoker) {\n            otherInvoker.setAttribute(\"aria-expanded\", \"false\");\n            if (otherInvoker.hasAttribute(\"aria-pressed\")) {\n              otherInvoker.setAttribute(\"aria-pressed\", \"false\");\n            }\n          }\n        });\n      },\n    };\n  }\n\n  /** Attaches the global command listener to the document. */\n  private listen(): void {\n    document.addEventListener(\"command\", (e) =>\n      this.handleCommand(e as CommandEvent),\n    );\n  }\n\n  /** Registers the set of built-in commands provided by the library. */\n  private registerCoreCommands(): void {\n    /**\n     * Toggles the `hidden` attribute on target element(s).\n     * Ideal for simple accordions, dropdowns, and menus.\n     * @example\n     * ```html\n     * <button command=\"toggle\" aria-controls=\"menu\" aria-expanded=\"false\">Menu</button>\n     * <div id=\"menu\" hidden>...</div>\n     * ```\n     */\n    this.register(\"toggle\", (context) => {\n      const targets = context.getTargets();\n      if (targets.length === 0) return;\n\n      const updateDOM = () => {\n        targets.forEach((target) => target.toggleAttribute(\"hidden\"));\n        context.updateAriaState(targets);\n      };\n\n      document.startViewTransition\n        ? document.startViewTransition(updateDOM)\n        : updateDOM();\n    });\n\n    /**\n     * Shows target element(s) while hiding their siblings within the same parent.\n     * Automatically manages `aria-expanded` state for all related invokers in the group.\n     * Ideal for tab panels.\n     * @example\n     * ```html\n     * <div role=\"tablist\">\n     *   <button command=\"show\" aria-controls=\"panel-1\" aria-expanded=\"true\">Tab 1</button>\n     *   <button command=\"show\" aria-controls=\"panel-2\" aria-expanded=\"false\">Tab 2</button>\n     * </div>\n     * <div>\n     *   <div id=\"panel-1\">...</div>\n     *   <div id=\"panel-2\" hidden>...</div>\n     * </div>\n     * ```\n     */\n    this.register(\"show\", (context) => {\n      const targetsToShow = context.getTargets();\n      if (targetsToShow.length === 0 || !targetsToShow[0].parentElement) return;\n\n      const container = targetsToShow[0].parentElement;\n      const allTargetsInContainer = Array.from(container.children);\n\n      const updateDOM = () => {\n        context.manageGroupState();\n        allTargetsInContainer.forEach((child) =>\n          child.setAttribute(\"hidden\", \"\"),\n        );\n        targetsToShow.forEach((target) => target.removeAttribute(\"hidden\"));\n        context.updateAriaState(targetsToShow);\n      };\n\n      document.startViewTransition\n        ? document.startViewTransition(updateDOM)\n        : updateDOM();\n    });\n\n    /**\n     * Explicitly hides the target element(s) by setting the `hidden` attribute.\n     * Ideal for close buttons on modals, dialogs, or popovers.\n     * @example\n     * ```html\n     * <div id=\"modal\">\n     *   <p>This is a modal.</p>\n     *   <button command=\"hide\" aria-controls=\"modal\">Close</button>\n     * </div>\n     * ```\n     */\n    this.register(\"hide\", (context) => {\n      const targets = context.getTargets();\n      if (targets.length === 0) return;\n      targets.forEach((target) => target.setAttribute(\"hidden\", \"\"));\n      context.updateAriaState(targets);\n    });\n\n    /**\n     * Manipulates CSS classes on target elements based on sub-commands.\n     * The command follows the pattern `class:<action>:<className>`.\n     * The `<action>` can be `add`, `remove`, or `toggle`.\n     *\n     * @example\n     * ```html\n     * <!-- Toggle a class on the target element -->\n     * <button command=\"class:toggle:is-active\" data-target=\"#el\">Toggle Active</button>\n     *\n     * <!-- Add a class -->\n     * <button command=\"class:add:is-visible\" data-target=\"#el\">Show</button>\n     *\n     * <!-- Remove a class -->\n     * <button command=\"class:remove:is-visible\" data-target=\"#el\">Hide</button>\n     *\n     * <!-- Handle class names with colons (e.g., Tailwind CSS) by escaping them -->\n     * <button command=\"class:toggle:md\\\\:grid-cols-2\" data-target=\"#grid\">\n     *   Toggle Grid Layout\n     * </button>\n     *\n     * <div id=\"el\">Target Element</div>\n     * ```\n     */\n    this.register(\"class\", (context) => {\n      const [action, className] = context.params;\n      const targets = context.getTargets();\n\n      if (!action || !className || targets.length === 0) {\n        console.warn(\n          'Invokers: `class` command requires an action and a class name (e.g., \"class:toggle:my-class\").',\n          context.invoker,\n        );\n        return;\n      }\n\n      targets.forEach((target) => {\n        switch (action) {\n          case \"add\":\n            target.classList.add(className);\n            break;\n          case \"remove\":\n            target.classList.remove(className);\n            break;\n          case \"toggle\":\n            target.classList.toggle(className);\n            break;\n          default:\n            console.warn(\n              `Invokers: Unknown action \"${action}\" for 'class' command.`,\n            );\n        }\n      });\n    });\n  }\n}\n\n// --- Initialize and Expose API ---\n\nconst invokerInstance = new InvokerManager();\n\n// Make API available on the window for script tag usage.\nif (typeof window !== \"undefined\") {\n  window.Invoker = {\n    register: invokerInstance.register.bind(invokerInstance),\n    parseCommandString,\n    createCommandString,\n  };\n}\n\n// Default export for ES Module usage.\nexport default invokerInstance;\n\n\nexport * as commands from  \"./invoker-commands\";", "/**\n * @file invoker-commands.ts\n * @summary An optional collection of powerful, reusable commands for the Invokers library.\n * @description To use these commands, import this module and register them.\n * Note: Core functionality like class manipulation (`class:toggle:is-active`) is now\n * part of the main `invokers` library, so it is not duplicated here.\n * @example\n * import { registerAll } from 'invokers/commands';\n * registerAll();\n */\n\nimport type { CommandContext, CommandCallback } from \"./index\";\n\ntype CommandRegistry = Record<string, CommandCallback>;\n\n/**\n * A collection of useful commands to enhance the Invokers library.\n * Each command is designed to be robust and handle common UI patterns.\n */\nexport const commands: CommandRegistry = {\n  // --- Media Commands ---\n\n  /**\n   * Toggles play/pause on a target `<video>` or `<audio>` element. It automatically\n   * updates the invoker's text content and `aria-pressed` state for accessibility.\n   * Gracefully handles the promise returned by the `play()` method.\n   *\n   * @example\n   * ```html\n   * <button\n   *   command=\"media:toggle\"\n   *   aria-controls=\"my-video\"\n   *   data-play-text=\"Pause Video\"\n   *   data-pause-text=\"Play Video\"\n   *   aria-pressed=\"false\"\n   * >\n   *   Play Video\n   * </button>\n   * <video id=\"my-video\" src=\"...\"></video>\n   * ```\n   */\n  \"media:toggle\": (context: CommandContext) => {\n    const media = context.getTargets()[0] as HTMLMediaElement | undefined;\n    if (!media || typeof media.play !== \"function\") return;\n\n    const { invoker } = context;\n    const playText = invoker.dataset.playText || \"Pause\";\n    const pauseText = invoker.dataset.pauseText || \"Play\";\n\n    if (media.paused) {\n      media\n        .play()\n        .then(() => {\n          invoker.textContent = playText;\n          invoker.setAttribute(\"aria-pressed\", \"true\");\n        })\n        .catch((err) => console.error(\"Invokers: Media play failed.\", err));\n    } else {\n      media.pause();\n      invoker.textContent = pauseText;\n      invoker.setAttribute(\"aria-pressed\", \"false\");\n    }\n  },\n\n  /**\n   * Seeks a target `<video>` or `<audio>` element forward or backward by a specified\n   * number of seconds. Ensures the new time remains within the media's valid duration.\n   *\n   * @example\n   * ```html\n   * <button command=\"media:seek\" aria-controls=\"my-video\" data-seek=\"-10\">Rewind 10s</button>\n   * <button command=\"media:seek\" aria-controls=\"my-video\" data-seek=\"30\">Forward 30s</button>\n   * ```\n   */\n  \"media:seek\": (context: CommandContext) => {\n    const media = context.getTargets()[0] as HTMLMediaElement | undefined;\n    const seekTime = parseFloat(context.invoker.dataset.seek || \"0\");\n    if (!media || !isFinite(seekTime)) return;\n\n    media.currentTime = Math.max(\n      0,\n      Math.min(media.duration, media.currentTime + seekTime),\n    );\n  },\n\n  /**\n   * Toggles the mute state on a target `<video>` or `<audio>` element and updates the\n   * invoker's `aria-pressed` state to reflect the current muted status.\n   *\n   * @example\n   * ```html\n   * <button command=\"media:mute\" aria-controls=\"my-video\" aria-pressed=\"false\">Mute</button>\n   * ```\n   */\n  \"media:mute\": (context: CommandContext) => {\n    const media = context.getTargets()[0] as HTMLMediaElement | undefined;\n    if (!media) return;\n\n    media.muted = !media.muted;\n    context.invoker.setAttribute(\"aria-pressed\", String(media.muted));\n  },\n\n  // --- Carousel / Slider Commands ---\n\n  /**\n   * Navigates a carousel or slider by showing the next or previous item. It assumes\n   * a structure where items are direct children of a container, and visibility is\n   * controlled by the `hidden` attribute. Wraps around at the beginning and end.\n   *\n   * @example\n   * ```html\n   * <div id=\"my-carousel\" class=\"carousel-container\">\n   *   <div class=\"slide\">Slide 1</div>\n   *   <div class=\"slide\" hidden>Slide 2</div>\n   *   <div class=\"slide\" hidden>Slide 3</div>\n   * </div>\n   * <button command=\"carousel:nav\" aria-controls=\"my-carousel\" data-direction=\"prev\">‹</button>\n   * <button command=\"carousel:nav\" aria-controls=\"my-carousel\" data-direction=\"next\">›</button>\n   * ```\n   */\n  \"carousel:nav\": (context: CommandContext) => {\n    const carousel = context.getTargets()[0];\n    const direction = context.invoker.dataset.direction; // 'next' or 'prev'\n    if (!carousel || (direction !== \"next\" && direction !== \"prev\")) return;\n\n    const slides = Array.from(carousel.children) as HTMLElement[];\n    if (slides.length < 2) return;\n\n    const activeIndex = slides.findIndex(\n      (slide) => !slide.hasAttribute(\"hidden\"),\n    );\n    const currentIndex = activeIndex === -1 ? 0 : activeIndex; // Default to first slide if none are active\n\n    const nextIndex =\n      direction === \"next\"\n        ? (currentIndex + 1) % slides.length\n        : (currentIndex - 1 + slides.length) % slides.length;\n\n    const updateDOM = () => {\n      slides.forEach((slide, index) => {\n        slide.toggleAttribute(\"hidden\", index !== nextIndex);\n      });\n    };\n\n    document.startViewTransition\n      ? document.startViewTransition(updateDOM)\n      : updateDOM();\n  },\n\n  // --- Clipboard and Form Commands ---\n\n  /**\n   * Copies the text content of the target element to the clipboard. It provides visual\n   * feedback by temporarily changing the invoker's text. Handles permissions and\n   * non-secure contexts gracefully.\n   *\n   * @example\n   * ```html\n   * <button\n   *   command=\"clipboard:copy\"\n   *   aria-controls=\"code-snippet\"\n   *   data-feedback-text=\"Copied!\"\n   * >\n   *   Copy\n   * </button>\n   * <pre id=\"code-snippet\">npm install invokers</pre>\n   * ```\n   */\n  \"clipboard:copy\": async (context: CommandContext) => {\n    const target = context.getTargets()[0];\n    const { invoker } = context;\n    if (!target) return;\n    if (!navigator.clipboard) {\n      console.warn(\n        \"Invokers: Clipboard API not available or not in a secure context.\",\n      );\n      return;\n    }\n\n    const originalText = invoker.textContent || \"\";\n    const feedbackText = invoker.dataset.feedbackText || \"Copied!\";\n    const errorText = invoker.dataset.errorText || \"Error!\";\n    const textToCopy =\n      target.tagName === \"INPUT\" || target.tagName === \"TEXTAREA\"\n        ? (target as HTMLInputElement | HTMLTextAreaElement).value\n        : target.textContent || \"\";\n\n    invoker.setAttribute(\"disabled\", \"\");\n    try {\n      await navigator.clipboard.writeText(textToCopy);\n      invoker.textContent = feedbackText;\n    } catch (err) {\n      console.error(\"Invokers: Failed to copy text.\", err);\n      invoker.textContent = errorText;\n    } finally {\n      setTimeout(() => {\n        invoker.textContent = originalText;\n        invoker.removeAttribute(\"disabled\");\n      }, 2000);\n    }\n  },\n\n  /**\n   * Resets the target `<form>` element to its initial state.\n   *\n   * @example\n   * ```html\n   * <form id=\"my-form\">...</form>\n   * <button command=\"form:reset\" aria-controls=\"my-form\">Reset Form</button>\n   * ```\n   */\n  \"form:reset\": (context: CommandContext) => {\n    const form = context.getTargets()[0] as HTMLFormElement | undefined;\n    if (form instanceof HTMLFormElement) form.reset();\n  },\n\n  /**\n   * Submits the target `<form>` element, triggering browser validation.\n   *\n   * @example\n   * ```html\n   * <form id=\"my-form\">...</form>\n   * <button command=\"form:submit\" aria-controls=\"my-form\">Submit</button>\n   * ```\n   */\n  \"form:submit\": (context: CommandContext) => {\n    const form = context.getTargets()[0] as HTMLFormElement | undefined;\n    if (form instanceof HTMLFormElement) form.requestSubmit();\n  },\n\n  /**\n   * Increments or decrements the value of a target `<input type=\"number\">`.\n   * It respects the input's `step`, `min`, and `max` attributes. After changing\n   * the value, it dispatches an `input` event to ensure compatibility with\n   * other scripts or frameworks that listen for value changes.\n   *\n   * @example\n   * ```html\n   * <button command=\"input:step\" aria-controls=\"quantity\" data-step=\"-1\">-</button>\n   * <input type=\"number\" id=\"quantity\" value=\"1\" step=\"1\" min=\"0\" max=\"10\">\n   * <button command=\"input:step\" aria-controls=\"quantity\" data-step=\"1\">+</button>\n   * ```\n   */\n  \"input:step\": (context: CommandContext) => {\n    const input = context.getTargets()[0] as HTMLInputElement | undefined;\n    if (!(input instanceof HTMLInputElement) || input.type !== \"number\") return;\n\n    const stepDirection = parseFloat(context.invoker.dataset.step || \"0\");\n    if (!isFinite(stepDirection)) return;\n\n    // Use built-in methods to correctly respect min/max/step attributes.\n    if (stepDirection > 0) {\n      input.stepUp(stepDirection);\n    } else if (stepDirection < 0) {\n      input.stepDown(Math.abs(stepDirection));\n    }\n    // Dispatch an input event so other JS can react to the change.\n    input.dispatchEvent(\n      new Event(\"input\", { bubbles: true, cancelable: true }),\n    );\n  },\n\n  // --- Scroll Commands ---\n\n  /**\n   * Smoothly scrolls the viewport to bring the target element into view.\n   *\n   * @example\n   * ```html\n   * <button command=\"scroll:to\" aria-controls=\"section-2\">Go to Section 2</button>\n   * ...\n   * <section id=\"section-2\" style=\"height: 100vh;\"></section>\n   * ```\n   */\n  \"scroll:to\": (context: CommandContext) => {\n    const target = context.getTargets()[0];\n    if (target) {\n      target.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n    }\n  },\n\n  // --- DOM Manipulation Commands ---\n\n  /**\n   * Removes the target element(s) from the DOM. Useful for dismissible alerts.\n   * Can be animated with the View Transition API.\n   *\n   * @example\n   * ```html\n   * <div id=\"alert-1\">\n   *   Welcome!\n   *   <button command=\"dom:remove\" aria-controls=\"alert-1\" aria-label=\"Dismiss\">&times;</button>\n   * </div>\n   * ```\n   */\n  \"dom:remove\": (context: CommandContext) => {\n    const targets = context.getTargets();\n    if (targets.length === 0) return;\n\n    const updateDOM = () => targets.forEach((target) => target.remove());\n\n    document.startViewTransition\n      ? document.startViewTransition(updateDOM)\n      : updateDOM();\n  },\n\n  /**\n   * Replaces the target element(s) entirely with new content.\n   * Content can be sourced from a `<template>` using `data-template-id`\n   * or by cloning an existing element using `data-clone-id`.\n   *\n   * @example\n   * ```html\n   * <!-- Using a template -->\n   * <button command=\"dom:replace\" aria-controls=\"placeholder\" data-template-id=\"content-template\">Load</button>\n   * <div id=\"placeholder\">Loading...</div>\n   * <template id=\"content-template\"><div>Loaded Content</div></template>\n   *\n   * <!-- Using a clone -->\n   * <button command=\"dom:replace\" aria-controls=\"item-a\" data-clone-id=\"item-b\">Swap A for B</button>\n   * ```\n   */\n  \"dom:replace\": (context: CommandContext) => {\n    const targets = context.getTargets();\n    if (targets.length === 0) return;\n\n    const sourceNode = getSourceNode(context.invoker);\n    if (!sourceNode) return;\n\n    const updateDOM = () => {\n      // Replace each target with a clone of the source node.\n      targets.forEach((target, index) => {\n        const content = index === 0 ? sourceNode : sourceNode.cloneNode(true);\n        target.replaceWith(content);\n      });\n    };\n\n    document.startViewTransition\n      ? document.startViewTransition(updateDOM)\n      : updateDOM();\n  },\n\n  /**\n   * Swaps the *inner content* of the target element(s) with new content.\n   * Content is sourced from a `<template>` or by cloning another element.\n   * Uses `replaceChildren` for performance and correctness.\n   *\n   * @example\n   * ```html\n   * <button command=\"dom:swap\" aria-controls=\"content-area\" data-template-id=\"panel-2-template\">Load Panel 2</button>\n   * <div id=\"content-area\">Original Content</div>\n   * <template id=\"panel-2-template\"><h2>Panel 2</h2></template>\n   * ```\n   */\n  \"dom:swap\": (context: CommandContext) => {\n    const targets = context.getTargets();\n    if (targets.length === 0) return;\n\n    const sourceNode = getSourceNode(context.invoker);\n    if (!sourceNode) return;\n\n    const updateDOM = () => {\n      targets.forEach((target, index) => {\n        const content = index === 0 ? sourceNode : sourceNode.cloneNode(true);\n        target.replaceChildren(content); // Modern, efficient replacement\n      });\n    };\n\n    document.startViewTransition\n      ? document.startViewTransition(updateDOM)\n      : updateDOM();\n  },\n\n  /**\n   * Appends content to the end of the target element(s).\n   * Content is sourced from a `<template>` or by cloning another element.\n   *\n   * @example\n   * ```html\n   * <button command=\"dom:append\" aria-controls=\"item-list\" data-template-id=\"new-item-template\">Add Item</button>\n   * <ul id=\"item-list\"><li>First item</li></ul>\n   * <template id=\"new-item-template\"><li>A new item</li></template>\n   * ```\n   */\n  \"dom:append\": (context: CommandContext) => {\n    const targets = context.getTargets();\n    if (targets.length === 0) return;\n\n    const sourceNode = getSourceNode(context.invoker);\n    if (!sourceNode) return;\n\n    targets.forEach((target, index) => {\n      const content = index === 0 ? sourceNode : sourceNode.cloneNode(true);\n      target.append(content);\n    });\n  },\n\n  /**\n   * Prepends content to the beginning of the target element(s).\n   * Content is sourced from a `<template>` or by cloning another element.\n   *\n   * @example\n   * ```html\n   * <button command=\"dom:prepend\" aria-controls=\"log\" data-template-id=\"new-log-template\">New Log</button>\n   * <div id=\"log\"><p>Old log</p></div>\n   * <template id=\"new-log-template\"><p>New log</p></template>\n   * ```\n   */\n  \"dom:prepend\": (context: CommandContext) => {\n    const targets = context.getTargets();\n    if (targets.length === 0) return;\n\n    const sourceNode = getSourceNode(context.invoker);\n    if (!sourceNode) return;\n\n    targets.forEach((target, index) => {\n      const content = index === 0 ? sourceNode : sourceNode.cloneNode(true);\n      target.prepend(content);\n    });\n  },\n\n  // --- Fetch and Navigation Commands ---\n\n  /**\n   * Performs a GET request and swaps the response HTML into the target element(s).\n   * Handles loading/error states by swapping content from corresponding `<template>`s.\n   * Can trigger a follow-up command upon success for chained actions.\n   *\n   * @example\n   * ```html\n   * <button\n   *   command=\"fetch:get\"\n   *   data-url=\"/api/content\"\n   *   aria-controls=\"content-area\"\n   *   data-loading-template=\"spinner-template\"\n   *   data-error-template=\"error-template\"\n   *   data-then-command=\"show\"\n   * >\n   *   Load Content\n   * </button>\n   *\n   * <div id=\"content-area\"></div>\n   * <template id=\"spinner-template\">Loading...</template>\n   * <template id=\"error-template\">Error!</template>\n   * ```\n   */\n  \"fetch:get\": async (context: CommandContext) => {\n    const { invoker, getTargets } = context;\n    const targets = getTargets();\n    const url = invoker.dataset.url;\n\n    if (!url) {\n      console.warn(\n        \"Invokers: `fetch:get` requires a `data-url` attribute.\",\n        invoker,\n      );\n      return;\n    }\n    if (targets.length === 0) {\n      console.warn(\n        \"Invokers: `fetch:get` requires `aria-controls` or `data-target`.\",\n        invoker,\n      );\n      return;\n    }\n\n    setBusyState(invoker, true);\n    showFeedbackState(invoker, targets, \"data-loading-template\");\n\n    try {\n      const response = await fetch(url, {\n        method: \"GET\",\n        headers: { Accept: \"text/html\", ...getHeadersFromAttributes(invoker) },\n      });\n\n      if (!response.ok)\n        throw new Error(`HTTP ${response.status} ${response.statusText}`);\n\n      const html = await response.text();\n      const newContent = parseHTML(html);\n\n      const updateDOM = () => {\n        targets.forEach((target, i) => {\n          const content = i === 0 ? newContent : newContent.cloneNode(true);\n          target.replaceChildren(content);\n        });\n      };\n      await (document.startViewTransition\n        ? document.startViewTransition(updateDOM).finished\n        : Promise.resolve(updateDOM()));\n\n      triggerFollowup(invoker, targets);\n    } catch (error) {\n      console.error(\"Invokers: `fetch:get` failed.\", error);\n      showFeedbackState(invoker, targets, \"data-error-template\");\n    } finally {\n      setBusyState(invoker, false);\n    }\n  },\n\n  /**\n   * Performs a POST/PUT/DELETE request, using a `<form>` as the data source.\n   * The response HTML is swapped into the element(s) specified by `data-response-target`.\n   * If no response target is specified, the form itself is updated.\n   *\n   * @example\n   * ```html\n   * <form id=\"my-form\" action=\"/api/submit\" method=\"post\">...</form>\n   * <button\n   *   command=\"fetch:send\"\n   *   aria-controls=\"my-form\"\n   *   data-response-target=\"#response-area\"\n   * >\n   *   Submit Form\n   * </button>\n   * <div id=\"response-area\"></div>\n   * ```\n   */\n  \"fetch:send\": async (context: CommandContext) => {\n    const form = context.getTargets()[0] as HTMLFormElement | undefined;\n    if (!(form instanceof HTMLFormElement)) {\n      console.warn(\n        \"Invokers: `fetch:send` requires `aria-controls` to point to a valid <form>.\",\n        context.invoker,\n      );\n      return;\n    }\n\n    const responseSelector = context.invoker.dataset.responseTarget;\n    const responseTargets = responseSelector\n      ? (Array.from(\n          document.querySelectorAll(responseSelector),\n        ) as HTMLElement[])\n      : [form];\n    const url = form.action;\n    const method = (form.method || \"POST\").toUpperCase();\n\n    if (!url) {\n      console.warn(\n        \"Invokers: Target form for `fetch:send` must have an `action` attribute.\",\n        form,\n      );\n      return;\n    }\n\n    setBusyState(context.invoker, true);\n    showFeedbackState(\n      context.invoker,\n      responseTargets,\n      \"data-loading-template\",\n    );\n\n    try {\n      const response = await fetch(url, {\n        method: method,\n        body: new FormData(form),\n        headers: getHeadersFromAttributes(context.invoker),\n      });\n\n      if (!response.ok)\n        throw new Error(`HTTP ${response.status} ${response.statusText}`);\n\n      const html = await response.text();\n      const newContent = parseHTML(html);\n\n      const updateDOM = () => {\n        responseTargets.forEach((target, i) => {\n          const content = i === 0 ? newContent : newContent.cloneNode(true);\n          target.replaceChildren(content);\n        });\n      };\n      await (document.startViewTransition\n        ? document.startViewTransition(updateDOM).finished\n        : Promise.resolve(updateDOM()));\n\n      triggerFollowup(context.invoker, responseTargets);\n    } catch (error) {\n      console.error(`Invokers: \\`fetch:send\\` (${method}) failed.`, error);\n      showFeedbackState(\n        context.invoker,\n        responseTargets,\n        \"data-error-template\",\n      );\n    } finally {\n      setBusyState(context.invoker, false);\n    }\n  },\n\n  /**\n   * Navigates to a new URL using the History API for client-side routing.\n   * This does NOT cause a full page reload, allowing integration with SPAs.\n   * A `popstate` event is dispatched to signal the URL change.\n   *\n   * @example\n   * ```html\n   * <button command=\"navigate:to\" data-url=\"/about\">About Us</button>\n   * ```\n   */\n  \"navigate:to\": (context: CommandContext) => {\n    const url = context.invoker.dataset.url;\n    if (!url) {\n      console.warn(\n        \"Invokers: `navigate:to` command requires a `data-url` attribute.\",\n        context.invoker,\n      );\n      return;\n    }\n\n    if (window.history && typeof window.history.pushState === \"function\") {\n      window.history.pushState({}, \"\", url);\n      window.dispatchEvent(new PopStateEvent(\"popstate\", { state: {} }));\n    } else {\n      window.location.href = url;\n    }\n  },\n};\n\n/**\n * Registers commands from this module with the global Invoker instance.\n * @param specificCommands An optional array of command names to register. If omitted, all commands are registered.\n * @example\n * ```js\n * // Register all commands\n * registerAll();\n * // Register only a few specific commands\n * registerAll(['media:toggle', 'scroll:to']);\n * ```\n */\nexport function registerAll(\n  specificCommands?: (keyof typeof commands)[],\n): void {\n  if (!window.Invoker) {\n    console.error(\n      \"Invokers core library not found. Please ensure it is loaded before the commands module.\",\n    );\n    return;\n  }\n  const commandsToRegister = specificCommands || Object.keys(commands);\n  for (const name of commandsToRegister) {\n    if (commands[name]) {\n      window.Invoker.register(name, commands[name]);\n    }\n  }\n}\n\n// --- Private Helper Functions ---\n\n/**\n * Gets the source node for DOM manipulation commands, prioritizing `data-template-id`\n * and falling back to `data-clone-id`.\n * @private\n * @param invoker The button element that triggered the command.\n * @returns A DocumentFragment containing the content, or null if no valid source is found.\n */\nfunction getSourceNode(invoker: HTMLButtonElement): DocumentFragment | null {\n  const templateId = invoker.dataset.templateId;\n  const cloneId = invoker.dataset.cloneId;\n\n  if (templateId) {\n    const template = document.getElementById(templateId);\n    if (!(template instanceof HTMLTemplateElement)) {\n      console.error(\n        `Invokers: Source with ID \"${templateId}\" not found or is not a <template>.`,\n        invoker,\n      );\n      return null;\n    }\n    return template.content.cloneNode(true) as DocumentFragment;\n  }\n\n  if (cloneId) {\n    const cloneSource = document.getElementById(cloneId);\n    if (!cloneSource) {\n      console.error(\n        `Invokers: Clone source with ID \"${cloneId}\" not found.`,\n        invoker,\n      );\n      return null;\n    }\n    const fragment = document.createDocumentFragment();\n    fragment.appendChild(cloneSource.cloneNode(true));\n    return fragment;\n  }\n\n  console.warn(\n    \"Invokers: DOM command requires `data-template-id` or `data-clone-id`.\",\n    invoker,\n  );\n  return null;\n}\n\n/**\n * Sets the busy state for an invoker. This provides crucial user feedback by\n * disabling the button and setting `aria-busy`, improving accessibility and\n * preventing duplicate submissions during async operations.\n * @private\n * @param invoker The button element to update.\n * @param isBusy True to set the busy state, false to clear it.\n */\nfunction setBusyState(invoker: HTMLButtonElement, isBusy: boolean): void {\n  invoker.toggleAttribute(\"disabled\", isBusy);\n  invoker.setAttribute(\"aria-busy\", String(isBusy));\n}\n\n/**\n * Renders feedback (e.g., a loading spinner or error message) into target elements.\n * Content is sourced from a `<template>` specified by an attribute on the invoker.\n * @private\n * @param invoker The button that initiated the action.\n * @param targets The elements where feedback should be displayed.\n * @param templateAttr The data attribute on the invoker holding the template's ID.\n */\nfunction showFeedbackState(\n  invoker: HTMLButtonElement,\n  targets: HTMLElement[],\n  templateAttr: \"data-loading-template\" | \"data-error-template\",\n): void {\n  const templateId = invoker.getAttribute(templateAttr);\n  if (!templateId || targets.length === 0) return;\n\n  const template = document.getElementById(templateId);\n  if (!(template instanceof HTMLTemplateElement)) {\n    console.warn(\n      `Invokers: Feedback template \"#${templateId}\" not found or is not a <template>.`,\n    );\n    return;\n  }\n\n  const content = template.content.cloneNode(true);\n  targets.forEach((target, i) => {\n    const node = i === 0 ? content : content.cloneNode(true);\n    target.replaceChildren(node);\n  });\n}\n\n/**\n * Safely parses an HTML string into a `DocumentFragment`. Crucially, this prevents\n * script execution from fetched HTML content by using `DOMParser`, which does not\n * execute `<script>` tags.\n * @private\n * @param html The string of HTML to parse.\n * @returns A `DocumentFragment` containing the sanitized DOM nodes.\n */\nfunction parseHTML(html: string): DocumentFragment {\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(html, \"text/html\");\n  const fragment = document.createDocumentFragment();\n  fragment.append(...Array.from(doc.body.childNodes));\n  return fragment;\n}\n\n/**\n * Triggers a follow-up command after a primary async command (like fetch) completes.\n * This enables chained declarative actions (e.g., fetch content, then show it).\n * It works by creating a \"synthetic\" invoker in memory, transferring `data-then-*`\n * attributes to it, and dispatching a new `command` event.\n * @private\n * @param originalInvoker The button that triggered the initial command.\n * @param primaryTargets The elements affected by the initial command.\n */\nfunction triggerFollowup(\n  originalInvoker: HTMLButtonElement,\n  primaryTargets: HTMLElement[],\n): void {\n  const followupCommand = originalInvoker.dataset.thenCommand;\n  if (!followupCommand || primaryTargets.length === 0) return;\n\n  const syntheticInvoker = document.createElement(\"button\");\n  syntheticInvoker.setAttribute(\"command\", followupCommand);\n\n  // Transfer `data-then-*` attributes to standard `data-*` attributes.\n  // e.g., `data-then-class=\"is-open\"` becomes `data-class=\"is-open\"`.\n  for (const attr in originalInvoker.dataset) {\n    if (attr.startsWith(\"then\")) {\n      const newAttrName = attr.charAt(4).toLowerCase() + attr.slice(5);\n      syntheticInvoker.dataset[newAttrName] = originalInvoker.dataset[attr];\n    }\n  }\n\n  // Set the targets for the follow-up command to the elements just updated.\n  const targetIds = primaryTargets.map((t) => t.id).filter(Boolean);\n  if (targetIds.length > 0) {\n    syntheticInvoker.setAttribute(\"aria-controls\", targetIds.join(\" \"));\n  }\n\n  // Dispatch a new `command` event from the first primary target.\n  const eventTarget = primaryTargets[0];\n  const commandEvent = new CustomEvent(\"command\", {\n    bubbles: true,\n    cancelable: true,\n    detail: { command: followupCommand, invokerElement: syntheticInvoker },\n  }) as any;\n\n  // Polyfill properties for environments where `detail` might not be sufficient.\n  commandEvent.command = followupCommand;\n  commandEvent.invokerElement = syntheticInvoker;\n\n  eventTarget.dispatchEvent(commandEvent);\n}\n\n/**\n * Collects custom HTTP headers from `data-header-*` attributes on an invoker.\n * This allows for declarative header configuration directly in HTML.\n * @private\n * @param invoker The button element with header attributes.\n * @returns A key-value object of headers suitable for the `fetch` API.\n * @example\n * <!-- <button data-header-x-request-id=\"123\" data-header-accept=\"application/json\"> -->\n * // Returns: { 'x-request-id': '123', 'accept': 'application/json' }\n */\nfunction getHeadersFromAttributes(invoker: HTMLButtonElement): HeadersInit {\n  const headers: Record<string, string> = {};\n  for (const attr in invoker.dataset) {\n    if (attr.startsWith(\"header\")) {\n      const headerName = attr\n        .substring(6)\n        .replace(/([A-Z])/g, \"-$1\")\n        .toLowerCase();\n      if (headerName) {\n        headers[headerName] = invoker.dataset[attr]!;\n      }\n    }\n  }\n  return headers;\n}\n"],
  "mappings": "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",
  "names": []
}
