{
  "version": 3,
  "sources": ["../../../src/index.ts", "../../../src/polyfill.ts", "../../../src/expression-lexer.ts", "../../../src/expression-parser.ts", "../../../src/expression-evaluator.ts", "../../../src/expression.ts", "../../../src/utils.ts", "../../../src/interpolation.ts", "../../../src/target-resolver.ts", "../../../src/invoker-commands.ts", "../../../src/interest-invokers.ts"],
  "sourcesContent": ["/**\r\n * @file index.ts\r\n * @version 1.1.0\r\n * @summary A lightweight, zero-dependency polyfill and superset for the upcoming native HTML Invoker Commands API.\r\n * @license MIT\r\n * @author Patrick Glenn\r\n * @see https://github.com/doeixd/invokers\r\n * @description\r\n * This library provides a robust polyfill for the W3C/WHATWG `command` attribute proposal\r\n * and extends it with a powerful set of custom commands (prefixed with `--`).\r\n * It features universal command chaining via the `data-and-then` attribute, allowing you\r\n * to create complex, declarative workflows in pure HTML.\r\n */\r\n\r\n// --- Polyfill Integration ---\n// Import and apply the polyfill to ensure CommandEvent and attributes are available\nimport './polyfill';\n\n// *** FIX: Internalize the extended commands to prevent module resolution issues. ***\nimport { commands as extendedCommands } from './invoker-commands';\n// Import Interest Invokers support\nimport './interest-invokers';\n// Import target resolver for advanced selectors\nimport { resolveTargets } from './target-resolver';\n// Import interpolation utilities\nimport { interpolateString } from './interpolation';\n\r\n\r\n// --- Command String Utilities ---\r\n\r\n/**\r\n * Parses a command string that uses a colon (`:`) as a delimiter, while respecting\r\n * the backslash (`\\`) as an escape character. This is used to parse the arguments\r\n * of custom library commands (e.g., `--class:toggle:is-active`).\r\n *\r\n * @param commandString The raw string from the `command` attribute.\r\n * @returns An array of command parts.\r\n * @example\r\n * parseCommandString('--class:toggle:md\\\\:grid-cols-2'); // returns ['--class', 'toggle', 'md:grid-cols-2']\r\n */\r\nexport function parseCommandString(commandString: string): string[] {\r\n  const parts: string[] = [];\r\n  let currentPart = \"\";\r\n  let i = 0;\r\n  while (i < commandString.length) {\r\n    const char = commandString[i];\r\n    if (char === \"\\\\\") {\r\n      currentPart += commandString[i + 1] ?? \"\";\r\n      i += 2;\r\n    } else if (char === \":\") {\r\n      parts.push(currentPart);\r\n      currentPart = \"\";\r\n      i++;\r\n    } else {\r\n      currentPart += char;\r\n      i++;\r\n    }\r\n  }\r\n  parts.push(currentPart);\r\n  return parts;\r\n}\r\n\r\n/**\r\n * Programmatically creates a valid, spec-compliant command string from an array of parts.\r\n * It ensures the first part is prefixed with `--` if it isn't already.\r\n *\r\n * @param parts The parts of the command to join.\r\n * @returns A single, correctly formatted command string.\r\n * @example\r\n * createCommandString('class', 'toggle', 'is-active'); // returns '--class:toggle:is-active'\r\n */\r\nexport function createCommandString(...parts: string[]): string {\r\n  if (parts.length > 0 && !parts[0].startsWith('--')) {\r\n    parts[0] = `--${parts[0]}`;\r\n  }\r\n  return parts\n    .map((part) => part.replace(/\\\\/g, \"\\\\\\\\\").replace(/:/g, \"\\\\:\"))\n    .join(\":\");\n}\n\n/**\n * Centralized helper to dispatch a CommandEvent to a target element.\n * This encapsulates the CommandEvent creation and dispatch for consistency.\n * Used by the core polyfill and advanced event features.\n *\n * @param source The source element that triggered the command\n * @param command The command string to dispatch\n * @param targetElement The target element to receive the command\n * @param triggeringEvent The original DOM event that initiated this command (optional)\n */\nexport function _dispatchCommandEvent(source: HTMLElement, command: string, targetElement: HTMLElement, triggeringEvent?: Event): void {\n  // Create the CommandEvent with the triggering event attached\n  const commandEvent = new (window as any).CommandEvent(\"command\", {\n    command,\n    source,\n    cancelable: true,\n    bubbles: true,\n    composed: true,\n  });\n\n  // Attach the triggering event for advanced features\n  if (triggeringEvent) {\n    (commandEvent as any).triggeringEvent = triggeringEvent;\n  }\n\n  targetElement.dispatchEvent(commandEvent);\n}\n\n// --- Error Handling & Debugging ---\n\r\n/**\r\n * Development mode flag - can be set via window.Invoker.debug = true\r\n */\r\nexport let isDebugMode = false;\r\n\r\n/**\r\n * Error severity levels for better debugging\r\n */\r\nexport enum ErrorSeverity {\r\n  WARNING = 'warning',\r\n  ERROR = 'error',\r\n  CRITICAL = 'critical'\r\n}\r\n\r\n/**\r\n * Enhanced error information for debugging\r\n */\r\nexport interface InvokerError extends Error {\n  severity: ErrorSeverity;\n  element?: HTMLElement;\n  command?: string;\n  context?: any;\n  recovery?: string;\n  cause?: Error;\n}\n\r\n/**\r\n * Creates a detailed error with debugging information\r\n */\r\nexport function createInvokerError(\r\n  message: string,\r\n  severity: ErrorSeverity = ErrorSeverity.ERROR,\r\n  options: {\r\n    element?: HTMLElement;\r\n    command?: string;\r\n    context?: any;\r\n    recovery?: string;\r\n    cause?: Error;\r\n  } = {}\r\n): InvokerError {\r\n  const error = new Error(message) as InvokerError;\r\n  error.severity = severity;\r\n  error.element = options.element;\r\n  error.command = options.command;\r\n  error.context = options.context;\r\n  error.recovery = options.recovery;\r\n  if (options.cause) {\r\n    error.cause = options.cause;\r\n  }\r\n  return error;\r\n}\r\n\r\n/**\r\n * Logs errors with appropriate severity and debugging information\r\n */\r\nexport function logInvokerError(error: InvokerError | Error, prefix = 'Invokers'): void {\r\n  const isInvokerError = 'severity' in error;\r\n  const severity = isInvokerError ? (error as InvokerError).severity : ErrorSeverity.ERROR;\r\n\r\n  const logMethod = severity === ErrorSeverity.CRITICAL ? 'error'\r\n    : severity === ErrorSeverity.ERROR ? 'error'\r\n      : 'warn';\r\n\r\n  if (isDebugMode || severity === ErrorSeverity.CRITICAL) {\r\n    console.group(`${prefix}: ${error.message}`);\r\n    console[logMethod]('Error:', error);\r\n\r\n    if (isInvokerError) {\r\n      const invokerError = error as InvokerError;\r\n      if (invokerError.element) {\r\n        console.log('Element:', invokerError.element);\r\n      }\r\n      if (invokerError.command) {\r\n        console.log('Command:', invokerError.command);\r\n      }\r\n      if (invokerError.context) {\r\n        console.log('Context:', invokerError.context);\r\n      }\r\n      if (invokerError.recovery) {\r\n        console.log('Suggested fix:', invokerError.recovery);\r\n      }\r\n    }\r\n    console.groupEnd();\r\n  } else {\r\n    console[logMethod](`${prefix}: ${error.message}`, isInvokerError ? (error as InvokerError).element : undefined);\r\n  }\r\n}\r\n\r\n/**\r\n * Validates that an element exists and has the required attributes\r\n */\r\nexport function validateElement(element: HTMLElement | null, requirements: {\r\n  id?: boolean;\r\n  tagName?: string[];\r\n  attributes?: string[];\r\n}): string[] {\r\n  const errors: string[] = [];\r\n\r\n  if (!element) {\r\n    errors.push('Element not found');\r\n    return errors;\r\n  }\r\n\r\n  if (requirements.id && !element.id) {\r\n    errors.push('Element missing required id attribute');\r\n  }\r\n\r\n  if (requirements.tagName && !requirements.tagName.includes(element.tagName.toLowerCase())) {\r\n    errors.push(`Element must be one of: ${requirements.tagName.join(', ')}, got: ${element.tagName.toLowerCase()}`);\r\n  }\r\n\r\n  if (requirements.attributes) {\r\n    for (const attr of requirements.attributes) {\r\n      if (!element.hasAttribute(attr)) {\r\n        errors.push(`Element missing required attribute: ${attr}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\n/**\r\n * Sanitizes command parameters to prevent injection attacks\r\n */\r\nexport function sanitizeParams(params: readonly string[]): string[] {\r\n  return params.map(param => {\r\n    if (typeof param !== 'string') {\r\n      return String(param);\r\n    }\r\n\r\n    // Remove potentially dangerous content\r\n  let sanitized = param\n    .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '') // Remove script tags\n    .replace(/javascript:/gi, '') // Remove javascript: URLs\n    .replace(/data:text\\/html/gi, '') // Remove data URLs that could contain HTML\n    .replace(/vbscript:/gi, '') // Remove VBScript URLs\n    .replace(/on\\w+\\s*=/gi, '') // Remove event handlers\n    .replace(/expression\\s*\\(/gi, '') // Remove CSS expressions\n\r\n    // Additional validation for URLs\r\n    if (param.includes('://') || param.startsWith('//')) {\r\n      try {\r\n        const url = new URL(param, window.location.href);\r\n        if (!['http:', 'https:', 'ftp:', 'mailto:'].includes(url.protocol)) {\r\n          console.warn(`Invokers: Potentially unsafe URL protocol \"${url.protocol}\" detected and removed`);\r\n          return '';\r\n        }\r\n      } catch (e) {\r\n        // If URL parsing fails, it might be malformed - safer to remove\r\n        console.warn('Invokers: Malformed URL detected and removed:', param);\r\n        return '';\r\n      }\r\n    }\r\n\r\n    return sanitized;\r\n  });\r\n}\r\n\r\n/**\r\n * Validates and sanitizes HTML content before DOM injection\r\n */\r\n/**\n * Checks if advanced interpolation features are enabled.\n */\nexport function isInterpolationEnabled(): boolean {\n  return InvokerManager._interpolationEnabled;\n}\n\nexport function sanitizeHTML(html: string): string {\r\n  if (!html || typeof html !== 'string') {\r\n    return '';\r\n  }\r\n\r\n  // Create a temporary element to parse and sanitize HTML\r\n  const temp = document.createElement('div');\r\n  temp.innerHTML = html;\r\n\r\n  // Remove dangerous elements\r\n  const dangerousElements = temp.querySelectorAll('script, object, embed, iframe, frame, meta, link[rel=\"import\"]');\r\n  dangerousElements.forEach(el => el.remove());\r\n\r\n  // Remove dangerous attributes from all elements\r\n  const allElements = temp.querySelectorAll('*');\r\n  allElements.forEach(el => {\r\n    // Remove event handler attributes\r\n    Array.from(el.attributes).forEach(attr => {\r\n      if (attr.name.startsWith('on') ||\r\n        attr.value.includes('javascript:') ||\r\n        attr.value.includes('vbscript:') ||\r\n        attr.value.includes('data:text/html')) {\r\n        el.removeAttribute(attr.name);\r\n      }\r\n    });\r\n  });\r\n\r\n  return temp.innerHTML;\r\n}\r\n\r\n/**\r\n * Rate limiting for command execution\r\n */\r\nexport class RateLimiter {\r\n  private executions: Map<string, number[]> = new Map();\r\n  private readonly windowMs: number;\r\n  private readonly maxExecutions: number;\r\n\r\n  constructor(windowMs = 1000, maxExecutions = 50) {\r\n    this.windowMs = windowMs;\r\n    this.maxExecutions = maxExecutions;\r\n  }\r\n\r\n  checkLimit(key: string): boolean {\r\n    const now = Date.now();\r\n    const executions = this.executions.get(key) || [];\r\n\r\n    // Remove old executions outside the window\r\n    const validExecutions = executions.filter(time => now - time < this.windowMs);\r\n\r\n    if (validExecutions.length >= this.maxExecutions) {\r\n      return false; // Rate limit exceeded\r\n    }\r\n\r\n    validExecutions.push(now);\r\n    this.executions.set(key, validExecutions);\r\n    return true;\r\n  }\r\n\r\n  reset(key?: string): void {\r\n    if (key) {\r\n      this.executions.delete(key);\r\n    } else {\r\n      this.executions.clear();\r\n    }\r\n  }\r\n}\r\n\r\n// --- Core Type Definitions ---\r\n\r\n/**\n * The context object passed to every custom library command's callback function.\n * It provides a rich, type-safe API for interacting with the invoker and its target,\n * built upon the standard `CommandEvent`.\n */\nexport interface CommandContext {\n  /** The `<button>` element that was invoked (`event.source`). */\n  readonly invoker: HTMLButtonElement;\n  /** The element that received the command event (`event.target`). This is the target specified by `commandfor`. */\n  readonly targetElement: HTMLElement;\n  /** The full command string that was invoked (e.g., `--class:toggle:is-active`). */\n  readonly fullCommand: string;\n  /** The original DOM event that triggered the command (for advanced event features). */\n  readonly triggeringEvent?: Event;\n  /**\n   * An array of string parameters that follow the matched command prefix.\n   * For a `command=\"--class:toggle:is-active\"` and a registered command named `--class`,\n   * the `params` array will be `['toggle', 'is-active']`.\n   */\n  readonly params: readonly string[];\n  /**\n   * Retrieves the target elements controlled by the invoker. This is primarily for legacy\n   * or multi-target scenarios. It prioritizes the spec-compliant `commandfor` attribute,\n   * then falls back to `aria-controls` and `data-target`.\n   * @returns An array of `HTMLElement`s.\n   */\n  getTargets: () => HTMLElement[];\n  /**\n   * Automatically updates the invoker's `aria-expanded` and `aria-pressed` attributes\n   * based on the visibility state of the provided target elements.\n   * @param targets The target elements whose state determines the ARIA update.\n   */\n  updateAriaState: (targets: HTMLElement[]) => void;\n  /**\n   * Manages the active state for a group of related invokers (e.g., in a tab group).\n   * Deactivates other invokers within the same \"widget group\" when a new one is activated.\n   */\n  manageGroupState: () => void;\n  /**\n   * Execute a follow-up command after the current command completes.\n   * @param command The command string to execute next\n   * @param target Optional target element ID (defaults to current target)\n   * @param state Optional command state to set\n   */\n  executeAfter: (command: string, target?: string, state?: CommandState) => void;\n  /**\n   * Execute different commands based on success/error state.\n   * @param options Configuration object with onSuccess, onError, and onComplete command arrays\n   */\n  executeConditional: (options: ConditionalCommands) => void;\n}\n\n/**\n * Middleware hook points in the command execution lifecycle.\n */\nexport enum HookPoint {\n  BEFORE_COMMAND = 'beforeCommand',\n  AFTER_COMMAND = 'afterCommand',\n  BEFORE_VALIDATION = 'beforeValidation',\n  AFTER_VALIDATION = 'afterValidation',\n  ON_SUCCESS = 'onSuccess',\n  ON_ERROR = 'onError',\n  ON_COMPLETE = 'onComplete'\n}\n\n  /**\n   * Middleware function signature.\n   */\n  export type MiddlewareFunction = (context: CommandContext & { result?: CommandExecutionResult }, hookPoint: HookPoint) => void | Promise<void>;\n\n/**\n * Plugin interface for extending Invokers functionality.\n */\nexport interface InvokerPlugin {\n  name: string;\n  version?: string;\n  description?: string;\n\n  /**\n   * Called when the plugin is registered.\n   */\n  onRegister?(manager: InvokerManager): void;\n\n  /**\n   * Called when the plugin is unregistered.\n   */\n  onUnregister?(manager: InvokerManager): void;\n\n  /**\n   * Middleware functions for different hook points.\n   */\n  middleware?: Partial<Record<HookPoint, MiddlewareFunction>>;\n}\n\r\n/**\r\n * The function signature for a custom library command's implementation logic.\r\n * Callbacks can now be synchronous (return void) or asynchronous (return a Promise).\r\n * The library will await the result before proceeding with any chained commands.\r\n */\r\nexport type CommandCallback = (context: CommandContext) => void | Promise<void>;\r\n\r\n/**\r\n * Command execution result for conditional chaining.\r\n */\r\nexport interface CommandExecutionResult {\r\n  success: boolean;\r\n  error?: Error;\r\n  data?: any;\r\n}\r\n\r\n/**\r\n * Command lifecycle states.\r\n */\r\nexport type CommandState = 'active' | 'completed' | 'disabled' | 'once';\r\n\r\n/**\r\n * Conditional commands configuration.\r\n */\r\nexport interface ConditionalCommands {\r\n  onSuccess?: string[];\r\n  onError?: string[];\r\n  onComplete?: string[];\r\n}\r\n\r\n/**\r\n * Pipeline step configuration for template-based command pipelines.\r\n */\r\nexport interface PipelineStep {\r\n  command: string;\r\n  target: string;\r\n  condition?: 'success' | 'error' | 'always';\r\n  once?: boolean;\r\n  delay?: number;\r\n  data?: Record<string, string>;\r\n}\r\n\r\n// --- Global Type Augmentations ---\n\ndeclare global {\n  // The polyfill ensures these types exist. We declare them here for TypeScript's benefit.\n  interface CommandEvent extends Event {\n    readonly command: string;\n    readonly source: HTMLButtonElement | null;\n    readonly triggeringEvent?: Event;\n  }\n  interface HTMLButtonElement {\n    commandForElement: Element | null;\n    command: string;\n  }\n  interface Window {\n    Invoker: {\n      register: (name: string, callback: CommandCallback) => void;\n      executeCommand: (command: string, targetId: string, invoker?: HTMLButtonElement) => Promise<void>;\n      parseCommandString: typeof parseCommandString;\n      createCommandString: typeof createCommandString;\n      instance: InvokerManager;\n      HookPoint: typeof HookPoint;\n      reset: () => void;\n    };\n  }\n}\n\n// --- List of native command keywords from the W3C/WHATWG proposal ---\nconst NATIVE_COMMAND_KEYWORDS = new Set([\r\n  'show-modal',\r\n  'close',\r\n  'request-close',\r\n  'show-popover',\r\n  'hide-popover',\r\n  'toggle-popover',\r\n]);\r\n\r\n// --- Performance Monitoring ---\r\n\r\n/**\r\n * Monitors command execution performance and prevents abuse\r\n */\r\nclass PerformanceMonitor {\r\n  private executionTimes: number[] = [];\n  private readonly monitoringWindow = 1000; // 1 second\n\r\n  recordExecution(): boolean {\r\n    const now = Date.now();\r\n\r\n    // Remove old entries outside the monitoring window\r\n    this.executionTimes = this.executionTimes.filter(time => now - time < this.monitoringWindow);\r\n\r\n    // Check if we're exceeding limits\n    // if (this.executionTimes.length >= this.maxExecutionsPerSecond) {\n    //   const error = createInvokerError(\n    //     `Too many command executions (${this.executionTimes.length}/second). Possible infinite loop detected.`,\n    //     ErrorSeverity.CRITICAL,\n    //     {\n    //       recovery: 'Check for recursive command chains or remove data-and-then attributes causing loops'\n    //     }\n    //   );\n    //   logInvokerError(error);\n    //   return false;\n    // }\n\r\n    this.executionTimes.push(now);\r\n    return true;\r\n  }\r\n\r\n  getStats(): { executionsLastSecond: number; averageInterval: number } {\r\n    const now = Date.now();\r\n    const recentExecutions = this.executionTimes.filter(time => now - time < this.monitoringWindow);\r\n    const intervals = recentExecutions.slice(1).map((time, i) => time - recentExecutions[i]);\r\n    const averageInterval = intervals.length > 0 ? intervals.reduce((a, b) => a + b, 0) / intervals.length : 0;\r\n\r\n    return {\r\n      executionsLastSecond: recentExecutions.length,\r\n      averageInterval\r\n    };\r\n  }\r\n}\r\n\r\n// --- The Main Invoker Class ---\r\n\r\n/**\r\n * Manages the registration and execution of all custom `--` prefixed commands.\r\n * This class listens for the standard `CommandEvent` and routes recognized custom\r\n * commands to their registered JavaScript handlers with comprehensive error handling.\r\n */\r\n\r\nexport class InvokerManager {\n  // --- Singleton Implementation ---\n  private static _instance: InvokerManager;\n\n  private readonly commands = new Map<string, CommandCallback>();\n  private sortedCommandKeys: string[] = [];\n  private commandStates = new Map<string, CommandState>();\n  private andThenManager: AndThenManager;\n  private pipelineManager: PipelineManager;\n  private readonly performanceMonitor = new PerformanceMonitor();\n\n  // --- Plugin/Middleware System ---\n  private plugins = new Map<string, InvokerPlugin>();\n  private middleware = new Map<HookPoint, MiddlewareFunction[]>();\n\n  // --- Advanced Event Features ---\n  public static _interpolationEnabled = false;\n\n   // The constructor is now private to enforce the singleton pattern.\n   private constructor() {\n     this.andThenManager = new AndThenManager(this);\n     this.pipelineManager = new PipelineManager(this);\n\n     // Initialize for both browser and test environments\n     if (typeof window !== \"undefined\" && typeof document !== \"undefined\") {\n       this.registerCoreLibraryCommands();\n       this.registerExtendedCommands();\n       // Only add listeners if they haven't been added yet\n       if (!(window as any).__invokerListenersAdded) {\n         this.listen();\n         (window as any).__invokerListenersAdded = true;\n       }\n         // Set up global Invoker API\n         if (!window.Invoker) {\n           window.Invoker = {\n             register: this.register.bind(this),\n             executeCommand: this.executeCommand.bind(this),\n             registerPlugin: this.registerPlugin.bind(this),\n             unregisterPlugin: this.unregisterPlugin.bind(this),\n             registerMiddleware: this.registerMiddleware.bind(this),\n             hasPlugin: this.hasPlugin.bind(this),\n             getRegisteredPlugins: this.getRegisteredPlugins.bind(this),\n             parseCommandString,\n             createCommandString,\n             instance: this,\n             HookPoint,\n             reset: this.reset.bind(this)\n           };\n         }\n     } else if (typeof global !== \"undefined\" && (global as any).window && (global as any).document) {\n       // Test environment with jsdom\n       this.registerCoreLibraryCommands();\n       this.registerExtendedCommands();\n       if (!(global as any).__invokerListenersAdded) {\n         this.listen();\n         (global as any).__invokerListenersAdded = true;\n       }\n     }\n   }\n\n  /**\n   * Gets the single, authoritative instance of the InvokerManager.\n   */\n  public static getInstance(): InvokerManager {\n    if (!InvokerManager._instance) {\n      InvokerManager._instance = new InvokerManager();\n    }\n    return InvokerManager._instance;\n  }\n\n  /**\n   * Enables interpolation features for advanced event handling.\n   * Internal method called by enableAdvancedEvents().\n   */\n  public _enableInterpolation(): void {\n    InvokerManager._interpolationEnabled = true;\n  }\n\n  /**\n   * Resets the InvokerManager to its initial state, clearing advanced features.\n   */\n  public reset(): void {\n    InvokerManager._interpolationEnabled = false;\n    if (typeof window !== 'undefined' && window.Invoker) {\n      (window as any).Invoker.interpolateString = undefined;\n      (window as any).Invoker.generateUid = undefined;\n      (window as any).Invoker.getInterpolationUtility = undefined;\n    }\n    console.log(\"Invokers: Reset complete.\");\n  }\n\n  /**\n   * Safely attempts to interpolate a template string with context data.\n   * Only performs interpolation if advanced features are enabled.\n   *\n   * @param template The template string that may contain {{...}} placeholders\n   * @param context The context object for interpolation\n   * @returns The interpolated string, or the original template if interpolation is disabled\n   */\n  private _tryInterpolate(template: string, context: Record<string, any>): string {\n    if (InvokerManager._interpolationEnabled && typeof window !== 'undefined' && (window as any).Invoker?.getInterpolationUtility) {\n      const interpolate = (window as any).Invoker.getInterpolationUtility();\n      return interpolate(template, context);\n    }\n    return template;\n  }\n\n  /**\n   * Programmatically executes a command on a target element with comprehensive validation.\n   * This is useful for chaining commands without dispatching events.\r\n   *\r\n   * @param command The command string to execute.\r\n   * @param targetId The ID of the target element.\r\n   * @param source Optional source element (for context).\r\n   */\r\n  public async executeCommand(command: string, targetId: string, source?: HTMLElement): Promise<void> {\r\n    // Performance check\r\n    if (!this.performanceMonitor.recordExecution()) {\r\n      return; // Abort if too many executions\r\n    }\r\n\r\n    // Validate inputs\r\n    if (!command || typeof command !== 'string') {\r\n      const error = createInvokerError(\r\n        'Command must be a non-empty string',\r\n        ErrorSeverity.ERROR,\r\n        {\r\n          command,\r\n          recovery: 'Provide a valid command string like \"--toggle\" or \"show-modal\"'\r\n        }\r\n      );\r\n      logInvokerError(error);\r\n      return;\r\n    }\r\n\r\n    if (!targetId || typeof targetId !== 'string') {\r\n      const error = createInvokerError(\r\n        'Target ID must be a non-empty string',\r\n        ErrorSeverity.ERROR,\r\n        {\r\n          command,\r\n          context: { targetId },\r\n          recovery: 'Provide a valid element ID that exists in the DOM'\r\n        }\r\n      );\r\n      logInvokerError(error);\r\n      return;\r\n    }\r\n\r\n      // Find target element using resolveTargets (supports complex selectors)\n      const targets = resolveTargets(targetId, source || document.body);\n      if (targets.length === 0) {\n       const allIds = Array.from(document.querySelectorAll('[id]')).map(el => el.id).filter(Boolean);\n       const suggestions = allIds.filter(id => id.includes(targetId.toLowerCase()) || targetId.includes(id.toLowerCase()));\n\n       const error = createInvokerError(\n         `Target element with selector \"${targetId}\" not found`,\n         ErrorSeverity.ERROR,\n         {\n           command,\n           element: source,\n           context: {\n             targetId,\n            availableIds: allIds.slice(0, 10), // Show first 10 IDs\n            suggestions: suggestions.slice(0, 3) // Show up to 3 suggestions\n          },\n          recovery: suggestions.length > 0\n            ? `Did you mean: ${suggestions.slice(0, 3).join(', ')}?`\n            : 'Check that the target element exists and has the correct selector'\n        }\n      );\n      logInvokerError(error);\n      return;\n    }\n\n    const targetElement = targets[0];\n\r\n    try {\r\n      const mockEvent = {\r\n        command,\r\n        source: source || null,\r\n        target: targetElement,\r\n        preventDefault: () => { },\r\n        type: 'command'\r\n      } as any;\r\n\r\n      await this.executeCustomCommand(command, mockEvent);\r\n    } catch (error) {\r\n      const invokerError = createInvokerError(\r\n        `Failed to execute command \"${command}\" on element \"${targetId}\"`,\r\n        ErrorSeverity.ERROR,\r\n        {\r\n          command,\r\n           element: source || (targetElement as HTMLElement),\n          cause: error as Error,\r\n          recovery: 'Check the command syntax and ensure the target element supports this operation'\r\n        }\r\n      );\r\n      logInvokerError(invokerError);\r\n    }\n  }\n\n  /**\n   * Registers the internalized extended commands onto this instance.\n   */\n  public registerExtendedCommands(): void {\n    for (const name in extendedCommands) {\n      if (Object.prototype.hasOwnProperty.call(extendedCommands, name)) {\n        this.register(name, extendedCommands[name]);\n      }\n    }\n  }\n\n  /**\n   * Registers a plugin with middleware and lifecycle hooks.\n   */\n  public registerPlugin(plugin: InvokerPlugin): void {\n    if (this.plugins.has(plugin.name)) {\n      console.warn(`Invokers: Plugin \"${plugin.name}\" is already registered`);\n      return;\n    }\n\n    this.plugins.set(plugin.name, plugin);\n\n    // Register middleware functions\n    if (plugin.middleware) {\n      for (const [hookPoint, middlewareFn] of Object.entries(plugin.middleware)) {\n        if (middlewareFn) {\n          this.registerMiddleware(hookPoint as HookPoint, middlewareFn);\n        }\n      }\n    }\n\n    // Call plugin's onRegister hook\n    if (plugin.onRegister) {\n      try {\n        plugin.onRegister(this);\n      } catch (error) {\n        console.error(`Invokers: Error in plugin \"${plugin.name}\" onRegister:`, error);\n      }\n    }\n\n    if (isDebugMode) {\n      console.log(`Invokers: Plugin \"${plugin.name}\" registered successfully`);\n    }\n  }\n\n  /**\n   * Unregisters a plugin.\n   */\n  public unregisterPlugin(pluginName: string): void {\n    const plugin = this.plugins.get(pluginName);\n    if (!plugin) {\n      console.warn(`Invokers: Plugin \"${pluginName}\" is not registered`);\n      return;\n    }\n\n    // Call plugin's onUnregister hook\n    if (plugin.onUnregister) {\n      try {\n        plugin.onUnregister(this);\n      } catch (error) {\n        console.error(`Invokers: Error in plugin \"${pluginName}\" onUnregister:`, error);\n      }\n    }\n\n    // Remove middleware functions\n    if (plugin.middleware) {\n      for (const hookPoint of Object.keys(plugin.middleware) as HookPoint[]) {\n        this.unregisterMiddleware(hookPoint, plugin.middleware[hookPoint]!);\n      }\n    }\n\n    this.plugins.delete(pluginName);\n\n    if (isDebugMode) {\n      console.log(`Invokers: Plugin \"${pluginName}\" unregistered successfully`);\n    }\n  }\n\n  /**\n   * Registers a middleware function for a specific hook point.\n   */\n  public registerMiddleware(hookPoint: HookPoint, middleware: MiddlewareFunction): void {\n    if (!this.middleware.has(hookPoint)) {\n      this.middleware.set(hookPoint, []);\n    }\n    this.middleware.get(hookPoint)!.push(middleware);\n  }\n\n  /**\n    * Unregisters a middleware function from a specific hook point.\n    */\n   public unregisterMiddleware(hookPoint: HookPoint, middleware: MiddlewareFunction): void {\n     const middlewareList = this.middleware.get(hookPoint);\n     if (middlewareList) {\n       const index = middlewareList.indexOf(middleware);\n       if (index > -1) {\n         middlewareList.splice(index, 1);\n       }\n     }\n   }\n\n  /**\n    * Checks if a plugin is currently registered.\n    */\n   public hasPlugin(pluginName: string): boolean {\n     return this.plugins.has(pluginName);\n   }\n\n  /**\n    * Gets a list of all registered plugin names.\n    */\n   public getRegisteredPlugins(): string[] {\n     return Array.from(this.plugins.keys());\n   }\n\n  /**\n   * Executes all middleware for a given hook point.\n   */\n  private async executeMiddleware(hookPoint: HookPoint, context: CommandContext & { result?: CommandExecutionResult }, allowErrors: boolean = false): Promise<void> {\n    const middlewareList = this.middleware.get(hookPoint);\n    if (!middlewareList || middlewareList.length === 0) {\n      return;\n    }\n\n    for (const middleware of middlewareList) {\n      try {\n        await Promise.resolve(middleware(context, hookPoint));\n      } catch (error) {\n        if (allowErrors) {\n          // For validation/pre-command middleware, errors should propagate\n          throw error;\n        } else {\n          console.error(`Invokers: Middleware error at ${hookPoint}:`, error);\n          // Continue with other middleware even if one fails\n        }\n      }\n    }\n  }\n\n  /**\n   * Registers a new custom command with comprehensive validation.\n   * All commands must start with `--` to be valid.\n   *\n   * @param name The unique name of the command (e.g., `'--class'` or `'class'`).\n   * @param callback The function to execute for this command.\n   */\n  public register(name: string, callback: CommandCallback): void {\n    // Validate inputs\r\n    if (!name || typeof name !== 'string') {\r\n      const error = createInvokerError(\r\n        'Command name must be a non-empty string',\r\n        ErrorSeverity.ERROR,\r\n        {\r\n          context: { name },\r\n          recovery: 'Provide a valid command name like \"--my-command\"'\r\n        }\r\n      );\r\n      logInvokerError(error);\r\n      return;\r\n    }\r\n\r\n    if (!callback || typeof callback !== 'function') {\r\n      const error = createInvokerError(\r\n        `Command callback for \"${name}\" must be a function`,\r\n        ErrorSeverity.ERROR,\r\n        {\r\n          command: name,\r\n          context: { callback },\r\n          recovery: 'Provide a function that accepts a CommandContext parameter'\r\n        }\r\n      );\r\n      logInvokerError(error);\r\n      return;\r\n    }\r\n\r\n    // Validate command name format\r\n    const trimmedName = name.trim();\r\n    if (trimmedName.length === 0) {\r\n      const error = createInvokerError(\r\n        'Command name cannot be empty or whitespace only',\r\n        ErrorSeverity.ERROR,\r\n        {\r\n          recovery: 'Provide a meaningful command name like \"--toggle\" or \"--fetch\"'\r\n        }\r\n      );\r\n      logInvokerError(error);\r\n      return;\r\n    }\r\n\r\n    // Handle prefix normalization\r\n    let normalizedName = trimmedName;\r\n    if (!normalizedName.startsWith('--')) {\r\n      normalizedName = `--${normalizedName}`;\r\n      if (isDebugMode) {\r\n        console.warn(`Invokers: Command \"${trimmedName}\" registered without '--' prefix. Automatically registered as \"${normalizedName}\".`);\r\n      }\r\n    }\r\n\r\n    // Validate against reserved native commands\r\n    if (NATIVE_COMMAND_KEYWORDS.has(normalizedName.slice(2))) {\r\n      const error = createInvokerError(\r\n        `Cannot register custom command \"${normalizedName}\" - conflicts with native command \"${normalizedName.slice(2)}\"`,\r\n        ErrorSeverity.ERROR,\r\n        {\r\n          command: normalizedName,\r\n          recovery: 'Choose a different command name that doesn\\'t conflict with native commands'\r\n        }\r\n      );\r\n      logInvokerError(error);\r\n      return;\r\n    }\r\n\r\n    // Check for overwrites\r\n    if (this.commands.has(normalizedName)) {\r\n      const error = createInvokerError(\r\n        `Command \"${normalizedName}\" is already registered and will be overwritten`,\r\n        ErrorSeverity.WARNING,\r\n        {\r\n          command: normalizedName,\r\n          recovery: 'Use a different command name or ensure this overwrite is intentional'\r\n        }\r\n      );\r\n      logInvokerError(error);\r\n    }\r\n\r\n    try {\r\n      this.commands.set(normalizedName, callback);\r\n      this.sortedCommandKeys = Array.from(this.commands.keys()).sort((a, b) => b.length - a.length);\r\n\r\n      if (isDebugMode) {\r\n        console.log(`Invokers: Successfully registered command \"${normalizedName}\"`);\r\n      }\r\n    } catch (error) {\r\n      const invokerError = createInvokerError(\r\n        `Failed to register command \"${normalizedName}\"`,\r\n        ErrorSeverity.CRITICAL,\r\n        {\r\n          command: normalizedName,\r\n          cause: error as Error,\r\n          recovery: 'Check that the callback function is valid and the command name is unique'\r\n        }\r\n      );\r\n      logInvokerError(invokerError);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles incoming `CommandEvent`s. This is now an async method to allow\r\n   * for awaiting the full command chain.\r\n   */\r\n  public async handleCommand(event: CommandEvent): Promise<void> {\r\n    const commandStr = event.command;\r\n\r\n    if (commandStr.startsWith('--')) {\r\n      await this.executeCustomCommand(commandStr, event);\r\n    } else if (!NATIVE_COMMAND_KEYWORDS.has(commandStr) && commandStr !== \"\") {\r\n      // Backwards Compatibility: Handle old, non-prefixed library commands.\r\n      console.warn(`Invokers (Compatibility): Non-spec-compliant command \"${commandStr}\" detected. Please update your HTML to use '--${commandStr}' for future compatibility. Attempting to handle...`);\r\n      await this.executeCustomCommand(`--${commandStr}`, event);\r\n    }\r\n    // Native commands ('show-modal', etc.) are ignored and handled by the polyfill/browser.\r\n  }\r\n\r\n  /**\n   * Executes a custom command and then triggers a follow-up command if specified.\n   * This is the new heart of the chaining mechanism with enhanced lifecycle support.\n   */\n  private async executeCustomCommand(commandStr: string, event: CommandEvent): Promise<void> {\n    // Validate command string\n    if (!commandStr || typeof commandStr !== 'string') {\n      const error = createInvokerError(\n        'Invalid command string provided',\n        ErrorSeverity.ERROR,\n        {\n          command: commandStr,\n          element: event.source as HTMLElement,\n          recovery: 'Ensure the command attribute contains a valid command string'\n        }\n      );\n      logInvokerError(error);\n      return;\n    }\n\n    // Performance monitoring\n    if (!this.performanceMonitor.recordExecution()) {\n      return; // Abort if too many executions\n    }\n\n    let commandFound = false;\r\n    for (const registeredCommand of this.sortedCommandKeys) {\r\n      if (commandStr.startsWith(registeredCommand) && (commandStr.length === registeredCommand.length || commandStr[registeredCommand.length] === \":\")) {\r\n        commandFound = true;\r\n        const callback = this.commands.get(registeredCommand);\r\n\r\n        if (!callback) {\r\n          const error = createInvokerError(\r\n            `Command \"${registeredCommand}\" is registered but callback is missing`,\r\n            ErrorSeverity.CRITICAL,\r\n            {\r\n              command: commandStr,\r\n              element: event.source as HTMLElement,\r\n              recovery: 'This is an internal error. Please report this issue.'\r\n            }\r\n          );\r\n          logInvokerError(error);\r\n          return;\r\n        }\r\n\r\n        try {\n          event.preventDefault(); // Stop default polyfill/browser action\n\n          // Create base interpolation context for the current command\n          const interpolationContext = {\n            event: (event as any).triggeringEvent, // The original DOM event\n            this: event.source, // The invoker element itself\n            target: event.target, // The command target element\n            detail: ((event as any).triggeringEvent as CustomEvent)?.detail, // Detail from CustomEvent\n          };\n\n          // The command string from the attribute might contain {{...}} from external triggers\n          // We interpolate the current command before finding its callback\n          const interpolatedCommandStr = this._tryInterpolate(commandStr, interpolationContext);\n\n           const params = parseCommandString(interpolatedCommandStr.substring(registeredCommand.length + 1));\n           const sanitizedParams = sanitizeParams(params);\n           const context = this.createContext(event, interpolatedCommandStr, sanitizedParams);\n           const invoker = event.source as HTMLButtonElement;\n\n           // For multi-target commands, execute on each target\n           const targets = context.getTargets();\n           if (targets.length === 0) {\n             const error = createInvokerError(\n               'No target elements found for command execution',\n               ErrorSeverity.WARNING,\n               {\n                 command: commandStr,\n                 element: invoker,\n                 recovery: 'Ensure commandfor, aria-controls, or data-target points to valid elements'\n               }\n             );\n             logInvokerError(error);\n             return;\n           }\n\n           // Execute command on each target\n           for (const target of targets) {\n             // Create target-specific context\n             const targetContext = {\n               ...context,\n               targetElement: target\n             };\n\n             // Execute BEFORE_COMMAND middleware (early, with full context)\n             await this.executeMiddleware(HookPoint.BEFORE_COMMAND, targetContext, true);\n\n             // Execute BEFORE_VALIDATION middleware\n             await this.executeMiddleware(HookPoint.BEFORE_VALIDATION, targetContext, true);\n\n             // Check command state before execution\n             const commandKey = `${commandStr}:${target.id}`;\n             let currentState = this.commandStates.get(commandKey) || 'active';\n\n             // Check if state is specified on the invoker (if it exists)\n             if (invoker) {\n               const invokerState = (invoker.dataset.state as CommandState) || (invoker.getAttribute('data-state') as CommandState);\n               if (invokerState) {\n                 // If the state was already set in commandStates and is 'completed', don't override\n                 if (!(this.commandStates.has(commandKey) && this.commandStates.get(commandKey) === 'completed')) {\n                   currentState = invokerState;\n                 }\n               }\n             }\n\n             // For chained commands (null invoker), check if the command should be prevented\n             if (currentState === 'disabled' || currentState === 'completed') {\n               continue; // Skip this target\n             }\n\n             let executionResult: CommandExecutionResult = { success: true };\n\n             try {\n               // Validate context before execution\n               const validationErrors = this.validateContext(targetContext);\n               if (validationErrors.length > 0) {\n                 throw createInvokerError(\n                   `Command execution aborted: ${validationErrors.join(', ')}`,\n                   ErrorSeverity.ERROR,\n                   {\n                     command: commandStr,\n                     element: targetContext.invoker || targetContext.targetElement,\n                     context: { validationErrors },\n                     recovery: 'Fix the validation errors and try again'\n                   }\n                 );\n               }\n\n               // Execute AFTER_VALIDATION middleware\n               await this.executeMiddleware(HookPoint.AFTER_VALIDATION, targetContext);\n\n               // Await the primary command with timeout protection\n               const executionPromise = Promise.resolve(callback(targetContext));\n               const timeoutPromise = new Promise((_, reject) => {\n                 setTimeout(() => reject(new Error('Command execution timeout')), 30000); // 30 second timeout\n               });\n\n               await Promise.race([executionPromise, timeoutPromise]);\n\n               // Update state after successful execution\n               if (currentState === 'once') {\n                 this.commandStates.set(commandKey, 'completed');\n               }\n\n               // Execute ON_SUCCESS middleware\n               await this.executeMiddleware(HookPoint.ON_SUCCESS, { ...targetContext, result: executionResult });\n\n               if (isDebugMode) {\n                 console.log(`Invokers: Command \"${registeredCommand}\" executed successfully on target ${target.id || target}`);\n               }\n\n             } catch (error) {\n               executionResult = { success: false, error: error as Error };\n\n               // Execute ON_ERROR middleware\n               await this.executeMiddleware(HookPoint.ON_ERROR, { ...targetContext, result: executionResult });\n\n               const invokerError = createInvokerError(\n                 `Command \"${registeredCommand}\" execution failed`,\n                 ErrorSeverity.ERROR,\n                 {\n                   command: commandStr,\n                   element: targetContext.invoker || targetContext.targetElement,\n                   cause: error as Error,\n                   context: {\n                     params: targetContext.params,\n                     targetId: targetContext.targetElement?.id,\n                     invokerState: currentState\n                   },\n                   recovery: this.generateRecoverySuggestion(registeredCommand, error as Error, targetContext)\n                 }\n               );\n               logInvokerError(invokerError);\n\n               // Attempt graceful degradation\n               this.attemptGracefulDegradation(targetContext, error as Error);\n             }\n\n             // Execute ON_COMPLETE middleware (always runs)\n             await this.executeMiddleware(HookPoint.ON_COMPLETE, { ...targetContext, result: executionResult });\n\n             // Execute AFTER_COMMAND middleware\n             await this.executeMiddleware(HookPoint.AFTER_COMMAND, { ...targetContext, result: executionResult });\n\n             // Process <and-then> elements and trigger follow-up (only for the first target to avoid duplication)\n             if (context.invoker && target === targets[0]) {\n               await this.andThenManager.processAndThen(context.invoker, executionResult, target);\n               await this.triggerFollowup(context.invoker, target, executionResult);\n             }\n           }\n        } catch (commandError) {\n          // Handle errors in the command setup/execution wrapper\n          // Re-throw middleware errors that should prevent command execution\n          if ((commandError as Error).message.includes('Validation failed') ||\n              (commandError as Error).message.includes('Plugin attempted to access')) {\n            throw commandError;\n          }\n\n          const wrapperError = createInvokerError(\n            `Failed to execute command \"${registeredCommand}\"`,\n            ErrorSeverity.CRITICAL,\n            {\n              command: commandStr,\n              element: event.source as HTMLElement,\n              cause: commandError as Error,\n              recovery: 'Check command syntax and ensure all required attributes are present'\n            }\n          );\n          logInvokerError(wrapperError);\n        }\n\r\n        return; // Stop after the first, longest match\r\n      }\r\n    }\r\n\r\n    // If no command was found, provide helpful suggestions\r\n    if (!commandFound) {\r\n      const suggestions = this.findSimilarCommands(commandStr);\r\n      const error = createInvokerError(\r\n        `Unknown command \"${commandStr}\"`,\r\n        ErrorSeverity.ERROR,\r\n        {\r\n          command: commandStr,\r\n          element: event.source as HTMLElement,\r\n          context: {\r\n            availableCommands: this.sortedCommandKeys.slice(0, 10),\r\n            suggestions\r\n          },\r\n          recovery: suggestions.length > 0\r\n            ? `Did you mean: ${suggestions.join(', ')}?`\r\n            : 'Check the command name and ensure it\\'s registered. Custom commands must start with \"--\"'\r\n        }\r\n      );\r\n      logInvokerError(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validates the command context before execution\r\n   */\r\n  private validateContext(context: CommandContext): string[] {\r\n    const errors: string[] = [];\r\n\r\n    if (!context.targetElement) {\r\n      errors.push('Target element is null or undefined');\r\n    } else if (!context.targetElement.isConnected) {\r\n      errors.push('Target element is not connected to the DOM');\r\n    }\r\n\r\n    if (context.params.some(param => param == null)) {\r\n      errors.push('Command contains null or undefined parameters');\r\n    }\r\n\r\n    return errors;\r\n  }\r\n\r\n  /**\r\n   * Generates context-aware recovery suggestions for failed commands\r\n   */\r\n  private generateRecoverySuggestion(command: string, error: Error, _context: CommandContext): string {\r\n    const errorMessage = error.message.toLowerCase();\r\n\r\n    // Command-specific suggestions\r\n    if (command.includes('fetch')) {\r\n      if (errorMessage.includes('network') || errorMessage.includes('fetch')) {\r\n        return 'Check your network connection and ensure the URL is correct and reachable';\r\n      }\r\n      if (errorMessage.includes('cors')) {\r\n        return 'CORS error: Ensure your server allows cross-origin requests or use a proxy';\r\n      }\r\n      return 'Verify the data-url attribute points to a valid endpoint that returns HTML';\r\n    }\r\n\r\n    if (command.includes('media')) {\r\n      return 'Ensure the target element is a <video> or <audio> element';\r\n    }\r\n\r\n    if (command.includes('form')) {\r\n      return 'Ensure the target element is a <form> element with a valid action attribute';\r\n    }\r\n\r\n    if (command.includes('class')) {\r\n      return 'Check that the class name is valid and the target element exists';\r\n    }\r\n\r\n    if (command.includes('attr')) {\r\n      return 'Verify the attribute name is valid and check data-attr-name/data-attr-value attributes';\r\n    }\r\n\r\n    // Generic suggestions based on error type\r\n    if (errorMessage.includes('null') || errorMessage.includes('undefined')) {\r\n      return 'Check that all required elements and attributes are present in the DOM';\r\n    }\r\n\r\n    if (errorMessage.includes('permission') || errorMessage.includes('security')) {\r\n      return 'This operation requires user permission or HTTPS context';\r\n    }\r\n\r\n    return 'Check the command syntax and ensure all required attributes are present';\r\n  }\r\n\r\n  /**\r\n   * Attempts graceful degradation when a command fails\r\n   */\r\n  private attemptGracefulDegradation(context: CommandContext, _error: Error): void {\r\n    try {\r\n      // For UI commands, try to maintain accessibility state\r\n      if (context.invoker && context.invoker.hasAttribute('aria-expanded')) {\r\n        const currentState = context.invoker.getAttribute('aria-expanded');\r\n        if (currentState === null) {\r\n          context.invoker.setAttribute('aria-expanded', 'false');\r\n        }\r\n      }\r\n\r\n      // For disabled buttons, ensure they remain interactive\r\n      if (context.invoker && context.invoker.hasAttribute('disabled')) {\r\n        setTimeout(() => {\r\n          if (context.invoker) {\r\n            context.invoker.removeAttribute('disabled');\r\n          }\r\n        }, 3000); // Re-enable after 3 seconds\r\n      }\r\n\r\n      if (isDebugMode) {\r\n        console.log('Invokers: Attempted graceful degradation for failed command');\r\n      }\r\n    } catch (degradationError) {\r\n      // If degradation fails, just log it - don't throw\r\n      console.warn('Invokers: Graceful degradation failed:', degradationError);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds similar commands to help with typos\r\n   */\r\n  private findSimilarCommands(commandStr: string): string[] {\r\n    const command = commandStr.toLowerCase();\r\n    const suggestions: string[] = [];\r\n\r\n    for (const registeredCommand of this.sortedCommandKeys) {\r\n      const registered = registeredCommand.toLowerCase();\r\n\r\n      // Exact match after prefix\r\n      if (command.includes(registered.slice(2))) {\r\n        suggestions.push(registeredCommand);\r\n        continue;\r\n      }\r\n\r\n      // Levenshtein distance for typos\r\n      if (this.levenshteinDistance(command, registered) <= 2) {\r\n        suggestions.push(registeredCommand);\r\n      }\r\n    }\r\n\r\n    return suggestions.slice(0, 3); // Limit to 3 suggestions\r\n  }\r\n\r\n  /**\r\n   * Calculates Levenshtein distance for typo detection\r\n   */\r\n  private levenshteinDistance(str1: string, str2: string): number {\r\n    const matrix = Array(str2.length + 1).fill(null).map(() => Array(str1.length + 1).fill(null));\r\n\r\n    for (let i = 0; i <= str1.length; i++) matrix[0][i] = i;\r\n    for (let j = 0; j <= str2.length; j++) matrix[j][0] = j;\r\n\r\n    for (let j = 1; j <= str2.length; j++) {\r\n      for (let i = 1; i <= str1.length; i++) {\r\n        const substitutionCost = str1[i - 1] === str2[j - 1] ? 0 : 1;\r\n        matrix[j][i] = Math.min(\r\n          matrix[j][i - 1] + 1, // deletion\r\n          matrix[j - 1][i] + 1, // insertion\r\n          matrix[j - 1][i - 1] + substitutionCost // substitution\r\n        );\r\n      }\r\n    }\r\n\r\n    return matrix[str2.length][str1.length];\r\n  }\r\n\r\n  /**\r\n   * Triggers a follow-up command. This is now a core utility of the InvokerManager.\r\n   * It supports enhanced attribute-based chaining with conditional execution.\r\n   */\r\n  private async triggerFollowup(originalInvoker: HTMLButtonElement, primaryTarget: HTMLElement, executionResult?: CommandExecutionResult): Promise<void> {\r\n    const followupCommands = this.getFollowupCommands(originalInvoker, executionResult);\r\n\r\n    if (followupCommands.length === 0) {\r\n      return;\r\n    }\r\n\r\n    for (const { command, target, state } of followupCommands) {\r\n      if (!target && !primaryTarget.id) {\r\n        console.warn(\"Invokers: A chained command requires the target element to have an ID.\", primaryTarget);\r\n        continue;\r\n      }\r\n\r\n      const targetId = target || primaryTarget.id;\r\n      if (!targetId) continue;\r\n\r\n      await this.scheduleCommand(command, targetId, state, primaryTarget);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extracts followup commands from enhanced attributes based on execution result.\r\n   */\r\n  private getFollowupCommands(invoker: HTMLButtonElement | null, executionResult?: CommandExecutionResult): Array<{ command: string; target?: string; state: CommandState }> {\r\n    if (!invoker) {\r\n      return [];\r\n    }\r\n    const commands: Array<{ command: string; target?: string; state: CommandState }> = [];\r\n\r\n    // Handle universal data-and-then (always executes)\n    const universalCommandTemplate = invoker.dataset.andThen || invoker.dataset.thenCommand;\n    if (universalCommandTemplate) {\n      // Create interpolation context for the chained command\n      const interpolationContext = {\n        event: (invoker as any).triggeringEvent, // Original event if available\n        this: invoker, // The invoker that defined the chain\n        target: null, // Will be set when scheduling\n        detail: ((invoker as any).triggeringEvent as CustomEvent)?.detail, // Detail from CustomEvent\n      };\n\n      // Interpolate the chained command string\n      const interpolatedCommand = this._tryInterpolate(universalCommandTemplate, interpolationContext);\n\n        commands.push({\n          command: interpolatedCommand,\n          target: invoker.dataset.thenTarget || invoker.dataset.target,\n          state: (invoker.dataset.state as CommandState) || 'active'\n        });\n    }\n\r\n    // Handle conditional commands based on execution result\n    if (executionResult) {\n      if (executionResult.success && invoker.dataset.afterSuccess) {\n        // Create interpolation context for conditional commands\n        const interpolationContext = {\n          event: (invoker as any).triggeringEvent,\n          this: invoker,\n          target: null,\n          detail: ((invoker as any).triggeringEvent as CustomEvent)?.detail,\n        };\n\n        invoker.dataset.afterSuccess.split(',').forEach(cmdTemplate => {\n          const interpolatedCommand = this._tryInterpolate(cmdTemplate.trim(), interpolationContext);\n            commands.push({\n              command: interpolatedCommand,\n              target: invoker.dataset.thenTarget || invoker.dataset.target,\n              state: (invoker.dataset.state as CommandState) || 'active'\n            });\n        });\n      }\n\r\n      if (!executionResult.success && invoker.dataset.afterError) {\n        // Create interpolation context for error commands\n        const interpolationContext = {\n          event: (invoker as any).triggeringEvent,\n          this: invoker,\n          target: null,\n          detail: ((invoker as any).triggeringEvent as CustomEvent)?.detail,\n        };\n\n        invoker.dataset.afterError.split(',').forEach(cmdTemplate => {\n          const interpolatedCommand = this._tryInterpolate(cmdTemplate.trim(), interpolationContext);\n            commands.push({\n              command: interpolatedCommand,\n              target: invoker.dataset.thenTarget || invoker.dataset.target,\n              state: (invoker.dataset.state as CommandState) || 'active'\n            });\n        });\n      }\n\n      // Handle complete commands (executes regardless of success/error)\n      if (invoker.dataset.afterComplete) {\n        // Create interpolation context for complete commands\n        const interpolationContext = {\n          event: (invoker as any).triggeringEvent,\n          this: invoker,\n          target: null,\n          detail: ((invoker as any).triggeringEvent as CustomEvent)?.detail,\n        };\n\n        invoker.dataset.afterComplete.split(',').forEach(cmdTemplate => {\n          const interpolatedCommand = this._tryInterpolate(cmdTemplate.trim(), interpolationContext);\n            commands.push({\n              command: interpolatedCommand,\n              target: invoker.dataset.thenTarget || invoker.dataset.target,\n              state: (invoker.dataset.state as CommandState) || 'active'\n            });\n        });\n      }\n    }\r\n\r\n    return commands;\r\n  }\r\n\r\n  private createContext(event: CommandEvent, fullCommand: string, params: readonly string[]): CommandContext {\r\n    const invoker = event.source as HTMLButtonElement;\r\n    const targetElement = event.target as HTMLElement;\r\n\r\n    const getTargets = (): HTMLElement[] => {\n      // For chained commands (null invoker), always get fresh references\n      if (!invoker) {\n        const freshTarget = getFreshTargetElement();\n        return freshTarget ? [freshTarget] : [];\n      }\n\n      // Use advanced target resolver for all selector types\n      // First try commandfor attribute (spec-compliant)\n      let selector = invoker.getAttribute(\"commandfor\");\n      if (selector) {\n        return resolveTargets(selector, invoker) as HTMLElement[];\n      }\n\n      // Fallback to legacy aria-controls\n      const controls = invoker.getAttribute(\"aria-controls\")?.trim();\n      if (controls) {\n        // Convert space-separated IDs to CSS selector\n        selector = \"#\" + controls.split(/\\s+/).join(\", #\");\n        return resolveTargets(selector, invoker) as HTMLElement[];\n      }\n\n      // Final fallback to data-target\n      const dataTarget = invoker.dataset.target;\n      if (dataTarget) {\n        return resolveTargets(dataTarget, invoker) as HTMLElement[];\n      }\n\n      // If no selector found, return the event target (for backward compatibility)\n      return targetElement ? [targetElement] : [];\n    };\n\r\n    // For chained commands (null invoker), ensure we get a fresh reference to the target element\r\n    const getFreshTargetElement = (): HTMLElement | null => {\r\n      if (targetElement && targetElement.id) {\r\n        return document.getElementById(targetElement.id);\r\n      }\r\n      return targetElement;\r\n    };\r\n\r\n    const updateAriaState = (targets: HTMLElement[]) => {\r\n      if (!invoker) return;\r\n      const isExpanded = targets.some(t => !t.hidden);\r\n      invoker.setAttribute(\"aria-expanded\", String(isExpanded));\r\n      if (invoker.hasAttribute(\"aria-pressed\")) {\r\n        invoker.setAttribute(\"aria-pressed\", String(isExpanded));\r\n      }\r\n    };\r\n\r\n    const manageGroupState = () => {\r\n      if (!invoker) return;\r\n      const targets = getTargets();\r\n      if (targets.length === 0 || !targets[0].parentElement) return;\r\n\r\n      const container = targets[0].parentElement;\r\n      const allTargetIDs = new Set(Array.from(container.children).map(t => t.id).filter(Boolean));\r\n\r\n      const invokersInGroup = Array.from(\r\n        document.querySelectorAll<HTMLButtonElement>(\"[commandfor], [aria-controls]\")\r\n      ).filter(btn => {\r\n        const controlledIds = (btn.getAttribute(\"commandfor\") ? [btn.getAttribute(\"commandfor\")] : []).concat(btn.getAttribute(\"aria-controls\")?.split(/\\s+/) ?? []);\r\n        return controlledIds.some(id => allTargetIDs.has(id!));\r\n      });\r\n\r\n      invokersInGroup.forEach(otherInvoker => {\r\n        if (otherInvoker !== invoker) {\r\n          otherInvoker.setAttribute(\"aria-expanded\", \"false\");\r\n          if (otherInvoker.hasAttribute(\"aria-pressed\")) {\r\n            otherInvoker.setAttribute(\"aria-pressed\", \"false\");\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    const executeAfter = (command: string, target?: string, state: CommandState = 'active') => {\r\n      if (!invoker) return;\r\n      this.scheduleCommand(command, target || targetElement.id, state, targetElement);\r\n    };\r\n\r\n    const executeConditional = (options: ConditionalCommands) => {\r\n      if (!invoker) return;\r\n      // Store conditional commands in data attributes for later execution\r\n      if (options.onSuccess && options.onSuccess.length > 0) {\r\n        invoker.dataset.afterSuccess = options.onSuccess.join(',');\r\n      }\r\n\r\n      if (options.onError && options.onError.length > 0) {\r\n        invoker.dataset.afterError = options.onError.join(',');\r\n      }\r\n\r\n      if (options.onComplete && options.onComplete.length > 0) {\r\n        invoker.dataset.afterComplete = options.onComplete.join(',');\r\n      }\r\n    };\r\n\r\n    return {\n      invoker,\n      targetElement: invoker ? targetElement : getFreshTargetElement() || targetElement,\n      fullCommand,\n      params,\n      triggeringEvent: (event as any).triggeringEvent,\n      getTargets,\n      updateAriaState,\n      manageGroupState,\n      executeAfter,\n      executeConditional\n    };\n  }\r\n\r\n  /**\n   * Attaches the global `command` event listener to the document.\n   */\n  private listen(): void {\n    // The listener now calls the async handleCommand method.\n    document.addEventListener(\"command\", (e) => this.handleCommand(e as CommandEvent), true);\n  }\n\n\n\r\n\r\n\r\n\r\n\r\n  /**\r\n   * Registers the core library commands, now prefixed with `--`.\r\n   */\r\n  /**\r\n   * Schedules a command for execution with optional state management.\r\n   */\r\n  private async scheduleCommand(command: string, targetId: string, state: CommandState, primaryTarget?: HTMLElement): Promise<void> {\r\n    const commandKey = `${command}:${targetId}`;\r\n\r\n    // Check command state\r\n    if (this.commandStates.get(commandKey) === 'disabled') {\r\n      return;\r\n    }\r\n\r\n    if (this.commandStates.get(commandKey) === 'completed') {\r\n      return;\r\n    }\r\n\r\n    // For chained commands, directly execute the command instead of using synthetic buttons\n    // This avoids issues with event propagation in test environments\n    const targetElement = document.getElementById(targetId) || (primaryTarget && targetId === primaryTarget.id ? primaryTarget : null);\n    if (targetElement) {\n      const mockEvent = {\n        command,\n        source: null, // No source for chained commands\n        target: targetElement,\n        preventDefault: () => { },\n        type: 'command'\n      } as any;\n      await this.executeCustomCommand(command, mockEvent);\n    }\n\r\n    // Update state after execution\r\n    if (state === 'once') {\r\n      this.commandStates.set(commandKey, 'completed');\r\n    } else if (state === 'completed') {\r\n      this.commandStates.set(commandKey, 'completed');\r\n    }\r\n  }\r\n\r\n  private registerCoreLibraryCommands(): void {\r\n    this.register(\"--toggle\", async ({ getTargets, updateAriaState, invoker }) => {\r\n      const targets = getTargets();\r\n      if (targets.length === 0) {\r\n        const error = createInvokerError(\r\n          'No target elements found for --toggle command',\r\n          ErrorSeverity.WARNING,\r\n          {\r\n            command: '--toggle',\r\n            element: invoker,\r\n            recovery: 'Ensure commandfor points to a valid element id, or use aria-controls for multiple targets'\r\n          }\r\n        );\r\n        logInvokerError(error);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const updateDOM = () => {\r\n          targets.forEach(target => {\r\n            if (!target.isConnected) {\r\n              console.warn('Invokers: Skipping disconnected target element', target);\r\n              return;\r\n            }\r\n            target.toggleAttribute(\"hidden\");\r\n          });\r\n          updateAriaState(targets);\r\n        };\r\n\r\n        await (document.startViewTransition ? document.startViewTransition(updateDOM).finished : Promise.resolve(updateDOM()));\r\n      } catch (error) {\r\n        throw createInvokerError(\r\n          'Failed to toggle element visibility',\r\n          ErrorSeverity.ERROR,\r\n          {\r\n            command: '--toggle',\r\n            element: invoker,\r\n            cause: error as Error,\r\n            recovery: 'Check that target elements are valid DOM elements'\r\n          }\r\n        );\r\n      }\r\n    });\r\n\r\n    this.register(\"--show\", async ({ getTargets, updateAriaState, manageGroupState, invoker }) => {\r\n      const targets = getTargets();\r\n      if (targets.length === 0) {\r\n        const error = createInvokerError(\r\n          'No target elements found for --show command',\r\n          ErrorSeverity.WARNING,\r\n          {\r\n            command: '--show',\r\n            element: invoker,\r\n            recovery: 'Ensure commandfor points to a valid element id'\r\n          }\r\n        );\r\n        logInvokerError(error);\r\n        return;\r\n      }\r\n\r\n      if (!targets[0].parentElement) {\r\n        const error = createInvokerError(\r\n          'Target element has no parent for --show command (cannot hide siblings)',\r\n          ErrorSeverity.WARNING,\r\n          {\r\n            command: '--show',\r\n            element: targets[0],\r\n            recovery: 'Use --toggle instead, or ensure the target element has siblings to manage'\r\n          }\r\n        );\r\n        logInvokerError(error);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const allSiblings = Array.from(targets[0].parentElement.children);\r\n        const updateDOM = () => {\r\n          manageGroupState();\r\n          allSiblings.forEach(child => {\r\n            if (child instanceof HTMLElement) {\r\n              child.setAttribute(\"hidden\", \"\");\r\n            }\r\n          });\r\n          targets.forEach(target => target.removeAttribute(\"hidden\"));\r\n          updateAriaState(targets);\r\n        };\r\n        await (document.startViewTransition ? document.startViewTransition(updateDOM).finished : Promise.resolve(updateDOM()));\r\n      } catch (error) {\r\n        throw createInvokerError(\r\n          'Failed to show element and hide siblings',\r\n          ErrorSeverity.ERROR,\r\n          {\r\n            command: '--show',\r\n            element: invoker,\r\n            cause: error as Error,\r\n            recovery: 'Check that target elements and their siblings are valid DOM elements'\r\n          }\r\n        );\r\n      }\r\n    });\r\n\r\n    this.register(\"--hide\", ({ getTargets, updateAriaState }) => {\r\n      const targets = getTargets();\r\n      if (targets.length === 0) return;\r\n      targets.forEach(target => target.setAttribute(\"hidden\", \"\"));\r\n      updateAriaState(targets);\r\n    });\r\n\r\n    this.register(\"--class\", ({ invoker, getTargets, params }) => {\n      const [action, ...rest] = params;\n      const targets = getTargets();\n      if (!action || targets.length === 0) {\n        console.warn('Invokers: `--class` command requires an action (e.g., \"--class:toggle:my-class\").', invoker);\n        return;\n      }\n      targets.forEach(target => {\n        if (action === \"ternary\") {\n          const [classIfTrue, classIfFalse, condition] = rest;\n          if (!classIfTrue || !classIfFalse || !condition) {\n            console.warn('Invokers: `--class:ternary` requires class-if-true, class-if-false, and condition.', invoker);\n            return;\n          }\n          let useTrue = false;\n          if (condition === \"has-content\") {\n            useTrue = !!(target.textContent && target.textContent.trim());\n          } else if (condition === \"has-no-content\") {\n            useTrue = !(target.textContent && target.textContent.trim());\n          }\n          if (useTrue) {\n            target.classList.add(classIfTrue);\n            target.classList.remove(classIfFalse);\n          } else {\n            target.classList.remove(classIfTrue);\n            target.classList.add(classIfFalse);\n          }\n        } else if (action === \"toggle\" && rest[1]) {\n          const [className, condition] = rest;\n          if (condition === \"has-content\") {\n            const hasContent = target.textContent && target.textContent.trim() !== '';\n            if (hasContent) {\n              target.classList.add(className);\n            } else {\n              target.classList.remove(className);\n            }\n          } else if (condition === \"has-no-content\") {\n            const hasContent = target.textContent && target.textContent.trim() !== '';\n            if (!hasContent) {\n              target.classList.add(className);\n            } else {\n              target.classList.remove(className);\n            }\n          } else {\n            target.classList.toggle(className);\n          }\n        } else {\n           const className = rest[0];\n           if (!className && action !== \"clear\") {\n             console.warn('Invokers: `--class` command requires a class name.', invoker);\n             return;\n           }\n           switch (action) {\n             case \"add\": target.classList.add(className); break;\n             case \"remove\": target.classList.remove(className); break;\n             case \"toggle\": target.classList.toggle(className); break;\n             case \"clear\": target.className = \"\"; break;\n             default: console.warn(`Invokers: Unknown action \"${action}\" for '--class' command.`, invoker);\n           }\n         }\n      });\n    });\n\r\n    this.register(\"--text\", ({ invoker, getTargets, params }) => {\n      const [action, ...valueParts] = params;\n      const value = valueParts.join(' '); // Rejoin with spaces for text content\n      const targets = getTargets();\r\n\r\n      if (!action) {\r\n        throw createInvokerError(\r\n          'Text command requires an action (set, append, prepend, or clear)',\r\n          ErrorSeverity.ERROR,\r\n          {\r\n            command: '--text',\r\n            element: invoker,\r\n            context: { params },\r\n            recovery: 'Use format: --text:set:Hello World or --text:append: more text'\r\n          }\r\n        );\r\n      }\r\n\r\n      if (targets.length === 0) {\r\n        const error = createInvokerError(\r\n          'No target elements found for --text command',\r\n          ErrorSeverity.WARNING,\r\n          {\r\n            command: '--text',\r\n            element: invoker,\r\n            recovery: 'Ensure commandfor points to a valid element id'\r\n          }\r\n        );\r\n        logInvokerError(error);\r\n        return;\r\n      }\r\n\r\n      const validActions = ['set', 'append', 'prepend', 'clear'];\r\n      if (!validActions.includes(action)) {\r\n        throw createInvokerError(\r\n          `Invalid text action \"${action}\". Must be one of: ${validActions.join(', ')}`,\r\n          ErrorSeverity.ERROR,\r\n          {\r\n            command: '--text',\r\n            element: invoker,\r\n            context: { action, validActions },\r\n            recovery: 'Use a valid action like: --text:set:Hello or --text:append: World'\r\n          }\r\n        );\r\n      }\r\n\r\n      try {\r\n        targets.forEach(target => {\r\n          if (!target.isConnected) {\r\n            console.warn('Invokers: Skipping disconnected target element', target);\r\n            return;\r\n          }\r\n\r\n          switch (action) {\r\n            case \"set\":\r\n              target.textContent = value || \"\";\r\n              break;\r\n            case \"append\":\r\n              target.textContent += value || \"\";\r\n              break;\r\n            case \"prepend\":\r\n              target.textContent = (value || \"\") + target.textContent;\r\n              break;\r\n            case \"clear\":\r\n              target.textContent = \"\";\r\n              break;\r\n          }\r\n        });\r\n      } catch (error) {\r\n        throw createInvokerError(\r\n          `Failed to update text content with action \"${action}\"`,\r\n          ErrorSeverity.ERROR,\r\n          {\r\n            command: '--text',\r\n            element: invoker,\r\n            cause: error as Error,\r\n            context: { action, value },\r\n            recovery: 'Check that target elements support text content updates'\r\n          }\r\n        );\r\n      }\r\n    });\r\n\r\n    this.register(\"--attr\", ({ invoker, getTargets, params }) => {\r\n      const [action, attrName, attrValue] = params;\r\n      const targets = getTargets();\r\n\r\n      if (!action) {\r\n        throw createInvokerError(\r\n          'Attribute command requires an action (set, remove, or toggle)',\r\n          ErrorSeverity.ERROR,\r\n          {\r\n            command: '--attr',\r\n            element: invoker,\r\n            context: { params },\r\n            recovery: 'Use format: --attr:set:disabled:true or --attr:remove:disabled'\r\n          }\r\n        );\r\n      }\r\n\r\n      if (!attrName) {\r\n        throw createInvokerError(\r\n          'Attribute command requires an attribute name',\r\n          ErrorSeverity.ERROR,\r\n          {\r\n            command: '--attr',\r\n            element: invoker,\r\n            context: { action, params },\r\n            recovery: 'Specify the attribute name: --attr:set:data-value:123'\r\n          }\r\n        );\r\n      }\r\n\r\n      if (targets.length === 0) {\r\n        const error = createInvokerError(\r\n          'No target elements found for --attr command',\r\n          ErrorSeverity.WARNING,\r\n          {\r\n            command: '--attr',\r\n            element: invoker,\r\n            recovery: 'Ensure commandfor points to a valid element id'\r\n          }\r\n        );\r\n        logInvokerError(error);\r\n        return;\r\n      }\r\n\r\n      const validActions = ['set', 'remove', 'toggle'];\r\n      if (!validActions.includes(action)) {\r\n        throw createInvokerError(\r\n          `Invalid attribute action \"${action}\". Must be one of: ${validActions.join(', ')}`,\r\n          ErrorSeverity.ERROR,\r\n          {\r\n            command: '--attr',\r\n            element: invoker,\r\n            context: { action, validActions },\r\n            recovery: 'Use a valid action like: --attr:set:disabled:true or --attr:toggle:hidden'\r\n          }\r\n        );\r\n      }\r\n\r\n       // Validate attribute name\n       if (!/^[a-zA-Z][a-zA-Z0-9-]*$/.test(attrName)) {\n         throw createInvokerError(\n           `Invalid attribute name \"${attrName}\". Attribute names must start with a letter and contain only letters, numbers, and hyphens`,\n           ErrorSeverity.ERROR,\n           {\n             command: '--attr',\n             element: invoker,\n             context: { attrName },\n             recovery: 'Use a valid HTML attribute name like \"disabled\" or \"data-value\"'\n           }\n         );\n       }\n\n       // Interpolate attrValue if interpolation is enabled\n       let interpolatedAttrValue = attrValue;\n       if (isInterpolationEnabled() && attrValue) {\n         const context = {\n           this: {\n             ...invoker,\n             dataset: { ...invoker.dataset },\n             value: (invoker as any).value || '',\n           },\n           data: document.body.dataset,\n           event: (invoker as any).triggeringEvent,\n         };\n         interpolatedAttrValue = interpolateString(attrValue, context);\n       }\n\n       try {\n        targets.forEach(target => {\r\n          if (!target.isConnected) {\r\n            console.warn('Invokers: Skipping disconnected target element', target);\r\n            return;\r\n          }\r\n\r\n           switch (action) {\n             case \"set\":\n               target.setAttribute(attrName, interpolatedAttrValue || \"\");\n               break;\n             case \"remove\":\n               target.removeAttribute(attrName);\n               break;\n             case \"toggle\":\n               if (target.hasAttribute(attrName)) {\n                 target.removeAttribute(attrName);\n               } else {\n                 target.setAttribute(attrName, interpolatedAttrValue || \"\");\n               }\n               break;\n           }\n        });\r\n      } catch (error) {\r\n        throw createInvokerError(\r\n          `Failed to update attribute \"${attrName}\" with action \"${action}\"`,\r\n          ErrorSeverity.ERROR,\r\n          {\r\n            command: '--attr',\r\n            element: invoker,\r\n            cause: error as Error,\r\n            context: { action, attrName, attrValue },\r\n            recovery: 'Check that the attribute operation is valid for the target elements'\r\n          }\r\n        );\r\n      }\r\n    });\n\n    // --value command for setting form input values\n    this.register(\"--value\", ({ invoker, getTargets, params }) => {\n      const [actionOrValue, ...rest] = params;\n      const targets = getTargets();\n\n      if (targets.length === 0) {\n        const error = createInvokerError(\n          'No target elements found for --value command',\n          ErrorSeverity.WARNING,\n          {\n            command: '--value',\n            element: invoker,\n            recovery: 'Ensure commandfor points to a valid form input element'\n          }\n        );\n        logInvokerError(error);\n        return;\n      }\n\n      try {\n        targets.forEach(target => {\n          if ('value' in target) {\n            let valueToSet = '';\n            if (actionOrValue === 'clear') {\n              // --value:clear clears the value\n              valueToSet = '';\n            } else if (actionOrValue === 'set' && rest.length > 0) {\n              // --value:set:newvalue sets to newvalue\n              valueToSet = rest.join(':');\n            } else {\n              // --value:something sets to 'something'\n              valueToSet = actionOrValue || '';\n            }\n            (target as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement).value = valueToSet;\n          } else {\n            console.warn('Invokers: --value command target does not support value property', target);\n          }\n        });\n      } catch (error) {\n        throw createInvokerError(\n          'Failed to set value on target elements',\n          ErrorSeverity.ERROR,\n          {\n            command: '--value',\n            element: invoker,\n            cause: error as Error,\n            recovery: 'Ensure target elements are form inputs that support the value property'\n          }\n        );\n      }\n    });\n\n    // --focus command for focusing elements\n    this.register(\"--focus\", ({ invoker, getTargets }) => {\n      const targets = getTargets();\n\n      if (targets.length === 0) {\n        const error = createInvokerError(\n          'No target elements found for --focus command',\n          ErrorSeverity.WARNING,\n          {\n            command: '--focus',\n            element: invoker,\n            recovery: 'Ensure commandfor points to a focusable element'\n          }\n        );\n        logInvokerError(error);\n        return;\n      }\n\n      try {\n        // Focus the first target element\n        if (typeof targets[0].focus === 'function') {\n          targets[0].focus();\n        } else {\n          console.warn('Invokers: Target element does not support focus', targets[0]);\n        }\n      } catch (error) {\n        throw createInvokerError(\n          'Failed to focus target element',\n          ErrorSeverity.ERROR,\n          {\n            command: '--focus',\n            element: invoker,\n            cause: error as Error,\n            recovery: 'Ensure the target element is focusable and visible'\n          }\n        );\n      }\n    });\n\n    // --disabled command for toggling disabled state\n    this.register(\"--disabled\", ({ invoker, getTargets, params }) => {\n      const [action] = params;\n      const targets = getTargets();\n\n      if (targets.length === 0) {\n        const error = createInvokerError(\n          'No target elements found for --disabled command',\n          ErrorSeverity.WARNING,\n          {\n            command: '--disabled',\n            element: invoker,\n            recovery: 'Ensure commandfor points to an element that supports the disabled property'\n          }\n        );\n        logInvokerError(error);\n        return;\n      }\n\n      try {\n        targets.forEach(target => {\n          if ('disabled' in target) {\n            const element = target as HTMLInputElement | HTMLButtonElement | HTMLTextAreaElement | HTMLSelectElement;\n            switch (action) {\n              case 'toggle':\n                element.disabled = !element.disabled;\n                break;\n              case 'true':\n              case 'enable':\n                element.disabled = false;\n                break;\n              case 'false':\n              case 'disable':\n                element.disabled = true;\n                break;\n              default:\n                console.warn(`Invokers: Unknown action \"${action}\" for --disabled command. Use \"toggle\", \"true\", \"false\", \"enable\", or \"disable\".`);\n            }\n          } else {\n            console.warn('Invokers: --disabled command target does not support disabled property', target);\n          }\n        });\n      } catch (error) {\n        throw createInvokerError(\n          'Failed to update disabled state on target elements',\n          ErrorSeverity.ERROR,\n          {\n            command: '--disabled',\n            element: invoker,\n            cause: error as Error,\n            recovery: 'Ensure target elements support the disabled property'\n          }\n        );\n      }\n    });\n\n    // --scroll command for scrolling elements into view\n    this.register(\"--scroll\", ({ invoker, getTargets, params }) => {\n      const [action] = params;\n      const targets = getTargets();\n\n      if (targets.length === 0) {\n        const error = createInvokerError(\n          'No target elements found for --scroll command',\n          ErrorSeverity.WARNING,\n          {\n            command: '--scroll',\n            element: invoker,\n            recovery: 'Ensure commandfor points to a valid element'\n          }\n        );\n        logInvokerError(error);\n        return;\n      }\n\n      try {\n        targets.forEach(target => {\n          switch (action) {\n            case 'into-view':\n              target.scrollIntoView({ behavior: 'smooth', block: 'start' });\n              break;\n            case 'top':\n              target.scrollIntoView({ behavior: 'smooth', block: 'start' });\n              break;\n            case 'bottom':\n              target.scrollIntoView({ behavior: 'smooth', block: 'end' });\n              break;\n            case 'center':\n              target.scrollIntoView({ behavior: 'smooth', block: 'center' });\n              break;\n            default:\n              console.warn(`Invokers: Unknown action \"${action}\" for --scroll command. Use \"into-view\", \"top\", \"bottom\", or \"center\".`);\n              target.scrollIntoView({ behavior: 'smooth' });\n          }\n        });\n      } catch (error) {\n        throw createInvokerError(\n          'Failed to scroll target elements into view',\n          ErrorSeverity.ERROR,\n          {\n            command: '--scroll',\n            element: invoker,\n            cause: error as Error,\n            recovery: 'Ensure target elements are valid DOM elements'\n          }\n        );\n      }\n    });\n\n    // --storage command for localStorage and sessionStorage with enhanced features\n    this.register(\"--storage\", ({ invoker, getTargets, params }) => {\n      const [storageType, action, key, ...valueParts] = params;\n      const targets = getTargets();\n\n      // Enhanced storage with JSON support, expiration, and better error handling\n      if (!storageType || !['local', 'session'].includes(storageType)) {\n        throw createInvokerError(\n          `Invalid storage type \"${storageType}\". Must be \"local\" or \"session\"`,\n          ErrorSeverity.ERROR,\n          {\n            command: '--storage',\n            element: invoker,\n            context: { storageType, availableTypes: ['local', 'session'] },\n            recovery: 'Use --storage:local:action:key or --storage:session:action:key'\n          }\n        );\n      }\n\n      const storage = storageType === 'local' ? localStorage : sessionStorage;\n\n      // Check if storage is available\n      if (typeof Storage === 'undefined') {\n        throw createInvokerError(\n          'Web Storage API not supported in this browser',\n          ErrorSeverity.ERROR,\n          {\n            command: '--storage',\n            element: invoker,\n            recovery: 'Use a modern browser that supports localStorage/sessionStorage'\n          }\n        );\n      }\n\n      try {\n        switch (action) {\n          case 'set':\n            if (!key) {\n              throw createInvokerError(\n                'Storage set requires a key',\n                ErrorSeverity.ERROR,\n                {\n                  command: '--storage',\n                  element: invoker,\n                  recovery: 'Use --storage:local:set:key:value or --storage:session:set:key:value'\n                }\n              );\n            }\n\n            let valueToStore = valueParts.join(':');\n\n            // If no value provided in command, read from target element\n            if (!valueToStore && targets.length > 0 && 'value' in targets[0]) {\n              valueToStore = (targets[0] as HTMLInputElement).value;\n            }\n\n            // Check for JSON flag\n            const isJson = invoker?.dataset?.storageJson === 'true' || valueToStore.startsWith('{') || valueToStore.startsWith('[');\n            if (isJson) {\n              try {\n                // If it's already JSON, validate it\n                JSON.parse(valueToStore);\n              } catch {\n                // If not valid JSON, try to stringify the value\n                valueToStore = JSON.stringify(valueToStore);\n              }\n            }\n\n            // Check for expiration\n            const expiresIn = invoker?.dataset?.storageExpires;\n            if (expiresIn) {\n              const expiresAt = Date.now() + (parseInt(expiresIn, 10) * 1000); // Convert seconds to ms\n              const data = {\n                value: valueToStore,\n                expiresAt,\n                isJson\n              };\n              storage.setItem(key, JSON.stringify(data));\n            } else {\n              storage.setItem(key, valueToStore);\n            }\n            break;\n\n          case 'get':\n            if (!key) {\n              throw createInvokerError(\n                'Storage get requires a key',\n                ErrorSeverity.ERROR,\n                {\n                  command: '--storage',\n                  element: invoker,\n                  recovery: 'Use --storage:local:get:key or --storage:session:get:key'\n                }\n              );\n            }\n\n            let storedValue = storage.getItem(key);\n            let finalValue = storedValue;\n\n            if (storedValue !== null) {\n              try {\n                // Check if it's our enhanced storage format with expiration\n                const parsed = JSON.parse(storedValue);\n                if (parsed && typeof parsed === 'object' && 'value' in parsed && 'expiresAt' in parsed) {\n                  if (Date.now() > parsed.expiresAt) {\n                    // Expired, remove it\n                    storage.removeItem(key);\n                    finalValue = null;\n                  } else {\n                    finalValue = parsed.isJson ? JSON.stringify(parsed.value) : parsed.value;\n                  }\n                }\n              } catch {\n                // Not our format, use as-is\n              }\n            }\n\n            if (targets.length > 0 && finalValue !== null) {\n              if ('value' in targets[0]) {\n                (targets[0] as HTMLInputElement).value = finalValue;\n              } else {\n                targets[0].textContent = finalValue;\n              }\n            }\n            break;\n\n           case 'remove':\n             if (!key) {\n               throw createInvokerError(\n                 'Storage remove requires a key',\n                 ErrorSeverity.ERROR,\n                 {\n                   command: '--storage',\n                   element: invoker,\n                   recovery: 'Use --storage:local:remove:key or --storage:session:remove:key'\n                 }\n               );\n             }\n             storage.removeItem(key);\n             // Clear the display if targets are specified\n             if (targets.length > 0) {\n               if ('value' in targets[0]) {\n                 (targets[0] as HTMLInputElement).value = '';\n                } else {\n                  // Reset to initial placeholder text\n                  targets[0].textContent = 'Stored username will appear here';\n                }\n             }\n             break;\n\n           case 'clear':\n             storage.clear();\n             // Provide feedback that storage was cleared\n             if (targets.length > 0) {\n               targets[0].textContent = 'Storage cleared successfully';\n             }\n             break;\n\n          case 'keys':\n            // Get all keys, optionally filtered by prefix\n            const prefix = key || '';\n            const allKeys = Object.keys(storage).filter(k => k.startsWith(prefix));\n            if (targets.length > 0) {\n              targets[0].textContent = JSON.stringify(allKeys);\n            }\n            break;\n\n          case 'has':\n            // Check if key exists\n            const exists = storage.getItem(key) !== null;\n            if (targets.length > 0) {\n              targets[0].textContent = exists.toString();\n            }\n            break;\n\n          case 'size':\n            // Get storage size in bytes\n            let size = 0;\n            for (let i = 0; i < storage.length; i++) {\n              const k = storage.key(i);\n              if (k) {\n                size += k.length + (storage.getItem(k)?.length || 0);\n              }\n            }\n            if (targets.length > 0) {\n              targets[0].textContent = size.toString();\n            }\n            break;\n\n          default:\n            throw createInvokerError(\n              `Unknown storage action \"${action}\"`,\n              ErrorSeverity.ERROR,\n              {\n                command: '--storage',\n                element: invoker,\n                context: { action, availableActions: ['set', 'get', 'remove', 'clear', 'keys', 'has', 'size'] },\n                recovery: 'Use set, get, remove, clear, keys, has, or size actions'\n              }\n            );\n        }\n      } catch (error) {\n        // Handle quota exceeded errors specifically\n        if (error instanceof Error && error.name === 'QuotaExceededError') {\n          throw createInvokerError(\n            'Storage quota exceeded. Cannot store more data.',\n            ErrorSeverity.ERROR,\n            {\n              command: '--storage',\n              element: invoker,\n              cause: error,\n              recovery: 'Clear some storage space or use sessionStorage instead of localStorage'\n            }\n          );\n        }\n\n        throw createInvokerError(\n          `Storage operation failed: ${(error as Error).message}`,\n          ErrorSeverity.ERROR,\n          {\n            command: '--storage',\n            element: invoker,\n            cause: error as Error,\n            recovery: 'Check storage availability, quota limits, and data format'\n          }\n        );\n      }\n    });\n\n    // --animate command for CSS animations with enhanced options\n    this.register(\"--animate\", ({ invoker, getTargets, params }) => {\n      const [animation, ...options] = params;\n      const targets = getTargets();\n\n      if (targets.length === 0) {\n        const error = createInvokerError(\n          'No target elements found for --animate command',\n          ErrorSeverity.WARNING,\n          {\n            command: '--animate',\n            element: invoker,\n            recovery: 'Ensure commandfor points to a valid element'\n          }\n        );\n        logInvokerError(error);\n        return;\n      }\n\n      const validAnimations = [\n        'fade-in', 'fade-out', 'slide-up', 'slide-down', 'slide-left', 'slide-right',\n        'bounce', 'shake', 'pulse', 'flip', 'rotate-in', 'zoom-in', 'zoom-out',\n        'spin', 'wobble', 'jello', 'heartbeat', 'rubber-band'\n      ];\n\n      if (!validAnimations.includes(animation)) {\n        throw createInvokerError(\n          `Unknown animation \"${animation}\"`,\n          ErrorSeverity.ERROR,\n          {\n            command: '--animate',\n            element: invoker,\n            context: { animation, validAnimations },\n            recovery: `Use one of: ${validAnimations.join(', ')}`\n          }\n        );\n      }\n\n      // Parse options: duration, delay, easing, iterations\n      let duration = '0.5s';\n      let delay = '0s';\n      let easing = 'ease-in-out';\n      let iterations = '1';\n\n      options.forEach(option => {\n        if (option.includes('duration:')) {\n          duration = option.split(':')[1] || '0.5s';\n        } else if (option.includes('delay:')) {\n          delay = option.split(':')[1] || '0s';\n        } else if (option.includes('easing:')) {\n          easing = option.split(':')[1] || 'ease-in-out';\n        } else if (option.includes('iterations:')) {\n          iterations = option.split(':')[1] || '1';\n        }\n      });\n\n      // Also check data attributes for options\n      if (invoker?.dataset?.animateDuration) duration = invoker.dataset.animateDuration;\n      if (invoker?.dataset?.animateDelay) delay = invoker.dataset.animateDelay;\n      if (invoker?.dataset?.animateEasing) easing = invoker.dataset.animateEasing;\n      if (invoker?.dataset?.animateIterations) iterations = invoker.dataset.animateIterations;\n\n      try {\n        targets.forEach(target => {\n          if (!target.isConnected) {\n            console.warn('Invokers: Skipping disconnected target element', target);\n            return;\n          }\n\n          // Remove any existing animation classes and styles\n          target.classList.forEach(className => {\n            if (className.startsWith('invokers-animate-')) {\n              target.classList.remove(className);\n            }\n          });\n\n          // Clear any existing animation styles\n          target.style.animation = '';\n\n          // Force reflow to restart animation\n          void target.offsetHeight;\n\n          // Create custom animation style using the keyframe name\n          const animationName = `invokers-${animation}`;\n          const animationValue = `${animationName} ${duration} ${easing} ${delay} ${iterations}`;\n\n          // Apply the animation\n          target.style.animation = animationValue;\n\n          // Handle animation end\n          const handleAnimationEnd = (e: AnimationEvent) => {\n            // Only remove if it's our animation\n            if (e.animationName === animationName) {\n              target.style.animation = '';\n              target.removeEventListener('animationend', handleAnimationEnd);\n            }\n          };\n\n          target.addEventListener('animationend', handleAnimationEnd);\n\n          // Fallback timeout in case animationend doesn't fire\n          setTimeout(() => {\n            if (target.style.animation.includes(animationName)) {\n              target.style.animation = '';\n              target.removeEventListener('animationend', handleAnimationEnd);\n            }\n          }, parseFloat(duration) * 1000 + parseFloat(delay) * 1000 + 100); // Add 100ms buffer\n        });\n      } catch (error) {\n        throw createInvokerError(\n          'Failed to animate target elements',\n          ErrorSeverity.ERROR,\n          {\n            command: '--animate',\n            element: invoker,\n            cause: error as Error,\n            recovery: 'Ensure target elements support CSS animations and check animation parameters'\n          }\n        );\n      }\n    });\n\n\n    // --url command for URL manipulation with enhanced features\n    this.register(\"--url\", ({ invoker, getTargets, params }) => {\n      const [action, ...valueParts] = params;\n      const targets = getTargets();\n\n      // Use window location and history\n      const location = window.location;\n      const history = window.history;\n\n      try {\n        switch (action) {\n          case 'params-get':\n            if (valueParts.length === 0) {\n              throw createInvokerError(\n                'URL params-get requires a parameter name',\n                ErrorSeverity.ERROR,\n                {\n                  command: '--url',\n                  element: invoker,\n                  recovery: 'Use --url:params-get:param-name'\n                }\n              );\n            }\n\n            const paramName = valueParts[0];\n            const searchParams = location.search.startsWith('?') ? location.search.substring(1) : location.search;\n            const urlParams = new URLSearchParams(searchParams);\n            const paramValue = urlParams.get(paramName) || '';\n\n            if (targets.length > 0) {\n              if ('value' in targets[0]) {\n                (targets[0] as HTMLInputElement).value = paramValue;\n              } else {\n                targets[0].textContent = paramValue;\n              }\n            }\n\n            // Value is set on target element for chaining\n            break;\n\n          case 'params-set':\n            let setParamName: string;\n            let setParamValue: string;\n\n            if (valueParts.length >= 2) {\n              // Parameter name and value provided in command\n              const [paramName, ...paramValueParts] = valueParts;\n              setParamName = paramName;\n              setParamValue = paramValueParts.join(':');\n            } else if (valueParts.length === 1) {\n              // Only parameter name provided, get value from target element\n              setParamName = valueParts[0];\n              if (targets.length > 0 && 'value' in targets[0]) {\n                setParamValue = (targets[0] as HTMLInputElement).value;\n              } else {\n                throw createInvokerError(\n                  'URL params-set with single parameter requires a target input element with a value',\n                  ErrorSeverity.ERROR,\n                  {\n                    command: '--url',\n                    element: invoker,\n                    recovery: 'Use --url:params-set:param-name and commandfor pointing to an input element, or provide value: --url:params-set:param-name:value'\n                  }\n                );\n              }\n            } else if (valueParts.length === 0) {\n              // No parameters provided, get parameter name from data attribute and value from target\n              setParamName = invoker?.dataset?.urlParamName || invoker?.dataset?.paramName || '';\n              if (!setParamName) {\n                throw createInvokerError(\n                  'URL params-set without parameters requires data-url-param-name attribute',\n                  ErrorSeverity.ERROR,\n                  {\n                    command: '--url',\n                    element: invoker,\n                    recovery: 'Add data-url-param-name=\"param-name\" or use --url:params-set:param-name:value'\n                  }\n                );\n              }\n              if (targets.length > 0 && 'value' in targets[0]) {\n                setParamValue = (targets[0] as HTMLInputElement).value;\n              } else {\n                throw createInvokerError(\n                  'URL params-set without value parameter requires a target input element',\n                  ErrorSeverity.ERROR,\n                  {\n                    command: '--url',\n                    element: invoker,\n                    recovery: 'Use commandfor pointing to an input element with the parameter value'\n                  }\n                );\n              }\n            } else {\n              throw createInvokerError(\n                'URL params-set requires parameter name and value',\n                ErrorSeverity.ERROR,\n                {\n                  command: '--url',\n                  element: invoker,\n                  recovery: 'Use --url:params-set:param-name:value, or --url:params-set:param-name with commandfor to input element'\n                }\n              );\n            }\n            const currentUrl = new URL(location.href);\n            currentUrl.searchParams.set(setParamName, setParamValue);\n\n            // Check for state preservation\n            const preserveState = invoker?.dataset?.urlPreserveState === 'true';\n            history.replaceState(\n              preserveState ? history.state : null,\n              '',\n              currentUrl.toString()\n            );\n            break;\n\n          case 'params-delete':\n            if (valueParts.length === 0) {\n              throw createInvokerError(\n                'URL params-delete requires a parameter name',\n                ErrorSeverity.ERROR,\n                {\n                  command: '--url',\n                  element: invoker,\n                  recovery: 'Use --url:params-delete:param-name'\n                }\n              );\n            }\n\n            const deleteParamName = valueParts[0];\n            const deleteUrl = new URL(location.href);\n            deleteUrl.searchParams.delete(deleteParamName);\n            history.replaceState(null, '', deleteUrl.toString());\n            break;\n\n          case 'params-clear':\n            const clearUrl = new URL(location.href);\n            clearUrl.search = '';\n            history.replaceState(null, '', clearUrl.toString());\n            break;\n\n          case 'params-all':\n            const allSearchParams = location.search.startsWith('?') ? location.search.substring(1) : location.search;\n            const allParams = Object.fromEntries(new URLSearchParams(allSearchParams));\n            const paramsJson = JSON.stringify(allParams);\n            if (targets.length > 0) {\n              targets[0].textContent = paramsJson;\n            }\n            break;\n\n          case 'hash-get':\n            const hashValue = location.hash.substring(1); // Remove the #\n            if (targets.length > 0) {\n              if ('value' in targets[0]) {\n                (targets[0] as HTMLInputElement).value = hashValue;\n              } else {\n                targets[0].textContent = hashValue;\n              }\n            }\n            break;\n\n          case 'hash-set':\n            let hashToSet: string;\n            if (valueParts.length > 0) {\n              // Hash value provided in command\n              hashToSet = valueParts.join(':');\n            } else {\n              // No hash value provided, get from target element\n              if (targets.length > 0 && 'value' in targets[0]) {\n                hashToSet = (targets[0] as HTMLInputElement).value;\n              } else {\n                throw createInvokerError(\n                  'URL hash-set without value requires a target input element with a value',\n                  ErrorSeverity.ERROR,\n                  {\n                    command: '--url',\n                    element: invoker,\n                    recovery: 'Use --url:hash-set:hash-value or commandfor pointing to an input element'\n                  }\n                );\n              }\n            }\n            location.hash = hashToSet ? `#${hashToSet}` : '';\n            break;\n\n          case 'hash-clear':\n            location.hash = '';\n            break;\n\n          case 'pathname-get':\n            const pathname = location.pathname;\n            if (targets.length > 0) {\n              targets[0].textContent = pathname;\n            }\n            break;\n\n          case 'pathname-set':\n            let newPathname: string;\n            if (valueParts.length > 0) {\n              // Pathname provided in command\n              newPathname = valueParts[0];\n            } else {\n              // No pathname provided, get from target element\n              if (targets.length > 0 && 'value' in targets[0]) {\n                newPathname = (targets[0] as HTMLInputElement).value;\n              } else {\n                throw createInvokerError(\n                  'URL pathname-set without value requires a target input element with a value',\n                  ErrorSeverity.ERROR,\n                  {\n                    command: '--url',\n                    element: invoker,\n                    recovery: 'Use --url:pathname-set:/new-path or commandfor pointing to an input element'\n                  }\n                );\n              }\n            }\n            const pathnameUrl = new URL(location.href);\n            pathnameUrl.pathname = newPathname;\n            history.replaceState(null, '', pathnameUrl.toString());\n            break;\n\n          case 'reload':\n            const forceReload = invoker?.dataset?.urlForceReload === 'true';\n            (location.reload as any)(forceReload);\n            break;\n\n           case 'replace':\n             if (valueParts.length === 0) {\n               throw createInvokerError(\n                 'URL replace requires a URL',\n                 ErrorSeverity.ERROR,\n                 {\n                   command: '--url',\n                   element: invoker,\n                   recovery: 'Use --url:replace:new-url'\n                 }\n               );\n             }\n             const replaceUrl = valueParts.join(':');\n             history.replaceState(null, '', replaceUrl);\n             break;\n\n          case 'navigate':\n            if (valueParts.length === 0) {\n              throw createInvokerError(\n                'URL navigate requires a URL',\n                ErrorSeverity.ERROR,\n                {\n                  command: '--url',\n                  element: invoker,\n                  recovery: 'Use --url:navigate:new-url'\n                }\n              );\n            }\n            const navigateUrl = valueParts.join(':');\n            history.pushState({}, \"\", navigateUrl);\n            break;\n\n          case 'base':\n            const baseUrl = `${location.protocol}//${location.host}`;\n            if (targets.length > 0) {\n              targets[0].textContent = baseUrl;\n            }\n            break;\n\n          case 'full':\n            const fullUrl = location.href;\n            if (targets.length > 0) {\n              targets[0].textContent = fullUrl;\n            }\n            break;\n\n          default:\n            throw createInvokerError(\n              `Unknown URL action \"${action}\"`,\n              ErrorSeverity.ERROR,\n              {\n                command: '--url',\n                element: invoker,\n                context: {\n                  action,\n                  availableActions: [\n                    'params-get', 'params-set', 'params-delete', 'params-clear', 'params-all',\n                    'hash-get', 'hash-set', 'hash-clear',\n                    'pathname-get', 'pathname-set',\n                    'reload', 'replace', 'navigate', 'base', 'full'\n                  ]\n                },\n                recovery: 'Use a valid URL action'\n              }\n            );\n        }\n      } catch (error) {\n        throw createInvokerError(\n          'URL operation failed',\n          ErrorSeverity.ERROR,\n          {\n            command: '--url',\n            element: invoker,\n            cause: error as Error,\n            recovery: 'Check URL format, parameter names, and browser support'\n          }\n        );\n      }\n    });\n\n    // --history command for browser history manipulation with enhanced state management\n    this.register(\"--history\", ({ invoker, getTargets, params }) => {\n      const targets = getTargets();\n\n       // Handle compound actions like 'state:get'\n       let action = params[0];\n       let valueParts = params.slice(1);\n\n       // Check if this is a compound action (e.g., 'state:get')\n       if (params[0] === 'state') {\n         if (params.length === 1) {\n           action = 'state:get';\n           valueParts = [];\n         } else {\n           action = `${params[0]}:${params[1]}`;\n           valueParts = params.slice(2);\n         }\n       } else if (params.length >= 2 && ['length', 'clear'].includes(params[0])) {\n         action = `${params[0]}:${params[1]}`;\n         valueParts = params.slice(2);\n       }\n\n      try {\n        switch (action) {\n          case 'push':\n            if (valueParts.length === 0) {\n              throw createInvokerError(\n                'History push requires a URL',\n                ErrorSeverity.ERROR,\n                {\n                  command: '--history',\n                  element: invoker,\n                  recovery: 'Use --history:push:url or --history:push:url:title:state-data'\n                }\n              );\n            }\n\n            const pushUrl = valueParts[0];\n            const pushTitle = valueParts[1] || '';\n            const pushState = valueParts.slice(2).join(':');\n\n            let state = null;\n            if (pushState) {\n              try {\n                state = JSON.parse(pushState);\n              } catch {\n                state = pushState;\n              }\n            }\n\n            window.history.pushState(state, pushTitle, pushUrl);\n            if (targets.length > 0) {\n              targets[0].textContent = `Pushed ${pushUrl} to history`;\n            }\n            break;\n\n          case 'replace':\n            if (valueParts.length === 0) {\n              throw createInvokerError(\n                'History replace requires a URL',\n                ErrorSeverity.ERROR,\n                {\n                  command: '--history',\n                  element: invoker,\n                  recovery: 'Use --history:replace:url or --history:replace:url:title:state-data'\n                }\n              );\n            }\n\n            const replaceUrl = valueParts[0];\n            const replaceTitle = valueParts[1] || '';\n            const replaceState = valueParts.slice(2).join(':');\n\n            let replaceStateData = null;\n            if (replaceState) {\n              try {\n                replaceStateData = JSON.parse(replaceState);\n              } catch {\n                replaceStateData = replaceState;\n              }\n            }\n\n            window.history.replaceState(replaceStateData, replaceTitle, replaceUrl);\n            if (targets.length > 0) {\n              targets[0].textContent = `Replaced current URL with ${replaceUrl}`;\n            }\n            break;\n\n          case 'back':\n            window.history.back();\n            if (targets.length > 0) {\n              targets[0].textContent = 'Navigated back in history';\n            }\n            break;\n\n          case 'forward':\n            window.history.forward();\n            if (targets.length > 0) {\n              targets[0].textContent = 'Navigated forward in history';\n            }\n            break;\n\n          case 'go':\n            const delta = valueParts[0] ? parseInt(valueParts[0], 10) : -1;\n            if (isNaN(delta)) {\n              throw createInvokerError(\n                'History go requires a valid number',\n                ErrorSeverity.ERROR,\n                {\n                  command: '--history',\n                  element: invoker,\n                  recovery: 'Use --history:go:number (positive for forward, negative for back)'\n                }\n              );\n            }\n            window.history.go(delta);\n            if (targets.length > 0) {\n              targets[0].textContent = `Navigated ${delta > 0 ? 'forward' : 'back'} ${Math.abs(delta)} page(s) in history`;\n            }\n            break;\n\n          case 'state:get':\n            const currentState = window.history.state;\n            const stateJson = JSON.stringify(currentState);\n            if (targets.length > 0) {\n              targets[0].textContent = stateJson;\n            }\n            break;\n\n          case 'state:set':\n            if (valueParts.length === 0) {\n              throw createInvokerError(\n                'History state:set requires state data',\n                ErrorSeverity.ERROR,\n                {\n                  command: '--history',\n                  element: invoker,\n                  recovery: 'Use --history:state:set:json-data'\n                }\n              );\n            }\n\n            const stateData = valueParts.join(':');\n            let newState;\n            try {\n              newState = JSON.parse(stateData);\n            } catch {\n              newState = stateData;\n            }\n\n            window.history.replaceState(newState, document.title);\n            break;\n\n          case 'length':\n            const historyLength = window.history.length;\n            if (targets.length > 0) {\n              targets[0].textContent = historyLength.toString();\n            }\n            break;\n\n          case 'clear':\n            // Clear state but keep URL\n            window.history.replaceState(null, document.title);\n            break;\n\n          default:\n            throw createInvokerError(\n              `Unknown history action \"${action}\"`,\n              ErrorSeverity.ERROR,\n              {\n                command: '--history',\n                element: invoker,\n                context: {\n                  action,\n                  availableActions: [\n                    'push', 'replace', 'back', 'forward', 'go',\n                    'state', 'state:get', 'state:set', 'length', 'clear'\n                  ]\n                },\n                recovery: 'Use a valid history action'\n              }\n            );\n        }\n      } catch (error) {\n        throw createInvokerError(\n          'History operation failed',\n          ErrorSeverity.ERROR,\n          {\n            command: '--history',\n            element: invoker,\n            cause: error as Error,\n            recovery: 'Check browser history support and parameters'\n          }\n        );\n      }\n    });\n\n    // --device command for device APIs with enhanced permission handling\n    this.register(\"--device\", async ({ invoker, getTargets, params }) => {\n      const [action, ...valueParts] = params;\n      const targets = getTargets();\n\n      // Helper function to request permissions\n      const requestPermission = async (permissionName: string): Promise<boolean> => {\n        if ('permissions' in navigator) {\n          try {\n            const permission = await (navigator as any).permissions.query({ name: permissionName });\n            return permission.state === 'granted';\n          } catch {\n            return false;\n          }\n        }\n        return true; // Assume granted if permissions API not available\n      };\n\n      try {\n        switch (action) {\n          case 'vibrate':\n            if (valueParts.length === 0) {\n              throw createInvokerError(\n                'Device vibrate requires a pattern',\n                ErrorSeverity.ERROR,\n                {\n                  command: '--device',\n                  element: invoker,\n                  recovery: 'Use --device:vibrate:200 or --device:vibrate:100:200:100'\n                }\n              );\n            }\n\n            if (!('vibrate' in navigator)) {\n              console.warn('Invokers: Vibration API not supported');\n              return;\n            }\n\n            const pattern = valueParts.map(n => parseInt(n, 10));\n            const vibrateResult = (navigator as any).vibrate(pattern.length === 1 ? pattern[0] : pattern);\n\n            if (!vibrateResult) {\n              console.warn('Invokers: Vibration failed - may be blocked or not supported');\n            }\n            break;\n\n          case 'share':\n            if (!('share' in navigator)) {\n              console.warn('Invokers: Web Share API not supported');\n              return;\n            }\n\n            const shareData: ShareData = {};\n            if (valueParts.length > 0) {\n              // Parse key:value pairs\n              for (let i = 0; i < valueParts.length; i += 2) {\n                const key = valueParts[i];\n                const val = valueParts[i + 1];\n                if (key && val !== undefined) {\n                  if (key === 'url') shareData.url = val;\n                  else if (key === 'text') shareData.text = val;\n                  else if (key === 'title') shareData.title = val;\n                }\n              }\n            }\n\n            try {\n              await (navigator as any).share(shareData);\n              // Dispatch success event\n              document.dispatchEvent(new CustomEvent('device:share:success'));\n            } catch (shareError) {\n              // User cancelled or error occurred\n              document.dispatchEvent(new CustomEvent('device:share:cancelled', {\n                detail: shareError\n              }));\n            }\n            break;\n\n          case 'geolocation:get':\n            if (!('geolocation' in navigator)) {\n              throw createInvokerError(\n                'Geolocation API not supported',\n                ErrorSeverity.ERROR,\n                {\n                  command: '--device',\n                  element: invoker,\n                  recovery: 'Geolocation requires HTTPS and user permission'\n                }\n              );\n            }\n\n            const hasGeoPermission = await requestPermission('geolocation');\n            if (!hasGeoPermission) {\n              console.warn('Invokers: Geolocation permission not granted');\n              document.dispatchEvent(new CustomEvent('geolocation:denied'));\n              return;\n            }\n\n            const geoOptions: PositionOptions = {\n              enableHighAccuracy: invoker?.dataset?.geoHighAccuracy === 'true',\n              timeout: parseInt(invoker?.dataset?.geoTimeout || '10000'),\n              maximumAge: parseInt(invoker?.dataset?.geoMaxAge || '0')\n            };\n\n            navigator.geolocation.getCurrentPosition(\n              (position) => {\n                const data = {\n                  latitude: position.coords.latitude,\n                  longitude: position.coords.longitude,\n                  accuracy: position.coords.accuracy,\n                  altitude: position.coords.altitude,\n                  altitudeAccuracy: position.coords.altitudeAccuracy,\n                  heading: position.coords.heading,\n                  speed: position.coords.speed,\n                  timestamp: position.timestamp\n                };\n                if (targets.length > 0) {\n                  targets[0].textContent = JSON.stringify(data);\n                }\n                // Dispatch success event\n                document.dispatchEvent(new CustomEvent('device:geolocation:success', { detail: data }));\n              },\n              (error) => {\n                const errorData = {\n                  code: error.code,\n                  message: error.message\n                };\n                // Dispatch error event\n                document.dispatchEvent(new CustomEvent('device:geolocation:error', { detail: errorData }));\n              },\n              geoOptions\n            );\n            break;\n\n          case 'orientation:get':\n            if (!window.DeviceOrientationEvent) {\n              console.warn('Invokers: Device Orientation API not supported');\n              return;\n            }\n\n            // Get current orientation if available\n            const orientation = (window as any).screen?.orientation || (window as any).orientation;\n            const orientationData = {\n              angle: orientation?.angle || 0,\n              type: orientation?.type || 'unknown'\n            };\n\n            if (targets.length > 0) {\n              targets[0].textContent = JSON.stringify(orientationData);\n            }\n\n            // Dispatch event\n            document.dispatchEvent(new CustomEvent('device:orientation:current', { detail: orientationData }));\n            break;\n\n          case 'motion:get':\n            if (!window.DeviceMotionEvent) {\n              console.warn('Invokers: Device Motion API not supported');\n              return;\n            }\n\n            // Request permission for iOS 13+\n            if (typeof (DeviceMotionEvent as any).requestPermission === 'function') {\n              try {\n                const permission = await (DeviceMotionEvent as any).requestPermission();\n                if (permission !== 'granted') {\n                  console.warn('Invokers: Device motion permission denied');\n                  return;\n                }\n              } catch {\n                console.warn('Invokers: Failed to request device motion permission');\n                return;\n              }\n            }\n\n            // Note: Actual motion data requires event listeners, this just confirms support\n            const motionSupported = true;\n            if (targets.length > 0) {\n              targets[0].textContent = JSON.stringify({ supported: motionSupported });\n            }\n            break;\n\n          case 'battery:get':\n            if (!('getBattery' in navigator)) {\n              console.warn('Invokers: Battery API not supported');\n              return;\n            }\n\n            try {\n              const battery = await (navigator as any).getBattery();\n              const data = {\n                level: battery.level,\n                charging: battery.charging,\n                chargingTime: battery.chargingTime,\n                dischargingTime: battery.dischargingTime\n              };\n              if (targets.length > 0) {\n                targets[0].textContent = JSON.stringify(data);\n              }\n              // Dispatch event\n              document.dispatchEvent(new CustomEvent('device:battery:status', { detail: data }));\n            } catch (batteryError) {\n              console.warn('Invokers: Failed to get battery status', batteryError);\n            }\n            break;\n\n          case 'clipboard:read':\n            if (!navigator.clipboard?.readText) {\n              console.warn('Invokers: Clipboard read not supported');\n              return;\n            }\n\n            try {\n              const clipboardText = await navigator.clipboard.readText();\n              if (targets.length > 0) {\n                if ('value' in targets[0]) {\n                  (targets[0] as HTMLInputElement).value = clipboardText;\n                } else {\n                  targets[0].textContent = clipboardText;\n                }\n              }\n              document.dispatchEvent(new CustomEvent('device:clipboard:read', { detail: clipboardText }));\n            } catch (clipboardError) {\n              console.warn('Invokers: Clipboard read failed', clipboardError);\n              document.dispatchEvent(new CustomEvent('device:clipboard:denied'));\n            }\n            break;\n\n          case 'clipboard:write':\n            if (!navigator.clipboard?.writeText) {\n              console.warn('Invokers: Clipboard write not supported');\n              return;\n            }\n\n            const textToWrite = valueParts.join(':');\n            if (!textToWrite) {\n              throw createInvokerError(\n                'Clipboard write requires text to copy',\n                ErrorSeverity.ERROR,\n                {\n                  command: '--device',\n                  element: invoker,\n                  recovery: 'Use --device:clipboard:write:text-to-copy'\n                }\n              );\n            }\n\n            try {\n              await navigator.clipboard.writeText(textToWrite);\n              document.dispatchEvent(new CustomEvent('device:clipboard:written', { detail: textToWrite }));\n            } catch (clipboardError) {\n              console.warn('Invokers: Clipboard write failed', clipboardError);\n              document.dispatchEvent(new CustomEvent('device:clipboard:denied'));\n            }\n            break;\n\n          case 'wake-lock':\n            if (!('wakeLock' in navigator)) {\n              console.warn('Invokers: Wake Lock API not supported');\n              return;\n            }\n\n            try {\n              const wakeLock = await (navigator as any).wakeLock.request('screen');\n              // Store wake lock for potential release\n              (window as any)._invokersWakeLock = wakeLock;\n\n              document.dispatchEvent(new CustomEvent('device:wake-lock:acquired'));\n            } catch (wakeError) {\n              console.warn('Invokers: Wake lock request failed', wakeError);\n              document.dispatchEvent(new CustomEvent('device:wake-lock:denied'));\n            }\n            break;\n\n          case 'wake-lock:release':\n            if ((window as any)._invokersWakeLock) {\n              (window as any)._invokersWakeLock.release();\n              delete (window as any)._invokersWakeLock;\n              document.dispatchEvent(new CustomEvent('device:wake-lock:released'));\n            }\n            break;\n\n          default:\n            throw createInvokerError(\n              `Unknown device action \"${action}\"`,\n              ErrorSeverity.ERROR,\n              {\n                command: '--device',\n                element: invoker,\n                context: {\n                  action,\n                  availableActions: [\n                    'vibrate', 'share', 'geolocation:get', 'orientation:get', 'motion:get',\n                    'battery:get', 'clipboard:read', 'clipboard:write', 'wake-lock', 'wake-lock:release'\n                  ]\n                },\n                recovery: 'Use a supported device action'\n              }\n            );\n        }\n      } catch (error) {\n        throw createInvokerError(\n          'Device API operation failed',\n          ErrorSeverity.ERROR,\n          {\n            command: '--device',\n            element: invoker,\n            cause: error as Error,\n            recovery: 'Check device API support, permissions, and parameters'\n          }\n        );\n      }\n    });\n\n    // --a11y command for comprehensive accessibility helpers\n    this.register(\"--a11y\", ({ invoker, getTargets, params }) => {\n      const [action, ...valueParts] = params;\n      const value = valueParts.join(':');\n      const targets = getTargets();\n\n      try {\n        switch (action) {\n          case 'announce':\n            if (!value) {\n              throw createInvokerError(\n                'A11y announce requires text to announce',\n                ErrorSeverity.ERROR,\n                {\n                  command: '--a11y',\n                  element: invoker,\n                  recovery: 'Use --a11y:announce:Your announcement text'\n                }\n              );\n            }\n\n            // Determine announcement priority\n            const priority = invoker?.dataset?.announcePriority || 'polite'; // polite or assertive\n\n            // Create or find aria-live regions\n            let liveRegion = document.getElementById(`invokers-a11y-announcer-${priority}`);\n            if (!liveRegion) {\n              liveRegion = document.createElement('div');\n              liveRegion.id = `invokers-a11y-announcer-${priority}`;\n              liveRegion.setAttribute('aria-live', priority);\n              liveRegion.setAttribute('aria-atomic', 'true');\n              liveRegion.style.position = 'absolute';\n              liveRegion.style.left = '-10000px';\n              liveRegion.style.width = '1px';\n              liveRegion.style.height = '1px';\n              liveRegion.style.overflow = 'hidden';\n              document.body.appendChild(liveRegion);\n            }\n\n            // Clear previous content and set new content\n            liveRegion.textContent = '';\n            // Use setTimeout to ensure screen readers pick up the change\n            setTimeout(() => {\n              liveRegion!.textContent = value;\n            }, 100);\n            break;\n\n          case 'focus':\n            if (targets.length === 0) {\n              throw createInvokerError(\n                'A11y focus requires target elements',\n                ErrorSeverity.ERROR,\n                {\n                  command: '--a11y',\n                  element: invoker,\n                  recovery: 'Use commandfor to specify which element to focus'\n                }\n              );\n            }\n\n            const focusTarget = targets[0] as HTMLElement;\n            if (focusTarget.focus) {\n              // Scroll into view first if needed\n              focusTarget.scrollIntoView({ behavior: 'smooth', block: 'center' });\n\n              // Small delay to ensure scrolling is complete\n              setTimeout(() => {\n                focusTarget.focus();\n\n                // Announce focus for screen readers\n                document.dispatchEvent(new CustomEvent('a11y:focus:changed', {\n                  detail: { element: focusTarget, label: focusTarget.textContent || focusTarget.getAttribute('aria-label') }\n                }));\n              }, 300);\n            }\n            break;\n\n          case 'skip-to':\n            if (!value) {\n              throw createInvokerError(\n                'A11y skip-to requires an element ID',\n                ErrorSeverity.ERROR,\n                {\n                  command: '--a11y',\n                  element: invoker,\n                  recovery: 'Use --a11y:skip-to:element-id'\n                }\n              );\n            }\n\n            const skipTarget = document.getElementById(value);\n            if (skipTarget) {\n              // Ensure the target is focusable\n              if (!skipTarget.hasAttribute('tabindex') && !['button', 'input', 'select', 'textarea', 'a'].includes(skipTarget.tagName.toLowerCase())) {\n                skipTarget.setAttribute('tabindex', '-1');\n              }\n\n              skipTarget.scrollIntoView({ behavior: 'smooth', block: 'start' });\n              setTimeout(() => {\n                (skipTarget as HTMLElement).focus();\n              }, 300);\n            } else {\n              throw createInvokerError(\n                `Element with id \"${value}\" not found`,\n                ErrorSeverity.ERROR,\n                {\n                  command: '--a11y',\n                  element: invoker,\n                  recovery: 'Ensure the target element exists and has the correct ID'\n                }\n              );\n            }\n            break;\n\n          case 'focus-trap':\n            if (!value || !['enable', 'disable'].includes(value)) {\n              throw createInvokerError(\n                'A11y focus-trap requires \"enable\" or \"disable\"',\n                ErrorSeverity.ERROR,\n                {\n                  command: '--a11y',\n                  element: invoker,\n                  recovery: 'Use --a11y:focus-trap:enable or --a11y:focus-trap:disable'\n                }\n              );\n            }\n\n            if (value === 'enable' && targets.length > 0) {\n              const container = targets[0] as HTMLElement;\n\n              // Find all focusable elements within the container\n              const getFocusableElements = () => {\n                return container.querySelectorAll(\n                  'button:not([disabled]), [href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), [tabindex]:not([tabindex=\"-1\"])'\n                );\n              };\n\n              const focusableElements = getFocusableElements();\n              const firstElement = focusableElements[0] as HTMLElement;\n\n              const handleTabKey = (e: KeyboardEvent) => {\n                const currentFocusable = getFocusableElements();\n                const currentFirst = currentFocusable[0] as HTMLElement;\n                const currentLast = currentFocusable[currentFocusable.length - 1] as HTMLElement;\n\n                if (e.key === 'Tab') {\n                  if (e.shiftKey) {\n                    if (document.activeElement === currentFirst) {\n                      currentLast.focus();\n                      e.preventDefault();\n                    }\n                  } else {\n                    if (document.activeElement === currentLast) {\n                      currentFirst.focus();\n                      e.preventDefault();\n                    }\n                  }\n                }\n\n                // Handle Escape key to exit focus trap\n                if (e.key === 'Escape') {\n                  document.dispatchEvent(new CustomEvent('a11y:focus-trap:escape', {\n                    detail: { container }\n                  }));\n                }\n              };\n\n              const handleFocusIn = (e: FocusEvent) => {\n                const target = e.target as HTMLElement;\n                if (!container.contains(target)) {\n                  // Focus moved outside container, bring it back\n                  const focusableElements = getFocusableElements();\n                  if (focusableElements.length > 0) {\n                    (focusableElements[0] as HTMLElement).focus();\n                  }\n                }\n              };\n\n              container.addEventListener('keydown', handleTabKey);\n              document.addEventListener('focusin', handleFocusIn);\n\n              // Store handlers for cleanup\n              (container as any)._a11yFocusTrap = {\n                tabHandler: handleTabKey,\n                focusHandler: handleFocusIn\n              };\n\n              // Focus first element\n              firstElement?.focus();\n\n              // Announce focus trap activation\n              document.dispatchEvent(new CustomEvent('a11y:focus-trap:enabled', {\n                detail: { container }\n              }));\n\n            } else if (value === 'disable' && targets.length > 0) {\n              const container = targets[0] as HTMLElement;\n              const handlers = (container as any)._a11yFocusTrap;\n\n              if (handlers) {\n                container.removeEventListener('keydown', handlers.tabHandler);\n                document.removeEventListener('focusin', handlers.focusHandler);\n                delete (container as any)._a11yFocusTrap;\n              }\n\n              document.dispatchEvent(new CustomEvent('a11y:focus-trap:disabled', {\n                detail: { container }\n              }));\n            }\n            break;\n\n          case 'aria:set':\n            if (!value || !value.includes(':')) {\n              throw createInvokerError(\n                'A11y aria:set requires attribute:value format',\n                ErrorSeverity.ERROR,\n                {\n                  command: '--a11y',\n                  element: invoker,\n                  recovery: 'Use --a11y:aria:set:attribute:value'\n                }\n              );\n            }\n\n            const [ariaAttr, ariaValue] = value.split(':', 2);\n            if (targets.length > 0) {\n              targets.forEach(target => {\n                target.setAttribute(`aria-${ariaAttr}`, ariaValue);\n              });\n            }\n            break;\n\n          case 'aria:remove':\n            if (!value) {\n              throw createInvokerError(\n                'A11y aria:remove requires an attribute name',\n                ErrorSeverity.ERROR,\n                {\n                  command: '--a11y',\n                  element: invoker,\n                  recovery: 'Use --a11y:aria:remove:attribute'\n                }\n              );\n            }\n\n            if (targets.length > 0) {\n              targets.forEach(target => {\n                target.removeAttribute(`aria-${value}`);\n              });\n            }\n            break;\n\n          case 'heading-level':\n            if (!value || !['1', '2', '3', '4', '5', '6'].includes(value)) {\n              throw createInvokerError(\n                'A11y heading-level requires a level 1-6',\n                ErrorSeverity.ERROR,\n                {\n                  command: '--a11y',\n                  element: invoker,\n                  recovery: 'Use --a11y:heading-level:1-6'\n                }\n              );\n            }\n\n            if (targets.length > 0) {\n              targets.forEach(target => {\n                if (target.tagName.match(/^H[1-6]$/)) {\n                  // Change heading level by changing tag\n                  const newTag = `H${value}`;\n                  const newElement = document.createElement(newTag);\n                  Array.from(target.attributes).forEach(attr => {\n                    newElement.setAttribute(attr.name, attr.value);\n                  });\n                  newElement.innerHTML = target.innerHTML;\n                  target.parentNode?.replaceChild(newElement, target);\n                } else {\n                  target.setAttribute('aria-level', value);\n                }\n              });\n            }\n            break;\n\n          default:\n            throw createInvokerError(\n              `Unknown accessibility action \"${action}\"`,\n              ErrorSeverity.ERROR,\n              {\n                command: '--a11y',\n                element: invoker,\n                context: {\n                  action,\n                  availableActions: [\n                    'announce', 'focus', 'skip-to', 'focus-trap',\n                    'aria:set', 'aria:remove', 'heading-level'\n                  ]\n                },\n                recovery: 'Use a valid accessibility action'\n              }\n            );\n        }\n      } catch (error) {\n        throw createInvokerError(\n          'Accessibility operation failed',\n          ErrorSeverity.ERROR,\n          {\n            command: '--a11y',\n            element: invoker,\n            cause: error as Error,\n            recovery: 'Check accessibility requirements and target elements'\n          }\n        );\n      }\n    });\n\n    // Pipeline command for template-based workflows\n    this.register(\"--pipeline\", async ({ invoker, params }) => {\n      const [action, pipelineId] = params;\r\n      \r\n      if (action !== 'execute') {\r\n        throw createInvokerError(\r\n          `Invalid pipeline action \"${action}\". Only \"execute\" is supported`,\r\n          ErrorSeverity.ERROR,\r\n          {\r\n            command: '--pipeline',\r\n            element: invoker,\r\n            context: { action, availableActions: ['execute'] },\r\n            recovery: 'Use --pipeline:execute:your-pipeline-id'\r\n          }\r\n        );\r\n      }\r\n\r\n      if (!pipelineId) {\r\n        throw createInvokerError(\r\n          'Pipeline command requires a pipeline ID',\r\n          ErrorSeverity.ERROR,\r\n          {\r\n            command: '--pipeline',\r\n            element: invoker,\r\n            context: { params },\r\n            recovery: 'Use --pipeline:execute:your-pipeline-id'\r\n          }\r\n        );\r\n      }\r\n\r\n      const context = this.createContext(\r\n        { command: '--pipeline:execute', source: invoker, target: invoker } as any,\r\n        '--pipeline:execute',\r\n        params\r\n      );\r\n\r\n       await this.pipelineManager.executePipeline(pipelineId, context);\n     });\n   }\n\n   /**\n    * Registers a plugin with middleware hooks.\n    */\n   registerPlugin(plugin: InvokerPlugin): void {\n     if (this.plugins.has(plugin.name)) {\n       throw createInvokerError(\n         `Plugin \"${plugin.name}\" is already registered`,\n         ErrorSeverity.ERROR,\n         {\n           recovery: 'Unregister the plugin first or use a different name'\n         }\n       );\n     }\n\n     this.plugins.set(plugin.name, plugin);\n\n     // Register middleware hooks\n     if (plugin.middleware) {\n       for (const [hookPoint, middleware] of Object.entries(plugin.middleware)) {\n         if (middleware) {\n           this.registerMiddleware(hookPoint as HookPoint, middleware);\n         }\n       }\n     }\n\n     // Call onRegister if provided\n     if (plugin.onRegister) {\n       plugin.onRegister();\n     }\n   }\n\n   /**\n    * Unregisters a plugin and removes its middleware.\n    */\n   unregisterPlugin(name: string): void {\n     const plugin = this.plugins.get(name);\n     if (!plugin) {\n       throw createInvokerError(\n         `Plugin \"${name}\" is not registered`,\n         ErrorSeverity.ERROR,\n         {\n           recovery: 'Check the plugin name and ensure it is registered'\n         }\n       );\n     }\n\n     // Call onUnregister if provided\n     if (plugin.onUnregister) {\n       plugin.onUnregister();\n     }\n\n     // Remove middleware hooks\n     if (plugin.middleware) {\n       for (const [hookPoint, middleware] of Object.entries(plugin.middleware)) {\n         if (middleware) {\n           this.unregisterMiddleware(hookPoint as HookPoint, middleware);\n         }\n       }\n     }\n\n     this.plugins.delete(name);\n   }\n\n   /**\n    * Registers a middleware function for a specific hook point.\n    */\n   registerMiddleware(hookPoint: HookPoint, middleware: MiddlewareFunction): void {\n     if (!this.middleware.has(hookPoint)) {\n       this.middleware.set(hookPoint, []);\n     }\n     this.middleware.get(hookPoint)!.push(middleware);\n   }\n\n   /**\n    * Unregisters a middleware function from a specific hook point.\n    */\n   unregisterMiddleware(hookPoint: HookPoint, middleware: MiddlewareFunction): void {\n     const middlewares = this.middleware.get(hookPoint);\n     if (middlewares) {\n       const index = middlewares.indexOf(middleware);\n       if (index > -1) {\n         middlewares.splice(index, 1);\n       }\n     }\n   }\n\n   /**\n    * Executes middleware for a specific hook point.\n    */\n   async executeMiddleware(hookPoint: HookPoint, context: MiddlewareContext): Promise<void> {\n     const middlewares = this.middleware.get(hookPoint);\n     if (middlewares) {\n       for (const middleware of middlewares) {\n         try {\n           await middleware(context);\n         } catch (error) {\n           logInvokerError(\n             createInvokerError(\n               `Middleware execution failed for hook \"${hookPoint}\"`,\n               ErrorSeverity.ERROR,\n               {\n                 cause: error as Error,\n                 recovery: 'Check the middleware implementation for errors'\n               }\n             )\n           );\n         }\n       }\n     }\n   }\n   }\n\n\n\n\n\n // --- Pipeline Manager Class ---\n\r\n/**\r\n * Manages template-based command pipelines using <pipeline-step> elements.\r\n */\r\nclass PipelineManager {\r\n  private invokerManager: InvokerManager;\r\n\r\n  constructor(invokerManager: InvokerManager) {\r\n    this.invokerManager = invokerManager;\r\n  }\r\n\r\n  /**\r\n   * Executes a pipeline defined in a template element.\r\n   */\r\n  async executePipeline(pipelineId: string, context: CommandContext): Promise<void> {\r\n    const template = document.getElementById(pipelineId) as HTMLTemplateElement;\r\n    if (!template?.hasAttribute('data-pipeline')) {\r\n      console.warn(`Invokers: Pipeline template \"${pipelineId}\" not found or not marked with data-pipeline attribute`);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const steps = this.parsePipelineSteps(template);\r\n      let previousResult: CommandExecutionResult = { success: true };\r\n\r\n      for (const step of steps) {\r\n        if (this.shouldExecuteStep(step, previousResult)) {\r\n          if (step.delay && step.delay > 0) {\r\n            await new Promise(resolve => setTimeout(resolve, step.delay));\r\n          }\r\n\r\n          previousResult = await this.executeStep(step, context);\r\n\r\n          if (step.once) {\r\n            this.removeStepFromTemplate(template, step);\r\n          }\r\n\r\n          // If a step fails and there are no error handlers, stop execution\r\n          if (!previousResult.success && !this.hasErrorHandler(steps, steps.indexOf(step))) {\r\n            console.warn(`Invokers: Pipeline \"${pipelineId}\" stopped due to failed step: ${step.command}`);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(`Invokers: Pipeline \"${pipelineId}\" execution failed:`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses pipeline steps from a template element.\r\n   */\r\n  private parsePipelineSteps(template: HTMLTemplateElement): PipelineStep[] {\r\n    const steps: PipelineStep[] = [];\r\n    const content = template.content;\r\n    const stepElements = content.querySelectorAll('pipeline-step');\r\n\r\n    stepElements.forEach((stepEl, index) => {\r\n      const command = stepEl.getAttribute('command');\r\n      const target = stepEl.getAttribute('target');\r\n\r\n      if (!command || !target) {\r\n        console.warn(`Invokers: Pipeline step ${index} missing required command or target attribute`);\r\n        return;\r\n      }\r\n\r\n      const step: PipelineStep = {\r\n        command,\r\n        target,\r\n        condition: (stepEl.getAttribute('condition') as 'success' | 'error' | 'always') || 'always',\r\n        once: stepEl.hasAttribute('once'),\r\n        delay: parseInt(stepEl.getAttribute('delay') || '0', 10)\r\n      };\r\n\r\n      // Extract data attributes\r\n      const data: Record<string, string> = {};\r\n      Array.from(stepEl.attributes).forEach(attr => {\r\n        if (attr.name.startsWith('data-')) {\r\n          data[attr.name] = attr.value;\r\n        }\r\n      });\r\n      \r\n      if (Object.keys(data).length > 0) {\r\n        step.data = data;\r\n      }\r\n\r\n      steps.push(step);\r\n    });\r\n\r\n    return steps;\r\n  }\r\n\r\n  /**\r\n   * Determines if a pipeline step should execute based on condition and previous result.\r\n   */\r\n  private shouldExecuteStep(step: PipelineStep, previousResult: CommandExecutionResult): boolean {\r\n    switch (step.condition) {\r\n      case 'success':\r\n        return previousResult.success === true;\r\n      case 'error':\r\n        return previousResult.success === false;\r\n      case 'always':\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes a single pipeline step.\r\n   */\r\n  private async executeStep(step: PipelineStep, _context: CommandContext): Promise<CommandExecutionResult> {\r\n    try {\r\n      // Create a synthetic invoker for the pipeline step\r\n      const syntheticInvoker = document.createElement('button');\r\n      syntheticInvoker.setAttribute('type', 'button');\r\n      syntheticInvoker.setAttribute('command', step.command.startsWith('--') ? step.command : `--${step.command}`);\r\n      syntheticInvoker.setAttribute('commandfor', step.target);\r\n\r\n      // Apply data attributes from the pipeline step\r\n      if (step.data) {\r\n        Object.entries(step.data).forEach(([key, value]) => {\r\n          syntheticInvoker.setAttribute(key, value);\r\n        });\r\n      }\r\n\r\n      await this.invokerManager.executeCommand(step.command, step.target, syntheticInvoker);\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      return { success: false, error: error as Error };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if there are error handlers after a given step index.\r\n   */\r\n  private hasErrorHandler(steps: PipelineStep[], currentIndex: number): boolean {\r\n    return steps.slice(currentIndex + 1).some(step => step.condition === 'error');\r\n  }\r\n\r\n  /**\r\n   * Removes a step from the template (for once-only steps).\r\n   */\r\n  private removeStepFromTemplate(template: HTMLTemplateElement, stepToRemove: PipelineStep): void {\r\n    const content = template.content;\r\n    const stepElements = content.querySelectorAll('pipeline-step');\r\n    \r\n    stepElements.forEach(stepEl => {\r\n      if (stepEl.getAttribute('command') === stepToRemove.command && \r\n          stepEl.getAttribute('target') === stepToRemove.target) {\r\n        stepEl.remove();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n// --- AndThen Manager Class ---\r\n\r\n// --- AndThen Manager Class ---\r\n\r\n/**\r\n * Manages declarative command chaining via <and-then> elements. This class\r\n * is responsible for parsing the nested structure of <and-then> tags,\r\n * respecting conditions and delays, and executing them sequentially without\r\n * causing infinite loops.\r\n */\r\nclass AndThenManager {\r\n  private invokerManager: InvokerManager;\r\n\r\n  constructor(invokerManager: InvokerManager) {\r\n    this.invokerManager = invokerManager;\r\n  }\r\n\r\n   /**\n    * Processes <and-then> elements after a command execution. This is the main\n    * entry point that finds top-level <and-then> children of the invoker and\n    * kicks off the recursive execution process.\n    *\n    * @param invokerElement The original <button> that was activated.\n    * @param executionResult The success/failure result of the invoker's command.\n    * @param primaryTarget The main target of the invoker's command.\n    */\n   public async processAndThen(\n     invokerElement: HTMLButtonElement,\n     executionResult: CommandExecutionResult,\n     primaryTarget: HTMLElement\n   ): Promise<void> {\n     // Find all *top-level* and-then elements that are direct children of the invoker.\n     const topLevelAndThens = Array.from(invokerElement.children).filter(\n       child => child.tagName.toLowerCase() === 'and-then'\n     ) as HTMLElement[];\n\r\n    // Sequentially execute each top-level chain.\r\n    for (const andThenElement of topLevelAndThens) {\r\n      // The initial recursive call starts here.\r\n      await this.executeAndThenRecursively(\r\n        andThenElement,\r\n        invokerElement,\r\n        executionResult,\r\n        primaryTarget\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes a command from an <and-then> element and its descendants recursively.\r\n   * This is the core of the chaining logic.\r\n   *\r\n   * @param andThenElement The current <and-then> element to execute.\r\n   * @param originalInvoker The very first button in the chain, used for context.\r\n   * @param parentResult The execution result from the parent command.\r\n   * @param primaryTarget The original target, used as a fallback.\r\n   * @param depth The current recursion depth to prevent stack overflows.\r\n   */\r\n   private async executeAndThenRecursively(\n     andThenElement: HTMLElement,\n     originalInvoker: HTMLButtonElement,\n     parentResult: CommandExecutionResult,\n     primaryTarget: HTMLElement,\n     depth: number = 0\n   ): Promise<void> {\n     // 1. Safety Check: Prevent infinite recursion.\n     if (depth > 25) {\n       logInvokerError(createInvokerError(\n         'Maximum <and-then> depth reached, stopping execution to prevent infinite loop.',\n         ErrorSeverity.CRITICAL,\n         { element: andThenElement, recovery: 'Check for circular or excessively deep <and-then> nesting.' }\n       ));\n       return;\n     }\n\n     // 2. State Check: Skip elements that have already run or are disabled.\n     const state = andThenElement.dataset.state;\n     if (state === 'disabled' || state === 'completed') {\n       return;\n     }\n\n     // 3. Conditional Check: Execute only if the condition is met.\n     const condition = andThenElement.dataset.condition || 'always';\n     if (!this.shouldExecuteCondition(condition, parentResult)) {\n       return;\n     }\n\r\n    // 4. Get Command Details\r\n    const command = andThenElement.getAttribute('command');\r\n    const targetId = andThenElement.getAttribute('commandfor') || originalInvoker.getAttribute('commandfor') || primaryTarget.id;\r\n    const delay = parseInt(andThenElement.dataset.delay || '0', 10);\r\n\r\n    if (!command || !targetId) {\r\n      logInvokerError(createInvokerError(\r\n        '<and-then> element is missing required \"command\" or \"commandfor\" attribute.',\r\n        ErrorSeverity.WARNING,\r\n        { element: andThenElement }\r\n      ));\r\n      return;\r\n    }\r\n\r\n    // 5. Apply Delay\r\n    if (delay > 0) {\r\n      await new Promise(resolve => setTimeout(resolve, delay));\r\n    }\r\n\r\n     // 6. Execute the Command\n     let currentExecutionResult: CommandExecutionResult = { success: true };\n     try {\n       // Use a synthetic invoker to pass context attributes like `data-*`\n       // without re-triggering the top-level follow-up logic on the original invoker.\n       const syntheticInvoker = this.createSyntheticInvoker(andThenElement, command, targetId);\n       await this.invokerManager.executeCommand(command, targetId, syntheticInvoker);\n     } catch (error) {\n       // If the command fails, capture the result to pass to children.\n       currentExecutionResult = { success: false, error: error as Error };\n     }\n\r\n    // 7. Update State (Post-Execution)\r\n    if (andThenElement.hasAttribute('data-once')) {\r\n      andThenElement.remove();\r\n    } else {\r\n      andThenElement.dataset.state = 'completed';\r\n    }\r\n\r\n    // 8. Recurse for Children\r\n    const nestedAndThens = Array.from(andThenElement.children).filter(\r\n      child => child.tagName.toLowerCase() === 'and-then'\r\n    ) as HTMLElement[];\r\n\r\n    for (const nested of nestedAndThens) {\r\n      await this.executeAndThenRecursively(\r\n        nested,\r\n        originalInvoker,\r\n        currentExecutionResult, // Pass the result of *this* command down.\r\n        primaryTarget,\r\n        depth + 1\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a temporary, in-memory <button> to act as the invoker for an\r\n   * <and-then> command, allowing `data-*` attributes to be passed for context.\r\n   */\r\n  private createSyntheticInvoker(andThenElement: HTMLElement, command: string, targetId: string): HTMLButtonElement {\r\n    const syntheticInvoker = document.createElement('button');\r\n    syntheticInvoker.setAttribute('command', command.startsWith('--') ? command : `--${command}`);\r\n    syntheticInvoker.setAttribute('commandfor', targetId);\r\n\r\n    // Copy all data attributes from the <and-then> to the synthetic button\r\n    // so the command's context can access them via `invoker.dataset`.\r\n    for (const key in andThenElement.dataset) {\r\n      syntheticInvoker.dataset[key] = andThenElement.dataset[key];\r\n    }\r\n    return syntheticInvoker;\r\n  }\r\n\r\n  /**\r\n   * Determines if a condition is met based on the result of the parent command.\r\n   */\r\n  private shouldExecuteCondition(condition: string, result: CommandExecutionResult): boolean {\r\n    switch (condition.toLowerCase()) {\r\n      case 'success':\r\n        return result.success === true;\r\n      case 'error':\r\n        return result.success === false;\r\n      case 'always':\r\n        return true;\r\n      default:\r\n        logInvokerError(createInvokerError(\r\n          `Unknown condition for <and-then> element: \"${condition}\"`,\r\n          ErrorSeverity.WARNING\r\n        ));\r\n        return false; // Fail safe\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// --- Initialize and Expose API ---\n\n// Get the SINGLETON instance of the manager.\nconst invokerInstance = InvokerManager.getInstance();\n\n// Set up global API\nconst setupGlobalAPI = () => {\n  let targetWindow = null;\n\n  // Try globalThis.window (browser)\n  if (typeof globalThis !== \"undefined\" && (globalThis as any).window) {\n    targetWindow = (globalThis as any).window;\n  }\n\n  // Try global.window (Node.js with jsdom)\n  if (!targetWindow && typeof global !== \"undefined\" && (global as any).window) {\n    targetWindow = (global as any).window;\n  }\n\n  // Try window directly\n  if (!targetWindow && typeof window !== \"undefined\") {\n    targetWindow = window;\n  }\n\n  // Set on the found target window\n  if (targetWindow) {\n    targetWindow.Invoker = {\n      // Bind all public methods to the one true instance.\n      register: invokerInstance.register.bind(invokerInstance),\n      executeCommand: invokerInstance.executeCommand.bind(invokerInstance),\n\n      // *** FIX: Expose the new registration function on the global API. ***\n      registerAll: invokerInstance.registerExtendedCommands.bind(invokerInstance),\n      parseCommandString,\n      createCommandString,\n      instance: invokerInstance,\n      get debug() { return isDebugMode; },\n      set debug(value: boolean) {\n        isDebugMode = value;\n        console.log(`Invokers: Debug mode ${value ? 'enabled' : 'disabled'}.`);\n      },\n      getStats: () => invokerInstance['performanceMonitor'].getStats(),\n      getRegisteredCommands: () => Array.from(invokerInstance['commands'].keys()),\n      validateElement,\n      createError: createInvokerError,\n      logError: logInvokerError,\n\n      // Plugin and middleware API\n      registerPlugin: invokerInstance.registerPlugin.bind(invokerInstance),\n      unregisterPlugin: invokerInstance.unregisterPlugin.bind(invokerInstance),\n      registerMiddleware: invokerInstance.registerMiddleware.bind(invokerInstance),\n      unregisterMiddleware: invokerInstance.unregisterMiddleware.bind(invokerInstance),\n\n      reset() {\n        invokerInstance['commands'].clear();\n        invokerInstance['commandStates'].clear();\n        invokerInstance['sortedCommandKeys'] = [];\n        invokerInstance['plugins'].clear();\n        invokerInstance['middleware'].clear();\n        console.log('Invokers: Reset complete.');\n      }\n    };\n  }\n\n  // Also try to set on the global window if it exists (for test environments)\n  if (typeof window !== \"undefined\" && !window.Invoker) {\n    window.Invoker = targetWindow?.Invoker || {\n      // Bind all public methods to the one true instance.\n      register: invokerInstance.register.bind(invokerInstance),\n      executeCommand: invokerInstance.executeCommand.bind(invokerInstance),\n\n      // *** FIX: Expose the new registration function on the global API. ***\n      registerAll: invokerInstance.registerExtendedCommands.bind(invokerInstance),\n      parseCommandString,\n      createCommandString,\n      instance: invokerInstance,\n      get debug() { return isDebugMode; },\n      set debug(value: boolean) {\n        isDebugMode = value;\n        console.log(`Invokers: Debug mode ${value ? 'enabled' : 'disabled'}.`);\n      },\n      getStats: () => invokerInstance['performanceMonitor'].getStats(),\n      getRegisteredCommands: () => Array.from(invokerInstance['commands'].keys()),\n      validateElement,\n      createError: createInvokerError,\n      logError: logInvokerError,\n\n      // Plugin and middleware API\n      registerPlugin: invokerInstance.registerPlugin.bind(invokerInstance),\n      unregisterPlugin: invokerInstance.unregisterPlugin.bind(invokerInstance),\n      registerMiddleware: invokerInstance.registerMiddleware.bind(invokerInstance),\n      unregisterMiddleware: invokerInstance.unregisterMiddleware.bind(invokerInstance),\n\n      reset() {\n        invokerInstance['commands'].clear();\n        invokerInstance['commandStates'].clear();\n        invokerInstance['sortedCommandKeys'] = [];\n        invokerInstance['plugins'].clear();\n        invokerInstance['middleware'].clear();\n        console.log('Invokers: Reset complete.');\n      }\n    };\n  }\n};\n\nsetupGlobalAPI();\n\r\n\n\r\n// --- Export Interest Invokers functionality ---\r\nexport { \r\n  isInterestInvokersSupported, \r\n  applyInterestInvokers, \r\n  createInterestEvent \r\n} from './interest-invokers';\r\n\r\nexport type { \r\n  InterestEvent, \r\n  InterestEventInit, \r\n  InterestInvokerElement \r\n} from './interest-invokers';\r\n\r\nexport default invokerInstance;", "/**\r\n * @file polyfill.ts\r\n * @summary A high-fidelity polyfill for the W3C/WHATWG HTML Invoker Buttons proposal.\r\n * @license MIT (Assumed from project context)\r\n * @author Keith Cirkel, Luke Warlow (original authors of explainer/polyfill)\r\n * @description This code implements the proposed `command` and `commandfor` attributes for HTMLButtonElement\r\n *              and the `CommandEvent` interface, allowing declarative UI interactions in browsers\r\n *              that do not yet natively support these features.\r\n *              It includes handling for popovers and dialogs, and a mechanism for custom commands.\r\n */\r\n\r\nexport function isSupported() {\n  const target = typeof window !== \"undefined\" ? window : globalThis;\n  return (\n    typeof HTMLButtonElement !== \"undefined\" &&\n    \"command\" in HTMLButtonElement.prototype &&\n    // @ts-ignore\n    \"source\" in ((target.CommandEvent || {}).prototype || {})\n  );\n}\n\r\n// NOTE: The `isPolyfilled` function from the original polyfill code will not be exported\r\n// directly from invokers itself, but its logic is relevant to understanding when to apply.\r\n// For `invokers`, we will always apply the polyfill to ensure a consistent environment\r\n// and to guarantee the `CommandEvent` and attributes are present, even if native support exists.\r\n\r\nfunction enumerate(obj: object, key: PropertyKey, enumerable: boolean = true) {\r\n  Object.defineProperty(obj, key, {\r\n    ...Object.getOwnPropertyDescriptor(obj, key),\r\n    enumerable,\r\n  });\r\n}\r\n\r\nfunction getRootNode(node: Node): Node {\r\n  if (node && typeof node.getRootNode === \"function\") {\r\n    return node.getRootNode();\r\n  }\r\n  // Fallback for older environments or unusual node types\r\n  if (node && node.parentNode) return getRootNode(node.parentNode);\r\n  return node;\r\n}\r\n\r\nconst commandEventSourceElements = new WeakMap<Event, Element | null>();\r\nconst commandEventActions = new WeakMap<Event, string>();\r\n\r\n/**\r\n * Represents a declarative `command` event dispatched from an invoker button to its target.\r\n * This class mirrors the proposed W3C/WHATWG `CommandEvent` interface.\r\n */\r\ndeclare global {\r\n  interface CommandEventInit extends EventInit {\r\n    command?: string;\r\n    source?: Element;\r\n  }\r\n  interface CommandEvent extends Event {\r\n    readonly command: string;\r\n    readonly source: HTMLButtonElement | null;\r\n  }\r\n}\r\n\r\nclass CommandEventPolyfill extends Event {\r\n  constructor(type: string, invokeEventInit: CommandEventInit = {}) {\r\n    super(type, invokeEventInit);\r\n    const { source, command } = invokeEventInit;\r\n    if (source != null && !(source instanceof Element)) {\r\n      throw new TypeError(`source must be an element`);\r\n    }\r\n    commandEventSourceElements.set(this, source || null);\r\n    commandEventActions.set(\r\n      this,\r\n      command !== undefined ? String(command) : \"\",\r\n    );\r\n  }\r\n\r\n  get [Symbol.toStringTag]() {\r\n    return \"CommandEvent\";\r\n  }\r\n\r\n  /**\r\n   * The element (usually a <button>) that initiated the command.\r\n   * If the event's target is in a different root (e.g., Shadow DOM),\r\n   * this will return the host of the invoker's root.\r\n   */\r\n  get source(): Element | null {\r\n    if (!commandEventSourceElements.has(this)) {\r\n      throw new TypeError(\"illegal invocation\");\r\n    }\r\n    const source = commandEventSourceElements.get(this);\r\n    if (!(source instanceof Element)) return null;\r\n    const invokerRoot = getRootNode(source);\r\n    // Ensure the source element is within the same document or shadow root context\r\n    if (invokerRoot !== getRootNode(this.target as Node || document)) {\r\n      // If cross-root, return the shadow host for encapsulation\r\n      return invokerRoot instanceof ShadowRoot ? invokerRoot.host : null;\r\n    }\r\n    return source;\r\n  }\r\n\r\n  /**\r\n   * The command string that was invoked (e.g., \"show-modal\", \"--my-custom-command\").\r\n   */\r\n  get command(): string {\r\n    if (!commandEventActions.has(this)) {\r\n      throw new TypeError(\"illegal invocation\");\r\n    }\r\n    return commandEventActions.get(this) || \"\";\r\n  }\r\n\r\n  // Deprecated properties for compatibility with older proposals\r\n  get action(): never {\r\n    throw new Error(\r\n      \"CommandEvent#action was renamed to CommandEvent#command\",\r\n    );\r\n  }\r\n\r\n  get invoker(): never {\r\n    throw new Error(\r\n      \"CommandEvent#invoker was renamed to CommandEvent#source\",\r\n    );\r\n  }\r\n}\r\nenumerate(CommandEventPolyfill.prototype, \"source\");\r\nenumerate(CommandEventPolyfill.prototype, \"command\");\r\n\r\n// Deprecated InvokeEvent for compatibility\r\nclass InvokeEventPolyfill extends Event {\r\n  constructor(type: string, invokeEventInit: EventInit = {}) {\r\n    super(type, invokeEventInit);\r\n    throw new Error(\r\n      \"InvokeEvent has been deprecated, it has been renamed to `CommandEvent`\",\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nconst invokerAssociatedElements = new WeakMap<HTMLElement, Element>();\r\n\r\n/**\r\n * Mixin to apply `commandforElement` and `command` properties to `HTMLButtonElement`.\r\n * This extends the `HTMLButtonElement` prototype to include the declarative command API.\r\n * @param ElementClass The HTML element class to extend (e.g., HTMLButtonElement).\r\n */\r\nfunction applyInvokerMixin(ElementClass: typeof HTMLElement) {\r\n  Object.defineProperties(ElementClass.prototype, {\r\n    /**\r\n     * Imperatively sets or gets the element controlled by the button.\r\n     * Reflects the `commandfor` attribute.\r\n     */\r\n    commandForElement: {\r\n      enumerable: true,\r\n      configurable: true,\r\n      set(targetElement: Element | null) {\r\n        // Handle deprecated attributes for warnings\r\n        if (this.hasAttribute(\"invokeaction\")) {\r\n          throw new TypeError(\r\n            \"Element has deprecated `invokeaction` attribute, replace with `command`\",\r\n          );\r\n        } else if (this.hasAttribute(\"invoketarget\")) {\r\n          throw new TypeError(\r\n            \"Element has deprecated `invoketarget` attribute, replace with `commandfor`\",\r\n          );\r\n        } else if (targetElement === null) {\r\n          // If null, remove the attribute and clear associated element\r\n          this.removeAttribute(\"commandfor\");\r\n          invokerAssociatedElements.delete(this);\r\n        } else if (!(targetElement instanceof Element)) {\r\n          // Ensure valid element type\r\n          throw new TypeError(`commandForElement must be an element or null`);\r\n        } else {\r\n          // Set attribute (value is irrelevant for IDREF, just presence)\r\n          this.setAttribute(\"commandfor\", targetElement.id || \"\"); // Use ID if available\r\n          const targetRootNode = getRootNode(targetElement);\r\n          const thisRootNode = getRootNode(this);\r\n          // Only associate if in the same document/root, or owner document\r\n          if (\r\n            thisRootNode === targetRootNode ||\r\n            targetRootNode === this.ownerDocument\r\n          ) {\r\n            invokerAssociatedElements.set(this, targetElement);\r\n          } else {\r\n            invokerAssociatedElements.delete(this); // Remove if cross-root\r\n          }\r\n        }\r\n      },\r\n      get(): Element | null {\n        // Buttons, inputs, and textareas support commandfor\n        if (this.localName !== \"button\" && this.localName !== \"input\" && this.localName !== \"textarea\") {\n          return null;\n        }\n        // Warn for deprecated attributes\r\n        if (\r\n          this.hasAttribute(\"invokeaction\") ||\r\n          this.hasAttribute(\"invoketarget\")\r\n        ) {\r\n          console.warn(\r\n            \"Element has deprecated `invoketarget` or `invokeaction` attribute, use `commandfor` and `command` instead\",\r\n          );\r\n          return null;\r\n        }\r\n        // Disabled buttons don't invoke\r\n        if (this.disabled) {\r\n          return null;\r\n        }\r\n        // Buttons in forms must be type=\"button\" to use commandfor\r\n        if (this.form && this.getAttribute(\"type\") !== \"button\") {\r\n          console.warn(\r\n            \"Element with `commandfor` is a form participant. \" +\r\n              \"It should explicitly set `type=button` in order for `commandfor` to work\",\r\n          );\r\n          return null;\r\n        }\r\n        // First, check imperatively set element\r\n        const targetElement = invokerAssociatedElements.get(this);\r\n        if (targetElement) {\r\n          if (targetElement.isConnected) {\r\n            return targetElement;\r\n          } else {\r\n            invokerAssociatedElements.delete(this); // Clean up disconnected elements\r\n            return null;\r\n          }\r\n        }\r\n        // Fallback to IDREF lookup if not imperatively set\r\n        const root = getRootNode(this);\r\n        const idref = this.getAttribute(\"commandfor\");\r\n        if (\r\n          (root instanceof Document || root instanceof ShadowRoot) &&\r\n          idref\r\n        ) {\r\n          return root.getElementById(idref) || null;\r\n        }\r\n        return null;\r\n      },\r\n    },\r\n    /**\r\n     * Gets or sets the command string.\r\n     * Handles normalization for built-in commands and enforces `--` prefix for custom commands.\r\n     */\r\n    command: {\r\n      enumerable: true,\r\n      configurable: true,\r\n      get(): string {\r\n        const value = this.getAttribute(\"command\") || \"\";\r\n        // Custom commands always return their raw value (starting with --)\r\n        if (value.startsWith(\"--\")) return value;\r\n        // Built-in commands are normalized to lowercase\r\n        const valueLower = value.toLowerCase();\r\n        switch (valueLower) {\r\n          // Core commands (already implemented)\r\n          case \"show-modal\":\r\n          case \"close\":\r\n          case \"request-close\":\r\n          case \"toggle-popover\":\r\n          case \"hide-popover\":\r\n          case \"show-popover\":\r\n          \r\n          // Future commands - Openable elements\r\n          case \"toggle-openable\":\r\n          case \"close-openable\":\r\n          case \"open-openable\":\r\n          \r\n          // Details elements\r\n          case \"toggle\":\r\n          case \"open\":\r\n          \r\n          // Picker elements\r\n          case \"show-picker\":\r\n          \r\n          // Media elements\r\n          case \"play-pause\":\r\n          case \"pause\":\r\n          case \"play\":\r\n          case \"toggle-muted\":\r\n          \r\n          // Fullscreen elements\r\n          case \"toggle-fullscreen\":\r\n          case \"request-fullscreen\":\r\n          case \"exit-fullscreen\":\r\n          \r\n          // Clipboard and sharing\r\n          case \"copy-text\":\r\n          case \"share\":\r\n          \r\n          // Number input elements\r\n          case \"step-up\":\r\n          case \"step-down\":\r\n            return valueLower;\r\n        }\r\n        return \"\"; // Invalid command if not built-in or custom\r\n      },\r\n      set(value: string) {\r\n        this.setAttribute(\"command\", value);\r\n      },\r\n    },\r\n\r\n    // Deprecated properties for compatibility with older proposals\r\n    invokeAction: {\r\n      enumerable: false,\r\n      configurable: true,\r\n      get(): never {\r\n        throw new Error(\r\n          `invokeAction is deprecated. It has been renamed to command`,\r\n        );\r\n      },\r\n      set(_value: string): never {\r\n        throw new Error(\r\n          `invokeAction is deprecated. It has been renamed to command`,\r\n        );\r\n      },\r\n    },\r\n\r\n    invokeTargetElement: {\r\n      enumerable: false,\r\n      configurable: true,\r\n      get(): never {\r\n        throw new Error(\r\n          `invokeTargetElement is deprecated. It has been renamed to command`,\r\n        );\r\n      },\r\n      set(_value: Element | null): never {\r\n        throw new Error(\r\n          `invokeTargetElement is deprecated. It has been renamed to command`,\r\n        );\r\n      },\r\n    },\r\n  });\r\n}\r\n\r\nconst onHandlers = new WeakMap<HTMLElement, EventListenerOrEventListenerObject>();\r\n\r\n// Extend HTMLElement to include the oncommand property for TypeScript\r\ndeclare global {\r\n  interface HTMLElement {\r\n    oncommand: EventListenerOrEventListenerObject | null;\r\n    /**\r\n     * Gets or sets the element controlled by the interest invoker.\r\n     */\r\n    interestForElement: Element | null;\r\n  }\r\n   interface HTMLButtonElement {\n     /**\n      * Gets or sets the command string for the button.\n      */\n     command: string;\n     /**\n      * Gets or sets the element controlled by the button.\n      */\n     commandForElement: Element | null;\n     /**\n      * Gets or sets the element controlled by the interest invoker.\n      */\n     interestForElement: Element | null;\n   }\n   interface HTMLInputElement {\n     /**\n      * Gets or sets the command string for the input.\n      */\n     command: string;\n     /**\n      * Gets or sets the element controlled by the input.\n      */\n     commandForElement: Element | null;\n     /**\n      * Gets or sets the element controlled by the interest invoker.\n      */\n     interestForElement: Element | null;\n   }\n   interface HTMLTextAreaElement {\n     /**\n      * Gets or sets the command string for the textarea.\n      */\n     command: string;\n     /**\n      * Gets or sets the element controlled by the textarea.\n      */\n     commandForElement: Element | null;\n     /**\n      * Gets or sets the element controlled by the interest invoker.\n      */\n     interestForElement: Element | null;\n   }\n  interface HTMLAnchorElement {\r\n    /**\r\n     * Gets or sets the element controlled by the interest invoker.\r\n     */\r\n    interestForElement: Element | null;\r\n  }\r\n  interface HTMLAreaElement {\r\n    /**\r\n     * Gets or sets the element controlled by the interest invoker.\r\n     */\r\n    interestForElement: Element | null;\r\n  }\r\n}\r\n\r\n/**\r\n * Extends `HTMLElement.prototype` to include `oncommand` event handler.\r\n */\r\nObject.defineProperties(HTMLElement.prototype, {\r\n  oncommand: {\r\n    enumerable: true,\r\n    configurable: true,\r\n    get(): EventListenerOrEventListenerObject | null {\r\n      oncommandObserver.takeRecords(); // Ensure up-to-date state\r\n      return onHandlers.get(this) || null;\r\n    },\r\n    set(handler: EventListenerOrEventListenerObject | null) {\r\n      const existing = onHandlers.get(this) || null;\r\n      if (existing) {\r\n        this.removeEventListener(\"command\", existing);\r\n      }\r\n      if (typeof handler === \"object\" || typeof handler === \"function\") {\r\n        if (handler !== null) {\r\n          onHandlers.set(this, handler);\r\n        } else {\r\n          onHandlers.delete(this);\r\n        }\r\n      } else {\r\n        onHandlers.delete(this);\r\n      }\r\n      if (typeof handler == \"function\") {\r\n        this.addEventListener(\"command\", handler);\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\n/**\r\n * Applies `oncommand` attribute values as event handlers.\r\n * @param els An iterable of elements to apply handlers to.\r\n */\r\nfunction applyOnCommandHandler(els: Iterable<Element>) {\r\n  for (const el of els) {\r\n    if (typeof Element !== \"undefined\" && !(el instanceof Element)) continue; // Skip if not an Element\r\n    const oncommandAttr = el.getAttribute(\"oncommand\");\r\n    if (oncommandAttr !== null && (el as any).oncommand !== null) { // Only set if not already set by JS\r\n        try {\r\n            // eslint-disable-next-line no-new-func\r\n            (el as any).oncommand = new Function(\"event\", oncommandAttr) as EventListener;\r\n        } catch (e) {\r\n            console.error(`Invokers Polyfill: Error parsing oncommand attribute for element:`, el, e);\r\n        }\r\n    }\r\n  }\r\n}\r\n\r\n/** MutationObserver to watch for new `oncommand` attributes or elements. */\r\nconst oncommandObserver = new MutationObserver((records) => {\r\n  for (const record of records) {\r\n    const { target } = record;\r\n    if (record.type === \"childList\") {\r\n      if (typeof Element !== \"undefined\" && target instanceof Element) {\r\n        applyOnCommandHandler(Array.from(target.querySelectorAll(\"[oncommand]\")));\r\n      } else if (target && typeof (target as any).querySelectorAll === \"function\") {\r\n        applyOnCommandHandler(Array.from((target as Element).querySelectorAll(\"[oncommand]\")));\r\n      }\r\n    } else { // attributeChanged\r\n      if (target instanceof HTMLElement && target.hasAttribute(\"oncommand\")) {\r\n        applyOnCommandHandler([target]);\r\n      } else if (target instanceof HTMLElement) { // attribute removed\r\n        target.oncommand = null; // Clear handler if attribute removed\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\n/**\r\n * Handles the activation of an invoker button, dispatches `CommandEvent`,\r\n * and performs default actions for built-in commands.\r\n * @param event The click event that triggered the activation.\r\n */\r\nfunction handleInvokerActivation(event: MouseEvent | KeyboardEvent) {\r\n  // Respect defaultPrevented (e.g., if another handler already stopped it)\r\n  if (event.defaultPrevented) return;\r\n  // Only process click events (or key events, if extending)\r\n  if (event.type !== \"click\") return;\r\n\r\n  // Check for deprecated attributes and warn\r\n  const oldInvoker = (event.target as HTMLElement).closest(\r\n    \"button[invoketarget], button[invokeaction], input[invoketarget], input[invokeaction]\",\r\n  );\r\n  if (oldInvoker) {\r\n    console.warn(\r\n      \"Invokers Polyfill: Elements with `invoketarget` or `invokeaction` are deprecated and should be renamed to use `commandfor` and `command` respectively\",\r\n    );\r\n    if (oldInvoker.matches(\"input\")) {\r\n      throw new Error(\"Input elements no longer support `commandfor`\");\r\n    }\r\n  }\r\n\r\n  // Find the actual invoker button\r\n  const source = (event.target as HTMLElement).closest<HTMLButtonElement>(\"button[commandfor][command]\");\r\n  if (!source) return; // Not an invoker button\r\n\r\n  // Validate button type and attributes for forms\r\n  if (source.form && source.getAttribute(\"type\") !== \"button\") {\r\n    event.preventDefault(); // Prevent form submission\r\n    console.error( // Use console.error as this is an invalid setup\r\n      \"Invokers Polyfill: Element with `commandfor` is a form participant. \" +\r\n        \"It should explicitly set `type=button` in order for `commandfor` to work. \" +\r\n        \"To act as a Submit/Reset button, it must not have command or commandfor attributes.\",\r\n        source\r\n    );\r\n    return;\r\n  }\r\n\r\n  // The `command` and `commandfor` attributes must both be present\r\n  if (source.hasAttribute(\"command\") !== source.hasAttribute(\"commandfor\")) {\r\n    const attr = source.hasAttribute(\"command\") ? \"command\" : \"commandfor\";\r\n    const missing = source.hasAttribute(\"command\") ? \"commandfor\" : \"command\";\r\n    console.error( // Use console.error as this is an invalid setup\r\n      `Invokers Polyfill: Element with ${attr} attribute must also have a ${missing} attribute to function.`,\r\n      source\r\n    );\r\n    return;\r\n  }\r\n\r\n  // Validate command value based on spec\r\n  // Note: source.command getter already normalizes built-in values and validates `--` prefix\r\n  if (source.command === \"\") {\r\n    console.warn(\r\n      `Invokers Polyfill: \"${source.getAttribute(\"command\")}\" is not a valid command value for element:`,\r\n      source,\r\n      `Custom commands must begin with --`\r\n    );\r\n    return;\r\n  }\r\n\r\n  const invokee = source.commandForElement;\r\n  if (!invokee) {\r\n    console.warn(\"Invokers Polyfill: commandfor target not found for invoker:\", source);\r\n    return;\r\n  }\r\n\r\n  // 1. Dispatch the CommandEvent\r\n  const commandEvent = new CommandEventPolyfill(\"command\", {\r\n    command: source.command,\r\n    source,\r\n    cancelable: true,\r\n    bubbles: true, // Should bubble to be caught by document listeners\r\n    composed: true, // Allow crossing shadow boundaries\r\n  });\r\n  invokee.dispatchEvent(commandEvent);\r\n\r\n  // If the event was prevented, stop default behavior\r\n  if (commandEvent.defaultPrevented) return;\r\n\r\n  // 2. Perform default actions for built-in commands\r\n  const command = commandEvent.command.toLowerCase(); // Use the normalized command from the event\r\n\r\n  // Handle popover commands\r\n  if (invokee.matches('[popover]')) {\r\n    const isPopoverOpen = invokee.matches(\":popover-open\");\r\n    if (command === \"toggle-popover\") {\r\n        (invokee as HTMLElement & { showPopover?: (options?: any) => void; hidePopover?: (options?: any) => void; })[isPopoverOpen ? 'hidePopover' : 'showPopover']?.({ source });\r\n    } else if (command === \"hide-popover\" && isPopoverOpen) {\r\n        (invokee as HTMLElement & { hidePopover: Function }).hidePopover();\r\n    } else if (command === \"show-popover\" && !isPopoverOpen) {\r\n        (invokee as HTMLElement & { showPopover?: (options?: any) => void }).showPopover?.({ source });\r\n    }\r\n  }\r\n  \r\n  // Handle dialog commands\r\n  if (invokee.localName === \"dialog\") {\r\n    const isDialogOpen = invokee.hasAttribute(\"open\");\r\n    if (command === \"show-modal\" && !isDialogOpen) {\r\n        (invokee as HTMLDialogElement).showModal();\r\n    } else if (command === \"close\" && isDialogOpen) {\r\n        (invokee as HTMLDialogElement).close(source.value);\r\n    } else if (command === \"request-close\" && isDialogOpen) {\r\n        const cancelEvent = new Event('cancel', { cancelable: true });\r\n        invokee.dispatchEvent(cancelEvent);\r\n        if (!cancelEvent.defaultPrevented) {\r\n             (invokee as HTMLDialogElement).close(source.value);\r\n        }\r\n    }\r\n  }\r\n  \r\n  // Handle details commands\r\n  if (invokee.localName === \"details\") {\r\n    const isOpen = (invokee as HTMLDetailsElement).open;\r\n    if (command === \"toggle\") {\r\n      (invokee as HTMLDetailsElement).open = !isOpen;\r\n    } else if (command === \"open\" && !isOpen) {\r\n      (invokee as HTMLDetailsElement).open = true;\r\n    } else if (command === \"close\" && isOpen) {\r\n      (invokee as HTMLDetailsElement).open = false;\r\n    }\r\n  }\r\n  \r\n  // Handle openable elements (elements with toggleOpenable method)\r\n  if (command.includes(\"openable\") && typeof (invokee as any).toggleOpenable === \"function\") {\r\n    if (command === \"toggle-openable\") {\r\n      (invokee as any).toggleOpenable();\r\n    } else if (command === \"open-openable\") {\r\n      (invokee as any).openOpenable?.();\r\n    } else if (command === \"close-openable\") {\r\n      (invokee as any).closeOpenable?.();\r\n    }\r\n  }\r\n  \r\n  // Handle picker commands for select and input elements\r\n  if ((invokee.localName === \"select\" || invokee.localName === \"input\") && command === \"show-picker\") {\r\n    try {\r\n      if (typeof (invokee as any).showPicker === \"function\") {\r\n        // Check if we're in a secure context and have user activation\r\n        if (document.hasFocus() && source.ownerDocument.hasFocus()) {\r\n          (invokee as any).showPicker();\r\n        }\r\n      }\r\n    } catch (e) {\r\n      // showPicker can throw for various security reasons, fail silently\r\n      console.warn(\"Invokers: showPicker failed:\", e);\r\n    }\r\n  }\r\n  \r\n  // Handle media element commands\r\n  if (invokee.localName === \"video\" || invokee.localName === \"audio\") {\r\n    const media = invokee as HTMLMediaElement;\r\n    if (command === \"play-pause\") {\r\n      if (media.paused) {\r\n        media.play().catch(() => {\r\n          // Autoplay policy might prevent play, fail silently\r\n        });\r\n      } else {\r\n        media.pause();\r\n      }\r\n    } else if (command === \"play\" && media.paused) {\r\n      media.play().catch(() => {\r\n        // Autoplay policy might prevent play, fail silently\r\n      });\r\n    } else if (command === \"pause\" && !media.paused) {\r\n      media.pause();\r\n    } else if (command === \"toggle-muted\") {\r\n      media.muted = !media.muted;\r\n    }\r\n  }\r\n  \r\n  // Handle fullscreen commands\r\n  if (command.includes(\"fullscreen\")) {\r\n    try {\r\n      if (command === \"toggle-fullscreen\") {\r\n        if (document.fullscreenElement === invokee) {\r\n          document.exitFullscreen();\r\n        } else {\r\n          (invokee as any).requestFullscreen?.();\r\n        }\r\n      } else if (command === \"request-fullscreen\" && document.fullscreenElement !== invokee) {\r\n        (invokee as any).requestFullscreen?.();\r\n      } else if (command === \"exit-fullscreen\" && document.fullscreenElement === invokee) {\r\n        document.exitFullscreen();\r\n      }\r\n    } catch (e) {\r\n      // Fullscreen operations can fail for various reasons\r\n      console.warn(\"Invokers: Fullscreen operation failed:\", e);\r\n    }\r\n  }\r\n  \r\n  // Handle clipboard and sharing commands\r\n  if (command === \"copy-text\") {\r\n    try {\r\n      let textToCopy = \"\";\r\n      if (invokee === source) {\r\n        // Self-referencing: use value attribute if available\r\n        textToCopy = (source as any).value || source.textContent || \"\";\r\n      } else {\r\n        textToCopy = invokee.textContent || \"\";\r\n      }\r\n      \r\n      if (navigator.clipboard && navigator.clipboard.writeText) {\r\n        navigator.clipboard.writeText(textToCopy.trim());\r\n      } else {\r\n        // Fallback for older browsers\r\n        const textArea = document.createElement('textarea');\r\n        textArea.value = textToCopy.trim();\r\n        textArea.style.position = 'fixed';\r\n        textArea.style.opacity = '0';\r\n        document.body.appendChild(textArea);\r\n        textArea.select();\r\n        document.execCommand('copy');\r\n        document.body.removeChild(textArea);\r\n      }\r\n    } catch (e) {\r\n      console.warn(\"Invokers: Copy operation failed:\", e);\r\n    }\r\n  }\r\n  \r\n  if (command === \"share\") {\r\n    try {\r\n      let textToShare = \"\";\r\n      if (invokee === source) {\r\n        textToShare = (source as any).value || source.textContent || \"\";\r\n      } else {\r\n        textToShare = invokee.textContent || \"\";\r\n      }\r\n      \r\n      if (navigator.share) {\r\n        // Check if the text looks like a URL\r\n        const trimmedText = textToShare.trim();\r\n        if (trimmedText.startsWith('http://') || trimmedText.startsWith('https://')) {\r\n          navigator.share({ url: trimmedText });\r\n        } else {\r\n          navigator.share({ text: trimmedText });\r\n        }\r\n      }\r\n    } catch (e) {\r\n      console.warn(\"Invokers: Share operation failed:\", e);\r\n    }\r\n  }\r\n  \r\n  // Handle number input step commands\r\n  if (invokee.localName === \"input\" && (invokee as HTMLInputElement).type === \"number\") {\r\n    const input = invokee as HTMLInputElement;\r\n    try {\r\n      if (command === \"step-up\") {\r\n        input.stepUp();\r\n      } else if (command === \"step-down\") {\r\n        input.stepDown();\r\n      }\r\n    } catch (e) {\r\n      console.warn(\"Invokers: Step operation failed:\", e);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Sets up global click listener for invoker buttons.\r\n * @param target The DOM node to attach the listener to (e.g., `document` or a ShadowRoot).\r\n */\r\nfunction setupInvokeListeners(target: Node) {\r\n  target.addEventListener(\"click\", handleInvokerActivation as EventListener, true); // Use capturing to catch first\r\n}\r\n\r\n/**\r\n * Observes newly attached Shadow DOM roots to apply listeners and `oncommand` handlers.\r\n * @param ElementClass The base class (e.g., `HTMLElement`) to observe shadow roots for.\r\n * @param callback The function to call with the new ShadowRoot.\r\n */\r\nfunction observeShadowRoots(ElementClass: typeof HTMLElement, callback: (shadowRoot: ShadowRoot) => void) {\r\n  // Patch attachShadow\r\n  const attachShadow = ElementClass.prototype.attachShadow;\r\n  ElementClass.prototype.attachShadow = function (init: ShadowRootInit) {\r\n    const shadow = attachShadow.call(this, init);\r\n    callback(shadow);\r\n    return shadow;\r\n  };\r\n  // Patch attachInternals for declarative custom elements\r\n  const attachInternals = ElementClass.prototype.attachInternals;\r\n  ElementClass.prototype.attachInternals = function (this: Element) { // Use 'this' context\r\n    const internals = attachInternals.call(this);\r\n    if (internals.shadowRoot) callback(internals.shadowRoot);\r\n    return internals;\r\n  };\r\n}\r\n\r\n/**\n * Applies the Invoker Buttons polyfill to the current environment.\n * This should be called once to enable the `command`/`commandfor` attributes and `CommandEvent`.\n */\nexport function apply() {\n  const target = typeof window !== \"undefined\" ? window : globalThis;\n\n  // If native support exists, do not apply the polyfill to prevent double-firing\n  if (isSupported()) {\n    return;\n  }\n\n  // Ensure the polyfill is only applied once\n  if ((target as any).CommandEvent === CommandEventPolyfill) {\n      return; // Already applied\n  }\n\r\n  // Hijack native 'invoke' and 'command' events if they exist,\r\n  // to prevent conflicts and ensure our polyfilled event is the one processed.\r\n  // This is a crucial step if browsers partially implement or change behavior.\r\n  document.addEventListener(\r\n    \"invoke\",\r\n    (e) => {\r\n      if (e.type === \"invoke\" && e.isTrusted) {\r\n        e.stopImmediatePropagation();\r\n        e.preventDefault();\r\n      }\r\n    },\r\n    true,\r\n  );\r\n  document.addEventListener(\r\n    \"command\",\r\n    (e) => {\r\n      // Only prevent if it's a native/trusted command event\r\n      if (e.type === \"command\" && e.isTrusted && !e.defaultPrevented && e.eventPhase === Event.AT_TARGET) {\r\n         // Check if a CommandEvent, not just a generic custom event type \"command\"\r\n         // This is a tricky part: we want to block native CommandEvents if they exist,\r\n         // but allow our own polyfilled CommandEvents to proceed.\r\n         // A heuristic could be `e instanceof CommandEventPolyfill` but that might not work\r\n         // if `globalThis.CommandEvent` is already the native one.\r\n         // For now, if native is supported, our polyfill will largely step aside anyway.\r\n         // This listener is primarily for older `invoke` event issues and preventing double-firing\r\n         // in environments where CommandEvent is partially or inconsistently implemented.\r\n         // For a full polyfill, we'd ensure `isSupported()` is false before applying.\r\n         // Given `invokers` wants a consistent environment, we always apply.\r\n         // For now, let's assume if it's a trusted 'command' event from another source, we block.\r\n         // The `invokers` library will then dispatch its own `CommandEventPolyfill` which won't be blocked here.\r\n        e.stopImmediatePropagation();\r\n        e.preventDefault();\r\n      }\r\n    },\r\n    true,\r\n  );\r\n\r\n   // Apply the `command` and `commandfor` properties to HTMLButtonElement\n   applyInvokerMixin(HTMLButtonElement);\n   // Also apply to input and textarea elements for command-on support\n   applyInvokerMixin(HTMLInputElement);\n   applyInvokerMixin(HTMLTextAreaElement);\n\r\n  // Observe newly attached Shadow DOM roots\r\n  observeShadowRoots(HTMLElement, (shadow) => {\r\n    setupInvokeListeners(shadow);\r\n    oncommandObserver.observe(shadow, { subtree: true, childList: true, attributeFilter: [\"oncommand\"] });\r\n    applyOnCommandHandler(Array.from(shadow.querySelectorAll(\"[oncommand]\")));\r\n  });\r\n\r\n  // Set up listeners for the main document\r\n  setupInvokeListeners(document);\r\n\r\n  // Initial scan for `oncommand` attributes\r\n  oncommandObserver.observe(document, {\r\n    subtree: true,\r\n    childList: true,\r\n    attributeFilter: [\"oncommand\"],\r\n  });\r\n  applyOnCommandHandler(Array.from(document.querySelectorAll(\"[oncommand]\")));\r\n\r\n\r\n  // Expose the polyfilled CommandEvent globally if not already defined\n  if (typeof (target as any)['CommandEvent'] === 'undefined') {\n    Object.defineProperty(target, \"CommandEvent\", {\n        value: CommandEventPolyfill,\n        configurable: true,\n        writable: true,\n        enumerable: false,\n    });\n  } else {\n      console.warn(\"Invokers Polyfill: `CommandEvent` already exists. The polyfill's CommandEvent will not overwrite it.\");\n  }\n  // Expose InvokeEvent globally (for deprecation warnings)\n  if (typeof (target as any)['InvokeEvent'] === 'undefined') {\n      Object.defineProperty(target, \"InvokeEvent\", {\n          value: InvokeEventPolyfill,\n          configurable: true,\n          writable: true,\n          enumerable: false,\n      });\n  }\n}\r\n\r\n// Automatically apply the polyfill when this module is imported.\r\n// This ensures that the global CommandEvent and attribute setters are ready\r\n// before InvokerManager tries to use them.\r\napply();", "// src/expression-lexer.ts\n\nexport enum TokenType {\n  IDENTIFIER, // e.g., this, value, length, detail\n  NUMBER,     // e.g., 100, 3.14\n  STRING,     // e.g., 'hello', \"world\"\n  OPERATOR,   // e.g., +, -, ===, &&, ?\n  DOT,        // . (for property access)\n  BOOLEAN,    // true, false\n  NULL,       // null\n  LPAREN,     // (\n  RPAREN,     // )\n  LBRACKET,   // [\n  RBRACKET,   // ]\n  COLON,      // : (for ternary operator)\n  EOF,        // End of input\n}\n\nexport interface Token {\n  type: TokenType;\n  value: string;\n  position: number;\n}\n\n// A map of regex patterns for each token type\nconst TOKEN_REGEX: [TokenType, RegExp][] = [\n  [TokenType.NUMBER, /^[0-9]+(\\.[0-9]+)?(?:[eE][+-]?[0-9]+)?/],\n  [TokenType.STRING, /^'(?:[^'\\\\]|\\\\.)*'|^\"(?:[^\"\\\\]|\\\\.)*\"/],\n  [TokenType.BOOLEAN, /^(true|false)\\b/],\n  [TokenType.NULL, /^null\\b/],\n   [TokenType.IDENTIFIER, /^[a-zA-Z_$][a-zA-Z0-9_$]*/],\n   [TokenType.OPERATOR, /^(===|!==|==|!=|<=|>=|&&|\\|\\||[<>\\+\\-\\*\\/%?!])/],\n   [TokenType.DOT, /^\\./],\n   [TokenType.LPAREN, /^\\(/],\n   [TokenType.RPAREN, /^\\)/],\n   [TokenType.LBRACKET, /^\\[/],\n   [TokenType.RBRACKET, /^\\]/],\n   [TokenType.COLON, /^:/],\n];\n\nexport class Lexer {\n  private static readonly MAX_EXPRESSION_LENGTH = 10000;\n  private static readonly MAX_TOKEN_COUNT = 1000;\n\n  public tokenize(input: string): Token[] {\n    if (typeof input !== 'string') {\n      throw new Error('Invokers Expression Error: Expression must be a string');\n    }\n\n    if (input.length > Lexer.MAX_EXPRESSION_LENGTH) {\n      throw new Error(`Invokers Expression Error: Expression too long (max ${Lexer.MAX_EXPRESSION_LENGTH} characters)`);\n    }\n\n    // Additional security checks\n    if (input.includes('\\u0000') || input.includes('\\u2028') || input.includes('\\u2029')) {\n      throw new Error('Invokers Expression Error: Expression contains invalid characters');\n    }\n\n    // Check for potentially dangerous patterns\n    const dangerousPatterns = [\n      /eval\\s*\\(/i,\n      /Function\\s*\\(/i,\n      /setTimeout\\s*\\(/i,\n      /setInterval\\s*\\(/i,\n      /XMLHttpRequest/i,\n      /fetch\\s*\\(/i,\n      /import\\s*\\(/i,\n      /require\\s*\\(/i,\n      /process\\./i,\n      /globalThis\\./i,\n      /window\\./i,\n      /document\\./i,\n      /console\\./i,\n      /alert\\s*\\(/i,\n      /prompt\\s*\\(/i,\n      /confirm\\s*\\(/i\n    ];\n\n    for (const pattern of dangerousPatterns) {\n      if (pattern.test(input)) {\n        throw new Error('Invokers Expression Error: Expression contains potentially unsafe operations');\n      }\n    }\n\n    const tokens: Token[] = [];\n    let cursor = 0;\n\n    while (cursor < input.length) {\n      // Check token count limit\n      if (tokens.length >= Lexer.MAX_TOKEN_COUNT) {\n        throw new Error(`Invokers Expression Error: Expression too complex (max ${Lexer.MAX_TOKEN_COUNT} tokens)`);\n      }\n\n      // Ignore whitespace\n      if (/\\s/.test(input[cursor])) {\n        cursor++;\n        continue;\n      }\n\n      let matched = false;\n      for (const [type, regex] of TOKEN_REGEX) {\n        const match = input.substring(cursor).match(regex);\n        if (match) {\n          // Additional validation for specific token types\n          if (type === TokenType.IDENTIFIER) {\n            const identifier = match[0];\n            // Prevent access to dangerous properties\n            if (this.isDangerousIdentifier(identifier)) {\n              throw new Error(`Invokers Expression Error: Access to '${identifier}' is not allowed`);\n            }\n          }\n\n          tokens.push({\n            type,\n            value: match[0],\n            position: cursor\n          });\n          cursor += match[0].length;\n          matched = true;\n          break;\n        }\n      }\n\n      if (!matched) {\n        const char = input[cursor];\n        const start = Math.max(0, cursor - 10);\n        const end = Math.min(input.length, cursor + 10);\n        const context = input.substring(start, end);\n        const pointer = ' '.repeat(cursor - start) + '^';\n        throw new Error(`Invokers Expression Error: Unexpected character '${char}' at position ${cursor}\\n${context}\\n${pointer}`);\n      }\n    }\n\n    // Add EOF token\n    tokens.push({\n      type: TokenType.EOF,\n      value: '',\n      position: cursor\n    });\n\n    return tokens;\n  }\n\n  private isDangerousIdentifier(identifier: string): boolean {\n    const dangerousIdentifiers = [\n      // Global objects (allow 'this' as it's a context variable)\n      'globalThis', 'global', 'self',\n      // Browser APIs\n      'document', 'navigator', 'location', 'history', 'localStorage', 'sessionStorage',\n      'indexedDB', 'cookies', 'XMLHttpRequest', 'fetch', 'WebSocket',\n      // Node.js globals\n      'process', 'Buffer', 'require', 'module', 'exports', '__dirname', '__filename',\n      // Dangerous functions\n      'eval', 'Function', 'setTimeout', 'setInterval', 'clearTimeout', 'clearInterval',\n      'alert', 'prompt', 'confirm', 'console', 'debugger',\n       // Prototype pollution\n       'prototype', 'constructor',\n      // Other dangerous properties\n      'innerHTML', 'outerHTML', 'innerText', 'insertAdjacentHTML'\n    ];\n\n    return dangerousIdentifiers.includes(identifier) ||\n           identifier.startsWith('__') ||\n           identifier.includes('script') ||\n           identifier.includes('javascript') ||\n           identifier.includes('vbscript');\n  }\n}", "// src/expression-parser.ts\n\nimport { Token, TokenType } from './expression-lexer';\n\nexport enum ASTNodeType {\n  LITERAL = 'LITERAL',\n  IDENTIFIER = 'IDENTIFIER',\n  BINARY_OP = 'BINARY_OP',\n  UNARY_OP = 'UNARY_OP',\n  MEMBER_ACCESS = 'MEMBER_ACCESS',\n  ARRAY_ACCESS = 'ARRAY_ACCESS',\n  CONDITIONAL = 'CONDITIONAL'\n}\n\nexport interface ASTNode {\n  type: ASTNodeType;\n  value?: any;\n  left?: ASTNode;\n  right?: ASTNode;\n  operator?: string;\n  object?: ASTNode;\n  property?: string;\n  index?: ASTNode;\n  test?: ASTNode;\n  consequent?: ASTNode;\n  alternate?: ASTNode;\n}\n\nexport class ExpressionParser {\n  private tokens: Token[];\n  private current: number = 0;\n\n  constructor(tokens: Token[]) {\n    this.tokens = tokens;\n  }\n\n  public parse(): ASTNode {\n    const expr = this.expression();\n    if (!this.isAtEnd()) {\n      const token = this.peek();\n      throw new Error(`Invokers Expression Error: Unexpected token '${token.value}' at position ${token.position}. Expected end of expression.`);\n    }\n    return expr;\n  }\n\n  private expression(): ASTNode {\n    return this.conditional();\n  }\n\n  private conditional(): ASTNode {\n    let expr = this.logicalOr();\n\n    if (this.match(TokenType.OPERATOR, '?')) {\n      const test = expr;\n      const consequent = this.expression();\n      this.consume(TokenType.COLON, \"Expected ':' after '?' in conditional expression\");\n      const alternate = this.conditional(); // Allow nested ternaries\n      return {\n        type: ASTNodeType.CONDITIONAL,\n        test,\n        consequent,\n        alternate\n      };\n    }\n\n    return expr;\n  }\n\n  private logicalOr(): ASTNode {\n    let expr = this.logicalAnd();\n\n    while (this.match(TokenType.OPERATOR, '||')) {\n      const operator = '||';\n      const right = this.logicalAnd();\n      expr = {\n        type: ASTNodeType.BINARY_OP,\n        left: expr,\n        operator,\n        right\n      };\n    }\n\n    return expr;\n  }\n\n  private logicalAnd(): ASTNode {\n    let expr = this.equality();\n\n    while (this.match(TokenType.OPERATOR, '&&')) {\n      const operator = '&&';\n      const right = this.equality();\n      expr = {\n        type: ASTNodeType.BINARY_OP,\n        left: expr,\n        operator,\n        right\n      };\n    }\n\n    return expr;\n  }\n\n  private equality(): ASTNode {\n    let expr = this.comparison();\n\n    while (this.match(TokenType.OPERATOR, '===', '!==', '==', '!=')) {\n      const operator = this.previous().value;\n      const right = this.comparison();\n      expr = {\n        type: ASTNodeType.BINARY_OP,\n        left: expr,\n        operator,\n        right\n      };\n    }\n\n    return expr;\n  }\n\n  private comparison(): ASTNode {\n    let expr = this.term();\n\n    while (this.match(TokenType.OPERATOR, '<', '>', '<=', '>=')) {\n      const operator = this.previous().value;\n      const right = this.term();\n      expr = {\n        type: ASTNodeType.BINARY_OP,\n        left: expr,\n        operator,\n        right\n      };\n    }\n\n    return expr;\n  }\n\n  private term(): ASTNode {\n    let expr = this.factor();\n\n    while (this.match(TokenType.OPERATOR, '+', '-')) {\n      const operator = this.previous().value;\n      const right = this.factor();\n      expr = {\n        type: ASTNodeType.BINARY_OP,\n        left: expr,\n        operator,\n        right\n      };\n    }\n\n    return expr;\n  }\n\n  private factor(): ASTNode {\n    let expr = this.unary();\n\n    while (this.match(TokenType.OPERATOR, '*', '/', '%')) {\n      const operator = this.previous().value;\n      const right = this.unary();\n      expr = {\n        type: ASTNodeType.BINARY_OP,\n        left: expr,\n        operator,\n        right\n      };\n    }\n\n    return expr;\n  }\n\n  private unary(): ASTNode {\n    if (this.match(TokenType.OPERATOR, '!', '-')) {\n      const operator = this.previous().value;\n      const right = this.unary();\n      return {\n        type: ASTNodeType.UNARY_OP,\n        operator,\n        right\n      };\n    }\n\n    return this.memberAccess();\n  }\n\n  private memberAccess(): ASTNode {\n    let expr = this.primary();\n\n    while (true) {\n      if (this.match(TokenType.DOT)) {\n        const property = this.consume(TokenType.IDENTIFIER, \"Expected property name after '.'\").value;\n        expr = {\n          type: ASTNodeType.MEMBER_ACCESS,\n          object: expr,\n          property\n        };\n      } else if (this.match(TokenType.LBRACKET)) {\n        const index = this.expression();\n        this.consume(TokenType.RBRACKET, \"Expected ']' after array index\");\n        expr = {\n          type: ASTNodeType.ARRAY_ACCESS,\n          object: expr,\n          index\n        };\n      } else {\n        break;\n      }\n    }\n\n    return expr;\n  }\n\n  private primary(): ASTNode {\n    if (this.match(TokenType.NUMBER)) {\n      return {\n        type: ASTNodeType.LITERAL,\n        value: parseFloat(this.previous().value)\n      };\n    }\n\n    if (this.match(TokenType.STRING)) {\n      const str = this.previous().value;\n      // Remove quotes\n      return {\n        type: ASTNodeType.LITERAL,\n        value: str.slice(1, -1)\n      };\n    }\n\n    if (this.match(TokenType.BOOLEAN)) {\n      return {\n        type: ASTNodeType.LITERAL,\n        value: this.previous().value === 'true'\n      };\n    }\n\n    if (this.match(TokenType.NULL)) {\n      return {\n        type: ASTNodeType.LITERAL,\n        value: null\n      };\n    }\n\n    if (this.match(TokenType.IDENTIFIER)) {\n      return {\n        type: ASTNodeType.IDENTIFIER,\n        value: this.previous().value\n      };\n    }\n\n    if (this.match(TokenType.LPAREN)) {\n      const expr = this.expression();\n      this.consume(TokenType.RPAREN, \"Expected ')' after expression\");\n      return expr;\n    }\n\n    throw new Error(`Invokers Expression Error: Unexpected token at position ${this.peek().position}: '${this.peek().value}'`);\n  }\n\n  private match(first: TokenType | TokenType[], ...rest: string[]): boolean {\n    if (Array.isArray(first)) {\n      for (const type of first) {\n        if (this.check(type)) {\n          this.advance();\n          return true;\n        }\n      }\n      return false;\n    } else {\n      if (this.check(first)) {\n        if (rest.length === 0 || rest.includes(this.peek().value)) {\n          this.advance();\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n\n  private consume(type: TokenType, message: string): Token {\n    if (this.check(type)) return this.advance();\n\n    throw new Error(`Invokers Expression Error: ${message}. Found '${this.peek().value}' at position ${this.peek().position}`);\n  }\n\n  private check(type: TokenType): boolean {\n    if (this.isAtEnd()) return false;\n    return this.peek().type === type;\n  }\n\n  private advance(): Token {\n    if (!this.isAtEnd()) this.current++;\n    return this.previous();\n  }\n\n  private isAtEnd(): boolean {\n    return this.peek().type === TokenType.EOF;\n  }\n\n  private peek(): Token {\n    return this.tokens[this.current];\n  }\n\n  private previous(): Token {\n    return this.tokens[this.current - 1];\n  }\n}", "// src/expression-evaluator.ts\n\nimport { ASTNode, ASTNodeType } from './expression-parser';\n\nexport class ExpressionEvaluator {\n  private context: Record<string, any>;\n  private static readonly MAX_RECURSION_DEPTH = 100;\n  private recursionDepth = 0;\n\n  constructor(context: Record<string, any>) {\n    this.context = this.sanitizeContext(context);\n  }\n\n  private sanitizeContext(context: Record<string, any>): Record<string, any> {\n    // Create a safe context that prevents access to dangerous properties\n    const safeContext: Record<string, any> = {};\n\n    for (const [key, value] of Object.entries(context)) {\n      if (this.isSafeProperty(key)) {\n        safeContext[key] = this.sanitizeValue(value);\n      }\n    }\n\n    return safeContext;\n  }\n\n  private sanitizeValue(value: any): any {\n    if (value === null || value === undefined) {\n      return value;\n    }\n\n    if (typeof value === 'function') {\n      // Don't allow functions in context\n      return undefined;\n    }\n\n    if (Array.isArray(value)) {\n      return value.slice(0, 1000); // Limit array size\n    }\n\n    if (typeof value === 'object' && value !== null) {\n      // Allow DOM objects for interpolation but sanitize their properties\n      if (value.constructor !== Object && !Array.isArray(value)) {\n        // For DOM objects, create a safe proxy that only allows safe property access\n        return this.createSafeDOMObject(value);\n      }\n      // Limit object depth and size\n      return this.sanitizeObject(value, 0);\n    }\n\n    return value;\n  }\n\n  private sanitizeObject(obj: any, depth: number): any {\n    if (depth > 50) return {}; // Prevent deep nesting\n\n    const safeObj: Record<string, any> = {};\n    let count = 0;\n\n    for (const [key, value] of Object.entries(obj)) {\n      if (count >= 50) break; // Limit object size\n      if (this.isSafeProperty(key)) {\n        safeObj[key] = this.sanitizeValue(value);\n        count++;\n      }\n    }\n\n    return safeObj;\n  }\n\n  private isSafeProperty(key: string): boolean {\n    return !key.startsWith('__') &&\n           !['prototype', 'constructor', '__proto__', 'window', 'document', 'eval', 'Function'].includes(key) &&\n           key.length <= 50; // Reasonable key length limit\n  }\n\n  private createSafeDOMObject(domObject: any): any {\n    // Create a proxy that only allows access to safe properties\n    return new Proxy(domObject, {\n      get: (target, property) => {\n        if (typeof property === 'string' && this.isSafeProperty(property)) {\n          const value = target[property];\n          // Don't allow functions or dangerous values\n          if (typeof value === 'function') {\n            return undefined;\n          }\n          // For primitive values, return them directly\n          if (typeof value !== 'object' || value === null) {\n            return value;\n          }\n          // For nested objects, sanitize them\n          return this.sanitizeValue(value);\n        }\n        return undefined;\n      },\n      set: () => false, // Don't allow setting properties\n      has: (target, property) => {\n        return typeof property === 'string' && this.isSafeProperty(property) && property in target;\n      }\n    });\n  }\n\n  public evaluate(node: ASTNode): any {\n    if (this.recursionDepth > ExpressionEvaluator.MAX_RECURSION_DEPTH) {\n      throw new Error('Invokers Expression Error: Maximum recursion depth exceeded');\n    }\n\n    this.recursionDepth++;\n    try {\n      switch (node.type) {\n        case ASTNodeType.LITERAL:\n          return node.value;\n\n        case ASTNodeType.IDENTIFIER:\n          return this.resolveIdentifier(node.value!);\n\n        case ASTNodeType.BINARY_OP:\n          return this.evaluateBinaryOp(node);\n\n        case ASTNodeType.UNARY_OP:\n          return this.evaluateUnaryOp(node);\n\n        case ASTNodeType.MEMBER_ACCESS:\n          return this.evaluateMemberAccess(node);\n\n        case ASTNodeType.ARRAY_ACCESS:\n          return this.evaluateArrayAccess(node);\n\n        case ASTNodeType.CONDITIONAL:\n          return this.evaluateConditional(node);\n\n        default:\n          throw new Error(`Invokers Expression Error: Unknown AST node type: ${(node as any).type}`);\n      }\n    } finally {\n      this.recursionDepth--;\n    }\n  }\n\n\n\n  private evaluateBinaryOp(node: ASTNode): any {\n    const left = this.evaluate(node.left!);\n    const right = this.evaluate(node.right!);\n    const op = node.operator!;\n\n    // Handle NaN and undefined comparisons specially\n    if ((left === undefined || left === null || Number.isNaN(left)) ||\n        (right === undefined || right === null || Number.isNaN(right))) {\n      switch (op) {\n        case '===':\n          return left === right;\n        case '!==':\n          return left !== right;\n        case '==':\n          return left == right; // eslint-disable-line eqeqeq\n        case '!=':\n          return left != right; // eslint-disable-line eqeqeq\n        case '&&':\n          return left && right;\n        case '||':\n          return left || right;\n        default:\n          // For arithmetic operations with undefined/NaN, return NaN\n          if (['+', '-', '*', '/', '%'].includes(op)) {\n            return Number.NaN;\n          }\n          // For comparisons with undefined/NaN, return false\n          return false;\n      }\n    }\n\n    switch (op) {\n      case '+':\n        return left + right;\n      case '-':\n        return left - right;\n      case '*':\n        return left * right;\n      case '/':\n        if (right === 0) throw new Error('Invokers Expression Error: Division by zero');\n        return left / right;\n      case '%':\n        return left % right;\n      case '===':\n        return left === right;\n      case '!==':\n        return left !== right;\n      case '==':\n        return left == right; // eslint-disable-line eqeqeq\n      case '!=':\n        return left != right; // eslint-disable-line eqeqeq\n      case '<':\n        return left < right;\n      case '>':\n        return left > right;\n      case '<=':\n        return left <= right;\n      case '>=':\n        return left >= right;\n      case '&&':\n        return left && right;\n      case '||':\n        return left || right;\n      default:\n        throw new Error(`Invokers Expression Error: Unknown binary operator: ${op}`);\n    }\n  }\n\n  private evaluateUnaryOp(node: ASTNode): any {\n    const right = this.evaluate(node.right!);\n    const op = node.operator!;\n\n    switch (op) {\n      case '!':\n        return !right;\n      case '-':\n        return -right;\n      default:\n        throw new Error(`Invokers Expression Error: Unknown unary operator: ${op}`);\n    }\n  }\n\n  private evaluateMemberAccess(node: ASTNode): any {\n    const object = this.evaluate(node.object!);\n    if (object != null && (typeof object === 'object' || typeof object === 'string')) {\n      const property = node.property!;\n      if (typeof property === 'string' && this.isSafeProperty(property)) {\n        return object[property];\n      }\n    }\n    return undefined;\n  }\n\n  private evaluateArrayAccess(node: ASTNode): any {\n    const object = this.evaluate(node.object!);\n    const index = this.evaluate(node.index!);\n\n    // Validate index to prevent prototype pollution and other attacks\n    if (typeof index === 'string') {\n      if (!this.isSafeProperty(index)) {\n        return undefined;\n      }\n    } else if (typeof index === 'number') {\n      if (index < 0 || index > 10000 || !Number.isInteger(index)) {\n        return undefined; // Prevent negative indices and very large indices\n      }\n    } else {\n      return undefined; // Only allow string or integer indices\n    }\n\n    if (object && (typeof object === 'object' || Array.isArray(object)) && index in object) {\n      return object[index];\n    }\n    return undefined;\n  }\n\n  private resolveIdentifier(name: string): any {\n    if (!this.isSafeProperty(name)) {\n      throw new Error(`Invokers Expression Error: Access to '${name}' is not allowed`);\n    }\n    if (name in this.context) {\n      return this.context[name];\n    }\n    return undefined;\n  }\n\n  private evaluateConditional(node: ASTNode): any {\n    const test = this.evaluate(node.test!);\n    return test ? this.evaluate(node.consequent!) : this.evaluate(node.alternate!);\n  }\n}", "// src/expression.ts\n\nimport { Lexer } from './expression-lexer';\nimport { ExpressionParser } from './expression-parser';\nimport { ExpressionEvaluator } from './expression-evaluator';\nimport { ASTNode } from './expression-parser';\n\n// Simple LRU cache for parsed expressions\nclass ExpressionCache {\n  private cache = new Map<string, ASTNode>();\n  private maxSize: number;\n\n  constructor(maxSize = 100) {\n    this.maxSize = maxSize;\n  }\n\n  get(key: string): ASTNode | undefined {\n    const value = this.cache.get(key);\n    if (value !== undefined) {\n      // Move to end (most recently used)\n      this.cache.delete(key);\n      this.cache.set(key, value);\n    }\n    return value;\n  }\n\n  set(key: string, value: ASTNode): void {\n    if (this.cache.has(key)) {\n      this.cache.delete(key);\n    } else if (this.cache.size >= this.maxSize) {\n      // Remove least recently used (first item)\n      const firstKey = this.cache.keys().next().value;\n      if (firstKey !== undefined) {\n        this.cache.delete(firstKey);\n      }\n    }\n    this.cache.set(key, value);\n  }\n\n  clear(): void {\n    this.cache.clear();\n  }\n}\n\nconst expressionCache = new ExpressionCache();\n\n// Rate limiting for expression evaluation\nclass ExpressionRateLimiter {\n  private static readonly MAX_EVALUATIONS_PER_SECOND = 1000;\n  private static readonly WINDOW_SIZE_MS = 1000;\n  private evaluations: number[] = [];\n\n  canEvaluate(): boolean {\n    const now = Date.now();\n    // Remove old evaluations outside the window\n    this.evaluations = this.evaluations.filter(time => now - time < ExpressionRateLimiter.WINDOW_SIZE_MS);\n\n    if (this.evaluations.length >= ExpressionRateLimiter.MAX_EVALUATIONS_PER_SECOND) {\n      return false;\n    }\n\n    this.evaluations.push(now);\n    return true;\n  }\n}\n\nconst rateLimiter = new ExpressionRateLimiter();\n\n/**\n * Evaluates a safe expression within a given context.\n * Supports arithmetic, comparisons, logical operations, and property access.\n * @param expression The expression string to evaluate (e.g., \"this.value.length > 10 ? 'Too long' : 'OK'\")\n * @param context The context object containing values for the expression\n * @returns The result of evaluating the expression\n */\nexport interface ExpressionResult<T = any> {\n  success: boolean;\n  value?: T;\n  error?: string;\n}\n\nexport function evaluateExpression(expression: string, context: Record<string, any>): any {\n  // Rate limiting check\n  if (!rateLimiter.canEvaluate()) {\n    console.warn('Invokers: Expression evaluation rate limit exceeded');\n    return undefined;\n  }\n\n  try {\n    // Check cache first\n    let ast = expressionCache.get(expression);\n    if (!ast) {\n      // Parse and cache the expression\n      const lexer = new Lexer();\n      const tokens = lexer.tokenize(expression);\n      const parser = new ExpressionParser(tokens);\n      ast = parser.parse();\n      expressionCache.set(expression, ast);\n    }\n\n    const evaluator = new ExpressionEvaluator(context);\n    return evaluator.evaluate(ast);\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    // Re-throw security-related and structural errors\n    if (errorMessage.includes('not allowed') ||\n        errorMessage.includes('potentially unsafe') ||\n        errorMessage.includes('invalid characters') ||\n        errorMessage.includes('Maximum recursion depth') ||\n        errorMessage.includes('Expression too')) {\n      throw error;\n    }\n    if (errorMessage.includes('Maximum call stack')) {\n      throw new Error('Invokers Expression Error: Maximum recursion depth exceeded');\n    }\n    console.error(`Invokers Expression Error in \"${expression}\": ${errorMessage}`);\n    return undefined;\n  }\n}\n\n/**\n * Evaluates a safe expression and returns a Result object for better error handling.\n * @param expression The expression string to evaluate\n * @param context The context object containing values for the expression\n * @returns A Result object with success/value or error information\n */\nexport function evaluateExpressionSafe<T = any>(expression: string, context: Record<string, any>): ExpressionResult<T> {\n  try {\n    const result = evaluateExpression(expression, context);\n    return { success: true, value: result };\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : String(error)\n    };\n  }\n}", "// src/utils.ts\n// Utility functions for the Invokers library\n\n/**\n * Generates a unique identifier string.\n * Uses crypto.getRandomValues() for better randomness when available,\n * falls back to Math.random() for compatibility.\n *\n * @param prefix Optional prefix for the generated ID\n * @param length Length of the random part (default: 8)\n * @returns A unique identifier string\n */\nexport function generateUid(prefix = 'invoker', length = 8): string {\n  let randomPart = '';\n\n  // Use crypto.getRandomValues if available (secure contexts)\n  if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n    const array = new Uint8Array(length);\n    crypto.getRandomValues(array);\n    // Convert to base36 for shorter, URL-safe strings\n    randomPart = Array.from(array, byte => byte.toString(36)).join('').slice(0, length);\n  } else {\n    // Fallback to Math.random\n    randomPart = Math.random().toString(36).substring(2, 2 + length);\n  }\n\n  return `${prefix}-${randomPart}`;\n}\n\n/**\n * Sanitizes a string for use as an HTML ID attribute.\n * Removes invalid characters and ensures it starts with a letter.\n *\n * @param str The string to sanitize\n * @returns A valid HTML ID string\n */\nexport function sanitizeHtmlId(str: string): string {\n  if (!str) return generateUid('id', 6);\n\n  // Remove invalid characters, keep only letters, numbers, hyphens, underscores\n  let sanitized = str.replace(/[^a-zA-Z0-9_-]/g, '-');\n\n  // Ensure it starts with a letter (HTML ID requirement)\n  if (!/^[a-zA-Z]/.test(sanitized)) {\n    sanitized = 'id-' + sanitized;\n  }\n\n  // Remove multiple consecutive hyphens\n  sanitized = sanitized.replace(/-+/g, '-');\n\n  // Remove leading/trailing hyphens\n  sanitized = sanitized.replace(/^-+|-+$/g, '');\n\n  // Ensure minimum length\n  if (sanitized.length < 1) {\n    return generateUid('id', 6);\n  }\n\n  return sanitized;\n}\n\n/**\n * Deep clones an object using JSON serialization.\n * Note: This doesn't handle functions, undefined values, or circular references.\n *\n * @param obj The object to clone\n * @returns A deep clone of the object\n */\nexport function deepClone<T>(obj: T): T {\n  if (obj === null || typeof obj !== 'object') {\n    return obj;\n  }\n  return JSON.parse(JSON.stringify(obj));\n}\n\n/**\n * Safely gets a nested property from an object using dot notation.\n *\n * @param obj The object to traverse\n * @param path The property path (e.g., 'user.profile.name')\n * @param defaultValue Default value if path doesn't exist\n * @returns The property value or default value\n */\nexport function getNestedProperty(obj: any, path: string, defaultValue: any = undefined): any {\n  const keys = path.split('.');\n  let current = obj;\n\n  for (const key of keys) {\n    if (current == null || typeof current !== 'object') {\n      return defaultValue;\n    }\n    current = current[key];\n  }\n\n  return current !== undefined ? current : defaultValue;\n}\n\n/**\n * Sets a nested property on an object using dot notation.\n * Creates intermediate objects if they don't exist.\n *\n * @param obj The object to modify\n * @param path The property path (e.g., 'user.profile.name')\n * @param value The value to set\n */\nexport function setNestedProperty(obj: any, path: string, value: any): void {\n  const keys = path.split('.');\n  let current = obj;\n\n  for (let i = 0; i < keys.length - 1; i++) {\n    const key = keys[i];\n    if (current[key] == null || typeof current[key] !== 'object') {\n      current[key] = {};\n    }\n    current = current[key];\n  }\n\n  current[keys[keys.length - 1]] = value;\n}", "// src/interpolation.ts\n\nimport { evaluateExpression } from './expression';\nimport { generateUid } from './utils';\n\n/**\n * Safely accesses nested properties of an object using a dot-notation string.\n * @param obj The object to access\n * @param path The dot-notation path (e.g., \"event.detail.message\")\n * @returns The value at the path, or undefined if not found\n */\nexport function getDeepValue(obj: any, path: string): any {\n  if (typeof obj !== 'object' || obj === null || !path) return undefined;\n\n  return path.split('.').reduce((acc, part) => {\n    if (typeof acc !== 'object' || acc === null) return undefined;\n    return acc[part];\n  }, obj);\n}\n\n/**\n * Interpolates a string with placeholders like {{expression}}\n * @param template The template string containing {{...}} placeholders\n * @param context The context object containing values for interpolation\n * @returns The interpolated string with placeholders replaced\n */\nexport function interpolateString(template: string, context: Record<string, any>): string {\n  if (typeof template !== 'string') {\n    return '';\n  }\n\n  // Limit template size to prevent DoS\n  if (template.length > 10000) {\n    console.warn('Invokers: Template too large, truncating');\n    template = template.substring(0, 10000);\n  }\n\n  let result = template;\n  let replacements = 0;\n\n  result = result.replace(/\\{\\{(.*?)\\}\\}/g, (_, expression) => {\n    replacements++;\n    if (replacements > 50) {\n      console.warn('Invokers: Too many interpolations in template, stopping');\n      return '';\n    }\n\n    try {\n      // Special handling for __uid placeholder\n      if (expression.trim() === '__uid') {\n        return generateUid();\n      }\n\n      const value = evaluateExpression(expression.trim(), context);\n      return value !== undefined && value !== null ? String(value) : '';\n    } catch (error) {\n      console.warn(`Invokers: Expression evaluation failed in interpolation: ${expression}`, error);\n      return '';\n    }\n  });\n\n  return result;\n}", "// src/target-resolver.ts\nexport function resolveTargets(selector: string, invoker: HTMLElement): Element[] {\n  const trimmedSelector = selector.trim();\n\n  // 1. Contextual Selectors (prefixed with @)\n  if (trimmedSelector.startsWith('@')) {\n    const match = trimmedSelector.match(/^@([a-z]+)\\((.*)\\)$/);\n    if (match) {\n      const type = match[1];\n      let innerSelector = match[2];\n      // Unescape backslash-escaped parentheses\n      innerSelector = innerSelector.replace(/\\\\([()])/g, '$1');\n\n      switch (type) {\n        case 'closest':\n          const closest = invoker.closest(innerSelector);\n          return closest ? [closest] : [];\n        case 'child':\n          const child = invoker.querySelector(innerSelector);\n          return child ? [child] : [];\n        case 'children':\n          return Array.from(invoker.querySelectorAll(innerSelector));\n        default:\n          console.warn(`Invokers: Unknown contextual selector type \"@${type}\".`);\n          return [];\n      }\n    }\n    return []; // Invalid @ syntax\n  }\n\n   // 2. ID Selector (for backward compatibility)\n   // If selector starts with #, treat as ID\n   if (trimmedSelector.startsWith('#')) {\n     const element = document.querySelector(trimmedSelector) as HTMLElement;\n     return element ? [element] : [];\n   }\n\n   // 3. Fallback to ID selector (for backward compatibility)\n   const elementById = document.getElementById(trimmedSelector);\n   if (elementById) {\n     return [elementById];\n   }\n\n   // 4. Global CSS Selector\n   try {\n     return Array.from(document.querySelectorAll(trimmedSelector));\n   } catch (e) {\n     console.error(`Invokers: Invalid CSS selector in commandfor: \"${trimmedSelector}\"`, e);\n     return [];\n   }\n}", "/**\r\n * @file invoker-commands.ts\r\n * @summary An optional collection of powerful, reusable custom commands for the Invokers library.\r\n * @description\r\n * This module extends the core Invokers library with a suite of feature-rich commands\r\n * for common UI patterns like dynamic content fetching, DOM manipulation, media control, and more.\r\n *\r\n * To use these commands, import and run the `registerAll()` function after the core\r\n * Invokers library has been loaded.\r\n * @example\r\n * // In your main application script:\r\n * import 'invokers'; // Core library (loads polyfill and window.Invoker)\r\n * import { registerAll } from 'invokers/commands';\r\n *\r\n * // Make all extended commands available for use in your HTML.\r\n * registerAll();\r\n */\r\n\r\nimport type { CommandContext, CommandCallback } from \"./index\";\nimport { createInvokerError, ErrorSeverity, validateElement, sanitizeHTML, isInterpolationEnabled } from \"./index\";\nimport { interpolateString } from \"./interpolation\";\nimport { resolveTargets } from \"./target-resolver\";\n\r\ntype CommandRegistry = Record<string, CommandCallback>;\r\n\r\n/**\r\n * A collection of useful custom commands to enhance the Invokers library.\r\n * Each command is designed to be robust, handle common edge cases, and provide\r\n * excellent developer experience through clear error messaging.\r\n */\r\nexport const commands: CommandRegistry = {\r\n  // --- Media Commands ---\r\n\r\n  /**\r\n   * `--media:toggle`: Toggles play/pause on a target `<video>` or `<audio>` element.\r\n   * It automatically updates the invoker's text content (from `data-play-text` and\r\n   * `data-pause-text`) and its `aria-pressed` state for accessibility.\r\n   *\r\n   * @example\r\n   * ```html\r\n   * <button type=\"button\"\r\n   *   command=\"--media:toggle\"\r\n   *   commandfor=\"my-video\"\r\n   *   data-play-text=\"Pause Video\"\r\n   *   data-pause-text=\"Play Video\"\r\n   * >\r\n   *   Play Video\r\n   * </button>\r\n   * <video id=\"my-video\" src=\"...\"></video>\r\n   * ```\r\n   */\r\n  \"--media:toggle\": async ({ invoker, targetElement }: CommandContext) => {\r\n    const validationErrors = validateElement(targetElement, { tagName: ['video', 'audio'] });\r\n    if (validationErrors.length > 0) {\r\n      throw createInvokerError(`Media command failed: ${validationErrors.join(', ')}`, ErrorSeverity.ERROR, {\r\n        command: '--media:toggle', element: invoker, recovery: 'Ensure commandfor points to a <video> or <audio> element.'\r\n      });\r\n    }\r\n\r\n    const media = targetElement as HTMLMediaElement;\r\n    const playText = invoker.dataset.playText || \"Pause\";\r\n    const pauseText = invoker.dataset.pauseText || \"Play\";\r\n\r\n    try {\r\n      if (media.paused) {\r\n        await media.play();\r\n        invoker.textContent = playText;\r\n        invoker.setAttribute(\"aria-pressed\", \"true\");\r\n      } else {\r\n        media.pause();\r\n        invoker.textContent = pauseText;\r\n        invoker.setAttribute(\"aria-pressed\", \"false\");\r\n      }\r\n    } catch (error) {\r\n      throw createInvokerError('Failed to toggle media playback', ErrorSeverity.ERROR, {\r\n        command: '--media:toggle', element: invoker, cause: error as Error,\r\n        recovery: (error as Error).name === 'NotAllowedError'\r\n          ? 'Media autoplay blocked by browser. User interaction may be required.'\r\n          : 'Check that the media element has a valid source and is ready to play.'\r\n      });\r\n    }\r\n  },\r\n\r\n  /**\r\n   * `--media:seek`: Seeks a target `<video>` or `<audio>` element forward or backward\r\n   * by a specified number of seconds.\r\n   *\r\n   * @example\r\n   * ```html\r\n   * <button type=\"button\" command=\"--media:seek:-10\" commandfor=\"my-video\">Rewind 10s</button>\r\n   * <button type=\"button\" command=\"--media:seek:30\" commandfor=\"my-video\">Forward 30s</button>\r\n   * ```\r\n   */\r\n  \"--media:seek\": ({ invoker, targetElement, params }: CommandContext) => {\r\n    const validationErrors = validateElement(targetElement, { tagName: ['video', 'audio'] });\r\n    if (validationErrors.length > 0) {\r\n      throw createInvokerError(`Media command failed: ${validationErrors.join(', ')}`, ErrorSeverity.ERROR, {\r\n        command: '--media:seek', element: invoker, recovery: 'Ensure commandfor points to a <video> or <audio> element.'\r\n      });\r\n    }\r\n    const media = targetElement as HTMLMediaElement;\r\n    const seekTime = parseFloat(params[0]);\r\n\r\n    if (isNaN(seekTime)) {\r\n      throw createInvokerError('Media seek command requires a numeric value for seconds', ErrorSeverity.ERROR, {\r\n        command: '--media:seek', element: invoker, context: { provided: params[0] }, recovery: 'Use format: --media:seek:10 (for 10s) or --media:seek:-5 (for -5s).'\r\n      });\r\n    }\r\n\r\n    media.currentTime = Math.max(0, Math.min(media.duration, media.currentTime + seekTime));\r\n  },\r\n\r\n  /**\r\n   * `--media:mute`: Toggles the mute state on a target `<video>` or `<audio>` element\r\n   * and updates the invoker's `aria-pressed` state to reflect the current muted status.\r\n   *\r\n   * @example\r\n   * ```html\r\n   * <button type=\"button\" command=\"--media:mute\" commandfor=\"my-video\" aria-pressed=\"false\">Mute</button>\r\n   * ```\r\n   */\r\n  \"--media:mute\": ({ invoker, targetElement }: CommandContext) => {\r\n    const validationErrors = validateElement(targetElement, { tagName: ['video', 'audio'] });\r\n    if (validationErrors.length > 0) {\r\n      throw createInvokerError(`Media command failed: ${validationErrors.join(', ')}`, ErrorSeverity.ERROR, {\r\n        command: '--media:mute', element: invoker, recovery: 'Ensure commandfor points to a <video> or <audio> element.'\r\n      });\r\n    }\r\n    const media = targetElement as HTMLMediaElement;\r\n    media.muted = !media.muted;\r\n    invoker.setAttribute(\"aria-pressed\", String(media.muted));\r\n  },\r\n\r\n  // --- Carousel / Slider Commands ---\r\n\r\n  /**\r\n   * `--carousel:nav`: Navigates a carousel by showing the next or previous item.\r\n   * Assumes items are direct children of the target, with visibility controlled by `hidden`.\r\n   *\r\n   * @example\r\n   * ```html\r\n   * <div id=\"my-carousel\">\r\n   *   <div>Slide 1</div>\r\n   *   <div hidden>Slide 2</div>\r\n   * </div>\r\n   * <button type=\"button\" command=\"--carousel:nav:prev\" commandfor=\"my-carousel\">‹</button>\r\n   * <button type=\"button\" command=\"--carousel:nav:next\" commandfor=\"my-carousel\">›</button>\r\n   * ```\r\n   */\r\n  \"--carousel:nav\": ({ invoker, targetElement, params }: CommandContext) => {\r\n    const [direction] = params;\r\n\r\n    if (direction !== \"next\" && direction !== \"prev\") {\r\n      throw createInvokerError('Carousel nav requires a direction parameter of \"next\" or \"prev\"', ErrorSeverity.ERROR, {\r\n        command: '--carousel:nav', element: invoker, recovery: 'Use format: --carousel:nav:next or --carousel:nav:prev'\r\n      });\r\n    }\r\n\r\n    const slides = Array.from(targetElement.children) as HTMLElement[];\r\n    if (slides.length < 2) return;\r\n\r\n    const activeIndex = slides.findIndex((slide) => !slide.hasAttribute(\"hidden\"));\r\n    const currentIndex = activeIndex === -1 ? 0 : activeIndex;\r\n    const nextIndex = (direction === \"next\" ? currentIndex + 1 : currentIndex - 1 + slides.length) % slides.length;\r\n\r\n    const updateDOM = () => {\r\n      slides.forEach((slide, index) => {\r\n        slide.toggleAttribute(\"hidden\", index !== nextIndex);\r\n      });\r\n    };\r\n\r\n    document.startViewTransition ? document.startViewTransition(updateDOM) : updateDOM();\r\n    },\n\n    // --- Clipboard and Form Commands ---\n\r\n  /**\r\n   * `--clipboard:copy`: Copies the text content (or value for inputs) of the target\r\n   * element to the clipboard. Provides visual feedback on the invoker button.\r\n   *\r\n   * @example\r\n   * ```html\r\n   * <button type=\"button\"\r\n   *   command=\"--clipboard:copy\"\r\n   *   commandfor=\"code-snippet\"\r\n   *   data-feedback-text=\"Copied!\"\r\n   * >\r\n   *   Copy\r\n   * </button>\r\n   * <pre id=\"code-snippet\">npm install invokers</pre>\r\n   * ```\r\n   */\r\n  \"--clipboard:copy\": async ({ invoker, targetElement }: CommandContext) => {\r\n    if (!navigator.clipboard) {\r\n      throw createInvokerError(\"Clipboard API not available\", ErrorSeverity.ERROR, {\r\n        command: '--clipboard:copy', element: invoker, recovery: 'This feature requires a secure context (HTTPS).'\r\n      });\r\n    }\r\n\r\n    const originalText = invoker.textContent || \"\";\r\n    const feedbackText = invoker.dataset.feedbackText || \"Copied!\";\r\n    const errorText = invoker.dataset.errorText || \"Error!\";\r\n    const textToCopy = targetElement instanceof HTMLInputElement || targetElement instanceof HTMLTextAreaElement ? targetElement.value : targetElement.textContent || \"\";\r\n\r\n    invoker.setAttribute(\"disabled\", \"\");\r\n    try {\r\n      await navigator.clipboard.writeText(textToCopy);\r\n      invoker.textContent = feedbackText;\r\n    } catch (err) {\r\n      invoker.textContent = errorText;\r\n      throw createInvokerError('Failed to copy text to clipboard', ErrorSeverity.ERROR, {\r\n        command: '--clipboard:copy', element: invoker, cause: err as Error\r\n      });\r\n    } finally {\r\n      setTimeout(() => {\r\n        invoker.textContent = originalText;\r\n        invoker.removeAttribute(\"disabled\");\r\n      }, 2000);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * `--form:reset`: Resets the target `<form>` element.\r\n   * @example `<button command=\"--form:reset\" commandfor=\"my-form\">Reset</button>`\r\n   */\r\n  \"--form:reset\": ({ invoker, targetElement }: CommandContext) => {\r\n    const validationErrors = validateElement(targetElement, { tagName: ['form'] });\r\n    if (validationErrors.length > 0) {\r\n      throw createInvokerError(`Form reset failed: ${validationErrors.join(', ')}`, ErrorSeverity.ERROR, {\r\n        command: '--form:reset', element: invoker, recovery: 'Ensure commandfor points to a <form> element.'\r\n      });\r\n    }\r\n    (targetElement as HTMLFormElement).reset();\r\n  },\r\n\r\n  /**\r\n   * `--form:submit`: Submits the target `<form>` element.\r\n   * @example `<button command=\"--form:submit\" commandfor=\"my-form\">Submit</button>`\r\n   */\r\n  \"--form:submit\": ({ invoker, targetElement }: CommandContext) => {\r\n    const validationErrors = validateElement(targetElement, { tagName: ['form'] });\r\n    if (validationErrors.length > 0) {\r\n      throw createInvokerError(`Form submit failed: ${validationErrors.join(', ')}`, ErrorSeverity.ERROR, {\r\n        command: '--form:submit', element: invoker, recovery: 'Ensure commandfor points to a <form> element.'\r\n      });\r\n    }\r\n    (targetElement as HTMLFormElement).requestSubmit();\r\n  },\r\n\r\n  /**\r\n   * `--input:step`: Increments/decrements a target `<input type=\"number\">`.\r\n   *\r\n   * @example\r\n   * ```html\r\n   * <button command=\"--input:step:-1\" commandfor=\"quantity\">-</button>\r\n   * <input type=\"number\" id=\"quantity\" value=\"1\" min=\"0\">\r\n   * <button command=\"--input:step:1\" commandfor=\"quantity\">+</button>\r\n   * ```\r\n   */\r\n  \"--input:step\": ({ invoker, targetElement, params }: CommandContext) => {\r\n    if (!(targetElement instanceof HTMLInputElement) || targetElement.type !== \"number\") {\r\n      throw createInvokerError('Input step target must be an <input type=\"number\">', ErrorSeverity.ERROR, {\r\n        command: '--input:step', element: invoker\r\n      });\r\n    }\r\n\r\n    const stepAmount = parseFloat(params[0] || \"1\");\r\n    if (isNaN(stepAmount)) {\r\n      throw createInvokerError('Input step requires a valid numeric parameter', ErrorSeverity.ERROR, {\r\n        command: '--input:step', element: invoker, context: { provided: params[0] }, recovery: 'Use --input:step:1 or --input:step:-1'\r\n      });\r\n    }\r\n\r\n    if (stepAmount > 0) targetElement.stepUp(stepAmount);\r\n    else if (stepAmount < 0) targetElement.stepDown(Math.abs(stepAmount));\r\n    targetElement.dispatchEvent(new Event(\"input\", { bubbles: true, cancelable: true }));\r\n  },\r\n\r\n  // --- Scroll Commands ---\r\n\r\n  /**\r\n   * `--scroll:to`: Smoothly scrolls the viewport to bring the target element into view.\r\n   * @example `<button command=\"--scroll:to\" commandfor=\"section-2\">Go to Section 2</button>`\r\n   */\r\n  \"--scroll:to\": ({ targetElement }: CommandContext) => {\r\n    targetElement.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\r\n  },\r\n\r\n  // --- DOM Manipulation Commands ---\r\n\r\n  /**\r\n   * `--dom:remove`: Removes the target element from the DOM.\r\n   * @example `<button command=\"--dom:remove\" commandfor=\"alert-1\">&times;</button>`\r\n   */\r\n  \"--dom:remove\": ({ targetElement }: CommandContext) => {\r\n    const updateDOM = () => targetElement.remove();\r\n    document.startViewTransition ? document.startViewTransition(updateDOM) : updateDOM();\r\n  },\r\n\r\n    /**\n     * `--dom:replace`: Replaces the target element with content from a `<template>`.\n     * Supports `:outer` (default) to replace the entire element, or `:inner` to replace inner content.\n     * Alias for `--dom:swap:outer` and `--dom:swap:inner` respectively.\n     * Supports advanced templating with `data-with-json` and `data-tpl-*` attributes when advanced events are enabled.\n     * @example `<button command=\"--dom:replace\" commandfor=\"placeholder\" data-template-id=\"content\">Load</button>`\n     * @example `<button command=\"--dom:replace:inner\" commandfor=\"content-area\" data-template-id=\"panel-2\">Update Content</button>`\n     */\n    \"--dom:replace\": ({ invoker, targetElement, params }: CommandContext) => {\n      const style = params[0] || 'outer';\n      let fragment = getSourceNode(invoker, 'replace').cloneNode(true) as DocumentFragment;\n\n       // Process the fragment if advanced templating is enabled\n       if (isInterpolationEnabled()) {\n         fragment = processTemplateFragment(fragment, invoker);\n       }\n\n      const updateDOM = () => {\n        if (style === 'inner') {\n          targetElement.replaceChildren(fragment);\n        } else {\n          // Default to 'outer'\n          targetElement.replaceWith(fragment);\n        }\n      };\n\n      document.startViewTransition ? document.startViewTransition(updateDOM) : updateDOM();\n    },\n\r\n    /**\n     * `--dom:swap`: Swaps content of the target with content from a `<template>`.\n     * Supports `:inner` (default) to replace inner content, or `:outer` to replace the entire element.\n     * Supports advanced templating with `data-with-json` and `data-tpl-*` attributes when advanced events are enabled.\n     * @example `<button command=\"--dom:swap\" commandfor=\"content-area\" data-template-id=\"panel-2\">Load Panel 2</button>`\n     * @example `<button command=\"--dom:swap:outer\" commandfor=\"content-area\" data-template-id=\"panel-2\">Replace Element</button>`\n     */\n     \"--dom:swap\": ({ invoker, targetElement, params }: CommandContext) => {\n       const [swapType = 'inner'] = params;\n       let fragment = getSourceNode(invoker, 'swap').cloneNode(true) as DocumentFragment;\n\n        // Interpolate the template content if advanced events are enabled\n        if (isInterpolationEnabled()) {\n          const context = {\n            this: {\n              ...invoker,\n              dataset: { ...invoker.dataset },\n              value: (invoker as any).value || '',\n            },\n            data: document.body.dataset,\n            event: (invoker as any).triggeringEvent,\n          };\n\n          // Convert fragment to string, interpolate, then back to fragment\n          const tempDiv = document.createElement('div');\n          tempDiv.appendChild(fragment.cloneNode(true));\n          const html = tempDiv.innerHTML;\n          const interpolatedHtml = interpolateString(html, context);\n          tempDiv.innerHTML = interpolatedHtml;\n          const interpolatedFragment = document.createDocumentFragment();\n          while (tempDiv.firstChild) {\n            interpolatedFragment.appendChild(tempDiv.firstChild);\n          }\n          fragment = processTemplateFragment(interpolatedFragment, invoker);\n        }\n\n      const updateDOM = () => {\n        if (swapType === 'outer') {\n          targetElement.replaceWith(fragment);\n        } else {\n          // Default to 'inner' behavior\n          targetElement.replaceChildren(fragment);\n        }\n      };\n\n      document.startViewTransition ? document.startViewTransition(updateDOM) : updateDOM();\n    },\n\r\n    /**\n     * `--dom:append`: Appends content from a `<template>` to the target.\n     * Supports `:inner` (default) to append as last child, or `:outer` to insert after the target.\n     * Supports advanced templating with `data-with-json` and `data-tpl-*` attributes when advanced events are enabled.\n     * @example `<button command=\"--dom:append\" commandfor=\"item-list\" data-template-id=\"new-item\">Add</button>`\n     * @example `<button command=\"--dom:append:outer\" commandfor=\"#item-1\" data-template-id=\"item-2\">Load Next</button>`\n     */\n    \"--dom:append\": ({ invoker, targetElement, params }: CommandContext) => {\n      const style = params[0] || 'inner';\n      let fragment = getSourceNode(invoker, 'append').cloneNode(true) as DocumentFragment;\n\n       // Process the fragment if advanced templating is enabled\n       if (isInterpolationEnabled()) {\n         fragment = processTemplateFragment(fragment, invoker);\n       }\n\n      const updateDOM = () => {\n        if (style === 'outer') {\n          targetElement.after(fragment);\n        } else {\n          // Default to 'inner'\n          targetElement.append(fragment);\n        }\n      };\n\n      document.startViewTransition ? document.startViewTransition(updateDOM) : updateDOM();\n    },\n\r\n    /**\n     * `--dom:prepend`: Prepends content from a `<template>` to the target.\n     * Supports `:inner` (default) to prepend as first child, or `:outer` to insert before the target.\n     * Supports advanced templating with `data-with-json` and `data-tpl-*` attributes when advanced events are enabled.\n     * @example `<button command=\"--dom:prepend\" commandfor=\"log\" data-template-id=\"new-log\">Log</button>`\n     * @example `<button command=\"--dom:prepend:outer\" commandfor=\"#item-2\" data-template-id=\"item-1\">Insert Before</button>`\n     */\n    \"--dom:prepend\": ({ invoker, targetElement, params }: CommandContext) => {\n      const style = params[0] || 'inner';\n      let fragment = getSourceNode(invoker, 'prepend').cloneNode(true) as DocumentFragment;\n\n       // Process the fragment if advanced templating is enabled\n       if (isInterpolationEnabled()) {\n         fragment = processTemplateFragment(fragment, invoker);\n       }\n\n      const updateDOM = () => {\n        if (style === 'outer') {\n          targetElement.before(fragment);\n        } else {\n          // Default to 'inner'\n          targetElement.prepend(fragment);\n        }\n      };\n\n       document.startViewTransition ? document.startViewTransition(updateDOM) : updateDOM();\n     },\n\n     /**\n      * `--dom:wrap`: Wraps the target element with content from a `<template>` or a simple tag.\n     * Supports `--dom:wrap:tagname` for simple wrappers with optional class/id.\n     * @example `<button command=\"--dom:wrap\" commandfor=\"#my-image\" data-template-id=\"figure-tpl\">Add Caption</button>`\n     * @example `<button command=\"--dom:wrap:div\" commandfor=\"#content\" data-wrapper-class=\"card\">Wrap in Card</button>`\n     */\n    \"--dom:wrap\": ({ invoker, targetElement, params }: CommandContext) => {\n      const wrapperTag = params[0] || null;\n      let wrapperElement: HTMLElement;\n\n      if (wrapperTag) {\n        // Simple tag wrapper like --dom:wrap:div\n        wrapperElement = document.createElement(wrapperTag);\n        const wrapperClass = invoker.dataset.wrapperClass;\n        const wrapperId = invoker.dataset.wrapperId;\n        if (wrapperClass) wrapperElement.className = wrapperClass;\n        if (wrapperId) wrapperElement.id = wrapperId;\n      } else {\n        // Template-based wrapper\n        let fragment = getSourceNode(invoker, 'wrap').cloneNode(true) as DocumentFragment;\n\n        // Process the fragment if advanced templating is enabled\n        if (isInterpolationEnabled()) {\n          fragment = processTemplateFragment(fragment, invoker);\n        }\n\n        // Assume the fragment has a single root element\n        const children = Array.from(fragment.children);\n        if (children.length !== 1) {\n          throw createInvokerError('Wrap template must contain exactly one root element', ErrorSeverity.ERROR, {\n            command: '--dom:wrap', element: invoker\n          });\n        }\n        wrapperElement = children[0] as HTMLElement;\n      }\n\n      const updateDOM = () => {\n        targetElement.replaceWith(wrapperElement);\n        wrapperElement.appendChild(targetElement);\n      };\n\n      document.startViewTransition ? document.startViewTransition(updateDOM) : updateDOM();\n    },\n\n    /**\n     * `--dom:unwrap`: Removes the parent of the target element, promoting it up one level in the DOM tree.\n     * @example `<button command=\"--dom:unwrap\" commandfor=\"#content\">Remove Wrapper</button>`\n     */\n    \"--dom:unwrap\": ({ targetElement }: CommandContext) => {\n      const parent = targetElement.parentElement;\n      if (!parent) return; // Already at root level\n\n      const updateDOM = () => {\n        parent.replaceWith(targetElement);\n      };\n\n      document.startViewTransition ? document.startViewTransition(updateDOM) : updateDOM();\n    },\n\n    /**\n     * `--dom:toggle-empty-class`: Adds or removes a class on the target based on whether it has child elements.\n     * @example `<button command=\"--dom:toggle-empty-class:list-is-empty\" commandfor=\"#todo-list\">Remove Item</button>`\n     */\n    \"--dom:toggle-empty-class\": ({ targetElement, params }: CommandContext) => {\n      const className = params[0];\n      if (!className) {\n        throw createInvokerError('Toggle empty class command requires a class name parameter', ErrorSeverity.ERROR, {\n          command: '--dom:toggle-empty-class', element: targetElement\n        });\n      }\n\n      const hasChildren = targetElement.children.length > 0;\n      targetElement.classList.toggle(className, !hasChildren);\n    },\n\n\n\n    /**\n     * `--data:set`: Sets a data attribute on the target element.\n     * @example `<button command=\"--data:set:userId:123\" commandfor=\"#profile\">Set User ID</button>`\n     */\n    \"--data:set\": ({ invoker, targetElement, params }: CommandContext) => {\n      const key = params[0];\n      let value = params[1];\n      if (!key) {\n        throw createInvokerError('Data set command requires a key parameter', ErrorSeverity.ERROR, {\n          command: '--data:set', element: invoker\n        });\n      }\n\n      // Interpolate value if interpolation is enabled\n      if (isInterpolationEnabled() && value) {\n        const context = {\n          this: {\n            ...invoker,\n            dataset: { ...invoker.dataset },\n            value: (invoker as any).value || '',\n          },\n          data: document.body.dataset,\n          event: (invoker as any).triggeringEvent,\n        };\n        value = interpolateString(value, context);\n      }\n\n      targetElement.dataset[key] = value || '';\n    },\n\n    /**\n     * `--data:copy`: Copies a data attribute from a source element to the target.\n     * @example `<button command=\"--data:copy:userId\" commandfor=\"#edit-form\" data-copy-from=\"#user-profile\">Edit User</button>`\n     */\n    \"--data:copy\": ({ invoker, targetElement, params }: CommandContext) => {\n      const key = params[0];\n      if (!key) {\n        throw createInvokerError('Data copy command requires a key parameter', ErrorSeverity.ERROR, {\n          command: '--data:copy', element: invoker\n        });\n      }\n\n      const sourceSelector = invoker.dataset.copyFrom;\n      let sourceElement: HTMLElement | null = invoker;\n\n      if (sourceSelector) {\n        sourceElement = document.querySelector(sourceSelector);\n        if (!sourceElement) {\n          throw createInvokerError(`Source element with selector \"${sourceSelector}\" not found`, ErrorSeverity.ERROR, {\n            command: '--data:copy', element: invoker\n          });\n        }\n      }\n\n      const value = sourceElement.dataset[key];\n      if (value !== undefined) {\n        targetElement.dataset[key] = value;\n      }\n    },\n\n    /**\n     * `--data:set:array:push`: Adds an item to the end of an array stored in a data attribute.\n     * @example `<button command=\"--data:set:array:push:todos\" data-value='{\"title\": \"New Task\"}' commandfor=\"#app\">Add Todo</button>`\n     */\n    \"--data:set:array:push\": ({ invoker, targetElement, params }: CommandContext) => {\n      const arrayKey = params[0];\n      if (!arrayKey) {\n        throw createInvokerError('Array push command requires an array key parameter', ErrorSeverity.ERROR, {\n          command: '--data:set:array:push', element: invoker\n        });\n      }\n\n      const valueToAdd = invoker.dataset.value;\n      if (!valueToAdd) {\n        throw createInvokerError('Array push command requires a data-value attribute', ErrorSeverity.ERROR, {\n          command: '--data:set:array:push', element: invoker\n        });\n      }\n\n      let arrayData: any[] = [];\n      try {\n        const existingData = targetElement.dataset[arrayKey];\n        arrayData = existingData ? JSON.parse(existingData) : [];\n      } catch (e) {\n        arrayData = [];\n      }\n\n      try {\n        const newItem = JSON.parse(valueToAdd);\n        arrayData.push(newItem);\n        targetElement.dataset[arrayKey] = JSON.stringify(arrayData);\n      } catch (e) {\n        throw createInvokerError('Invalid JSON in data-value attribute', ErrorSeverity.ERROR, {\n          command: '--data:set:array:push', element: invoker\n        });\n      }\n    },\n\n    /**\n     * `--data:set:array:remove`: Removes an item at a specific index from an array stored in a data attribute.\n     * @example `<button command=\"--data:set:array:remove:todos\" data-index=\"2\" commandfor=\"#app\">Remove Item</button>`\n     */\n    \"--data:set:array:remove\": ({ invoker, targetElement, params }: CommandContext) => {\n      const arrayKey = params[0];\n      if (!arrayKey) {\n        throw createInvokerError('Array remove command requires an array key parameter', ErrorSeverity.ERROR, {\n          command: '--data:set:array:remove', element: invoker\n        });\n      }\n\n      const indexToRemove = parseInt(invoker.dataset.index || '0', 10);\n      if (isNaN(indexToRemove)) {\n        throw createInvokerError('Array remove command requires a valid data-index attribute', ErrorSeverity.ERROR, {\n          command: '--data:set:array:remove', element: invoker\n        });\n      }\n\n      let arrayData: any[] = [];\n      try {\n        const existingData = targetElement.dataset[arrayKey];\n        arrayData = existingData ? JSON.parse(existingData) : [];\n      } catch (e) {\n        arrayData = [];\n      }\n\n      if (indexToRemove >= 0 && indexToRemove < arrayData.length) {\n        arrayData.splice(indexToRemove, 1);\n        targetElement.dataset[arrayKey] = JSON.stringify(arrayData);\n      }\n    },\n\n    /**\n     * `--data:set:array:update`: Updates an item at a specific index in an array stored in a data attribute.\n     * @example `<button command=\"--data:set:array:update:todos\" data-index=\"1\" data-value='{\"title\": \"Updated\"}' commandfor=\"#app\">Update Item</button>`\n     */\n    \"--data:set:array:update\": ({ invoker, targetElement, params }: CommandContext) => {\n      const arrayKey = params[0];\n      if (!arrayKey) {\n        throw createInvokerError('Array update command requires an array key parameter', ErrorSeverity.ERROR, {\n          command: '--data:set:array:update', element: invoker\n        });\n      }\n\n      const indexToUpdate = parseInt(invoker.dataset.index || '0', 10);\n      const valueToUpdate = invoker.dataset.value;\n\n      if (isNaN(indexToUpdate)) {\n        throw createInvokerError('Array update command requires a valid data-index attribute', ErrorSeverity.ERROR, {\n          command: '--data:set:array:update', element: invoker\n        });\n      }\n\n      if (!valueToUpdate) {\n        throw createInvokerError('Array update command requires a data-value attribute', ErrorSeverity.ERROR, {\n          command: '--data:set:array:update', element: invoker\n        });\n      }\n\n      let arrayData: any[] = [];\n      try {\n        const existingData = targetElement.dataset[arrayKey];\n        arrayData = existingData ? JSON.parse(existingData) : [];\n      } catch (e) {\n        arrayData = [];\n      }\n\n      if (indexToUpdate >= 0 && indexToUpdate < arrayData.length) {\n        try {\n          const updateData = JSON.parse(valueToUpdate);\n          arrayData[indexToUpdate] = { ...arrayData[indexToUpdate], ...updateData };\n          targetElement.dataset[arrayKey] = JSON.stringify(arrayData);\n        } catch (e) {\n          throw createInvokerError('Invalid JSON in data-value attribute', ErrorSeverity.ERROR, {\n            command: '--data:set:array:update', element: invoker\n          });\n        }\n      }\n     },\n\n     /**\n      * `--data:set:array:insert`: Inserts an item at a specific index in an array stored in a data attribute.\n      * @example `<button command=\"--data:set:array:insert:todos\" data-index=\"1\" data-value='{\"title\": \"Inserted Item\"}' commandfor=\"#app\">Insert at Position 1</button>`\n      */\n     \"--data:set:array:insert\": ({ invoker, targetElement, params }: CommandContext) => {\n       const arrayKey = params[0];\n       if (!arrayKey) {\n         throw createInvokerError('Array insert command requires an array key parameter', ErrorSeverity.ERROR, {\n           command: '--data:set:array:insert', element: invoker\n         });\n       }\n\n       const indexToInsert = parseInt(invoker.dataset.index || '0', 10);\n       const valueToInsert = invoker.dataset.value;\n\n       if (isNaN(indexToInsert)) {\n         throw createInvokerError('Array insert command requires a valid data-index attribute', ErrorSeverity.ERROR, {\n           command: '--data:set:array:insert', element: invoker\n         });\n       }\n\n       if (!valueToInsert) {\n         throw createInvokerError('Array insert command requires a data-value attribute', ErrorSeverity.ERROR, {\n           command: '--data:set:array:insert', element: invoker\n         });\n       }\n\n       let arrayData: any[] = [];\n       try {\n         const existingData = targetElement.dataset[arrayKey];\n         arrayData = existingData ? JSON.parse(existingData) : [];\n       } catch (e) {\n         arrayData = [];\n       }\n\n       if (indexToInsert >= 0 && indexToInsert <= arrayData.length) {\n         try {\n           const newItem = JSON.parse(valueToInsert);\n           arrayData.splice(indexToInsert, 0, newItem);\n           targetElement.dataset[arrayKey] = JSON.stringify(arrayData);\n         } catch (e) {\n           throw createInvokerError('Invalid JSON in data-value attribute', ErrorSeverity.ERROR, {\n             command: '--data:set:array:insert', element: invoker\n           });\n         }\n       }\n     },\n\n     /**\n      * `--data:set:array:unshift`: Adds an item to the beginning of an array stored in a data attribute.\n      * @example `<button command=\"--data:set:array:unshift:todos\" data-value='{\"title\": \"First Item\"}' commandfor=\"#app\">Add to Beginning</button>`\n      */\n     \"--data:set:array:unshift\": ({ invoker, targetElement, params }: CommandContext) => {\n       const arrayKey = params[0];\n       if (!arrayKey) {\n         throw createInvokerError('Array unshift command requires an array key parameter', ErrorSeverity.ERROR, {\n           command: '--data:set:array:unshift', element: invoker\n         });\n       }\n\n       const valueToAdd = invoker.dataset.value;\n       if (!valueToAdd) {\n         throw createInvokerError('Array unshift command requires a data-value attribute', ErrorSeverity.ERROR, {\n           command: '--data:set:array:unshift', element: invoker\n         });\n       }\n\n       let arrayData: any[] = [];\n       try {\n         const existingData = targetElement.dataset[arrayKey];\n         arrayData = existingData ? JSON.parse(existingData) : [];\n       } catch (e) {\n         arrayData = [];\n       }\n\n       try {\n         const newItem = JSON.parse(valueToAdd);\n         arrayData.unshift(newItem);\n         targetElement.dataset[arrayKey] = JSON.stringify(arrayData);\n       } catch (e) {\n         throw createInvokerError('Invalid JSON in data-value attribute', ErrorSeverity.ERROR, {\n           command: '--data:set:array:unshift', element: invoker\n         });\n       }\n     },\n\n     /**\n      * `--data:set:array:clear`: Removes all items from an array stored in a data attribute.\n      * @example `<button command=\"--data:set:array:clear:todos\" commandfor=\"#app\">Clear All Todos</button>`\n      */\n     \"--data:set:array:clear\": ({ targetElement, params }: CommandContext) => {\n       const arrayKey = params[0];\n       if (!arrayKey) {\n         throw createInvokerError('Array clear command requires an array key parameter', ErrorSeverity.ERROR, {\n           command: '--data:set:array:clear', element: targetElement\n         });\n       }\n\n       targetElement.dataset[arrayKey] = JSON.stringify([]);\n     },\n\n     /**\n      * `--data:set:array:sort`: Sorts an array stored in a data attribute.\n      * @example `<button command=\"--data:set:array:sort:todos\" data-sort-by=\"priority\" data-sort-order=\"desc\" commandfor=\"#app\">Sort by Priority</button>`\n      */\n     \"--data:set:array:sort\": ({ invoker, targetElement, params }: CommandContext) => {\n       const arrayKey = params[0];\n       if (!arrayKey) {\n         throw createInvokerError('Array sort command requires an array key parameter', ErrorSeverity.ERROR, {\n           command: '--data:set:array:sort', element: invoker\n         });\n       }\n\n       const sortBy = invoker.dataset.sortBy || invoker.dataset.sort_by;\n       const sortOrder = invoker.dataset.sortOrder || invoker.dataset.sort_order || 'asc';\n\n       if (!sortBy) {\n         throw createInvokerError('Array sort command requires a data-sort-by attribute', ErrorSeverity.ERROR, {\n           command: '--data:set:array:sort', element: invoker\n         });\n       }\n\n       let arrayData: any[] = [];\n       try {\n         const existingData = targetElement.dataset[arrayKey];\n         arrayData = existingData ? JSON.parse(existingData) : [];\n       } catch (e) {\n         arrayData = [];\n       }\n\n       arrayData.sort((a, b) => {\n         const aVal = a[sortBy];\n         const bVal = b[sortBy];\n\n         let comparison = 0;\n         if (aVal < bVal) comparison = -1;\n         else if (aVal > bVal) comparison = 1;\n\n         return sortOrder === 'desc' ? -comparison : comparison;\n       });\n\n       targetElement.dataset[arrayKey] = JSON.stringify(arrayData);\n     },\n\n     /**\n      * `--data:set:array:filter`: Filters an array stored in a data attribute and stores the result in a new key.\n      * @example `<button command=\"--data:set:array:filter:todos\" data-filter-by=\"completed\" data-filter-value=\"false\" data-result-key=\"filtered-todos\" commandfor=\"#app\">Show Pending</button>`\n      */\n     \"--data:set:array:filter\": ({ invoker, targetElement, params }: CommandContext) => {\n       const arrayKey = params[0];\n       if (!arrayKey) {\n         throw createInvokerError('Array filter command requires an array key parameter', ErrorSeverity.ERROR, {\n           command: '--data:set:array:filter', element: invoker\n         });\n       }\n\n       const filterBy = invoker.dataset.filterBy || invoker.dataset.filter_by;\n       const filterValue = invoker.dataset.filterValue || invoker.dataset.filter_value;\n       const resultKey = invoker.dataset.resultKey || invoker.dataset.result_key || `${arrayKey}-filtered`;\n\n       if (!filterBy) {\n         throw createInvokerError('Array filter command requires a data-filter-by attribute', ErrorSeverity.ERROR, {\n           command: '--data:set:array:filter', element: invoker\n         });\n       }\n\n       let arrayData: any[] = [];\n       try {\n         const existingData = targetElement.dataset[arrayKey];\n         arrayData = existingData ? JSON.parse(existingData) : [];\n       } catch (e) {\n         arrayData = [];\n       }\n\n       const filteredData = arrayData.filter(item => {\n         const itemValue = item[filterBy];\n         if (filterValue === 'true') return itemValue === true;\n         if (filterValue === 'false') return itemValue === false;\n         return String(itemValue) === filterValue;\n       });\n\n       targetElement.dataset[resultKey] = JSON.stringify(filteredData);\n     },\n\n     /**\n      * `--data:set:new-todo`: Adds a new todo item to the todos array.\n      * @example `<form command=\"--data:set:new-todo\" data-bind-to=\"#form-data\" data-bind-as=\"data:new-todo-json\">`\n      */\n       \"--data:set:new-todo\": ({ invoker, targetElement }: CommandContext) => {\n         // Get the form data\n         const formData = getFormData(invoker as unknown as HTMLFormElement);\n\n        // Generate unique ID and add metadata\n        const newTodo = {\n          id: generateId(),\n          title: formData.title || '',\n          description: formData.description || '',\n          priority: formData.priority || 'medium',\n          tags: formData.tags || '',\n          completed: false,\n          created: new Date().toLocaleDateString()\n        };\n\n       let todos: any[] = [];\n       try {\n         const existingData = targetElement.dataset.todos;\n         todos = existingData ? JSON.parse(existingData) : [];\n       } catch (e) {\n         todos = [];\n       }\n\n       todos.push(newTodo);\n       targetElement.dataset.todos = JSON.stringify(todos);\n\n       // Dispatch event for UI updates\n       targetElement.dispatchEvent(new CustomEvent('todo-updated', { bubbles: true }));\n     },\n\n     /**\n      * `--data:set:filter:status`: Sets the status filter for todos.\n      * @example `<select command=\"--data:set:filter:status\" data-bind-to=\"body\" data-bind-as=\"data:filter-status\">`\n      */\n     \"--data:set:filter:status\": ({ invoker, targetElement }: CommandContext) => {\n       const filterValue = (invoker as unknown as HTMLSelectElement).value;\n       targetElement.dataset.filterStatus = filterValue;\n       // Trigger re-render\n       targetElement.dispatchEvent(new CustomEvent('filter-changed', { bubbles: true }));\n     },\n\n     /**\n      * `--data:set:filter:priority`: Sets the priority filter for todos.\n      * @example `<select command=\"--data:set:filter:priority\" data-bind-to=\"body\" data-bind-as=\"data:filter-priority\">`\n      */\n     \"--data:set:filter:priority\": ({ invoker, targetElement }: CommandContext) => {\n       const filterValue = (invoker as unknown as HTMLSelectElement).value;\n       targetElement.dataset.filterPriority = filterValue;\n       // Trigger re-render\n       targetElement.dispatchEvent(new CustomEvent('filter-changed', { bubbles: true }));\n     },\n\n     /**\n      * `--data:set:search`: Sets the search term for todos.\n      * @example `<input command=\"--data:set:search\" data-bind-to=\"body\" data-bind-as=\"data:search-term\">`\n      */\n     \"--data:set:search\": ({ invoker, targetElement }: CommandContext) => {\n       const searchTerm = (invoker as unknown as HTMLInputElement).value;\n       targetElement.dataset.searchTerm = searchTerm;\n       // Trigger re-render\n       targetElement.dispatchEvent(new CustomEvent('filter-changed', { bubbles: true }));\n     },\n\n     /**\n      * `--data:set:sort:by`: Sets the sort field for todos.\n      * @example `<select command=\"--data:set:sort:by\" data-bind-to=\"body\" data-bind-as=\"data:sort-by\">`\n      */\n     \"--data:set:sort:by\": ({ invoker, targetElement }: CommandContext) => {\n       const sortBy = (invoker as unknown as HTMLSelectElement).value;\n       targetElement.dataset.sortBy = sortBy;\n       // Trigger re-render\n       targetElement.dispatchEvent(new CustomEvent('filter-changed', { bubbles: true }));\n     },\n\n     /**\n      * `--data:set:sort:order`: Sets the sort order for todos.\n      * @example `<select command=\"--data:set:sort:order\" data-bind-to=\"body\" data-bind-as=\"data:sort-order\">`\n      */\n     \"--data:set:sort:order\": ({ invoker, targetElement }: CommandContext) => {\n       const sortOrder = (invoker as unknown as HTMLSelectElement).value;\n       targetElement.dataset.sortOrder = sortOrder;\n       // Trigger re-render\n       targetElement.dispatchEvent(new CustomEvent('filter-changed', { bubbles: true }));\n     },\n\n     /**\n      * `--data:set:toggle:{id}`: Toggles the completed status of a todo item.\n      * @example `<input command=\"--data:set:toggle:123\" data-bind-to=\"body\" data-bind-as=\"data:toggle-item\">`\n      */\n     \"--data:set:toggle\": ({ invoker, targetElement, params }: CommandContext) => {\n       const todoId = params[0];\n       if (!todoId) {\n         throw createInvokerError('Toggle command requires a todo ID parameter', ErrorSeverity.ERROR, {\n           command: '--data:set:toggle', element: invoker\n         });\n       }\n\n       let todos: any[] = [];\n       try {\n         const existingData = targetElement.dataset.todos;\n         todos = existingData ? JSON.parse(existingData) : [];\n       } catch (e) {\n         todos = [];\n       }\n\n       const todoIndex = todos.findIndex(t => t.id === todoId);\n       if (todoIndex !== -1) {\n         todos[todoIndex].completed = !todos[todoIndex].completed;\n         targetElement.dataset.todos = JSON.stringify(todos);\n         // Dispatch event for UI updates\n         targetElement.dispatchEvent(new CustomEvent('todo-updated', { bubbles: true }));\n       }\n     },\n\n     /**\n      * `--data:set:edit:{id}`: Sets a todo item into edit mode.\n      * @example `<button command=\"--data:set:edit:123\" data-bind-to=\"body\" data-bind-as=\"data:edit-item\">`\n      */\n     \"--data:set:edit\": ({ invoker, targetElement, params }: CommandContext) => {\n       const todoId = params[0];\n       if (!todoId) {\n         throw createInvokerError('Edit command requires a todo ID parameter', ErrorSeverity.ERROR, {\n           command: '--data:set:edit', element: invoker\n         });\n       }\n\n       targetElement.dataset.editingId = todoId;\n       // Trigger re-render\n       targetElement.dispatchEvent(new CustomEvent('edit-mode-changed', { bubbles: true }));\n     },\n\n     /**\n      * `--data:set:delete:{id}`: Deletes a todo item.\n      * @example `<button command=\"--data:set:delete:123\" data-bind-to=\"body\" data-bind-as=\"data:delete-item\">`\n      */\n     \"--data:set:delete\": ({ invoker, targetElement, params }: CommandContext) => {\n       const todoId = params[0];\n       if (!todoId) {\n         throw createInvokerError('Delete command requires a todo ID parameter', ErrorSeverity.ERROR, {\n           command: '--data:set:delete', element: invoker\n         });\n       }\n\n       let todos: any[] = [];\n       try {\n         const existingData = targetElement.dataset.todos;\n         todos = existingData ? JSON.parse(existingData) : [];\n       } catch (e) {\n         todos = [];\n       }\n\n       const filteredTodos = todos.filter(t => t.id !== todoId);\n       targetElement.dataset.todos = JSON.stringify(filteredTodos);\n       // Dispatch event for UI updates\n       targetElement.dispatchEvent(new CustomEvent('todo-updated', { bubbles: true }));\n     },\n\n     /**\n      * `--data:set:cancel-edit:{id}`: Cancels edit mode for a todo item.\n      * @example `<button command=\"--data:set:cancel-edit:123\" data-bind-to=\"body\" data-bind-as=\"data:cancel-edit\">`\n      */\n     \"--data:set:cancel-edit\": ({ invoker, targetElement, params }: CommandContext) => {\n       const todoId = params[0];\n       if (!todoId) {\n         throw createInvokerError('Cancel edit command requires a todo ID parameter', ErrorSeverity.ERROR, {\n           command: '--data:set:cancel-edit', element: invoker\n         });\n       }\n\n       delete targetElement.dataset.editingId;\n       // Trigger re-render\n       targetElement.dispatchEvent(new CustomEvent('edit-mode-changed', { bubbles: true }));\n     },\n\n     /**\n      * `--data:set:save-edit:{id}`: Saves changes to a todo item in edit mode.\n      * @example `<button command=\"--data:set:save-edit:123\" data-bind-to=\"#edit-form\" data-bind-as=\"data:save-edit-json\">`\n      */\n      \"--data:set:save-edit\": ({ invoker, targetElement, params }: CommandContext) => {\n        const todoId = params[0];\n        if (!todoId) {\n          throw createInvokerError('Save edit command requires a todo ID parameter', ErrorSeverity.ERROR, {\n            command: '--data:set:save-edit', element: invoker\n          });\n        }\n\n        const editForm = document.getElementById(`edit-form-${todoId}`);\n        if (!editForm) {\n          throw createInvokerError(`Edit form for id ${todoId} not found`, ErrorSeverity.ERROR, {\n            command: '--data:set:save-edit', element: invoker\n          });\n        }\n\n        const updateData = {\n          title: editForm.dataset.title || '',\n          description: editForm.dataset.description || '',\n          priority: editForm.dataset.priority || 'medium'\n        };\n\n       let todos: any[] = [];\n       try {\n         const existingData = targetElement.dataset.todos;\n         todos = existingData ? JSON.parse(existingData) : [];\n       } catch (e) {\n         todos = [];\n       }\n\n       const todoIndex = todos.findIndex(t => t.id === todoId);\n       if (todoIndex !== -1) {\n         todos[todoIndex] = { ...todos[todoIndex], ...updateData };\n         targetElement.dataset.todos = JSON.stringify(todos);\n         delete targetElement.dataset.editingId;\n         // Dispatch event for UI updates\n         targetElement.dispatchEvent(new CustomEvent('todo-updated', { bubbles: true }));\n       }\n      },\n\n      /**\n       * `--data:set:bulk-action:complete-all`: Marks all pending todos as completed.\n      * @example `<button command=\"--data:set:bulk-action:complete-all\" data-bind-to=\"body\" data-bind-as=\"data:bulk-action\">`\n      */\n     \"--data:set:bulk-action:complete-all\": ({ targetElement }: CommandContext) => {\n       let todos: any[] = [];\n       try {\n         const existingData = targetElement.dataset.todos;\n         todos = existingData ? JSON.parse(existingData) : [];\n       } catch (e) {\n         todos = [];\n       }\n\n       const updatedTodos = todos.map(todo =>\n         todo.completed ? todo : { ...todo, completed: true }\n       );\n\n       targetElement.dataset.todos = JSON.stringify(updatedTodos);\n       // Dispatch event for UI updates\n       targetElement.dispatchEvent(new CustomEvent('todo-updated', { bubbles: true }));\n     },\n\n     /**\n      * `--data:set:bulk-action:clear-completed`: Removes all completed todos.\n      * @example `<button command=\"--data:set:bulk-action:clear-completed\" data-bind-to=\"body\" data-bind-as=\"data:bulk-action\">`\n      */\n     \"--data:set:bulk-action:clear-completed\": ({ targetElement }: CommandContext) => {\n       let todos: any[] = [];\n       try {\n         const existingData = targetElement.dataset.todos;\n         todos = existingData ? JSON.parse(existingData) : [];\n       } catch (e) {\n         todos = [];\n       }\n\n       const filteredTodos = todos.filter(todo => !todo.completed);\n       targetElement.dataset.todos = JSON.stringify(filteredTodos);\n       // Dispatch event for UI updates\n       targetElement.dispatchEvent(new CustomEvent('todo-updated', { bubbles: true }));\n     },\n\n     /**\n      * `--data:set:bulk-action:export`: Exports todos as JSON.\n      * @example `<button command=\"--data:set:bulk-action:export\" data-bind-to=\"body\" data-bind-as=\"data:bulk-action\">`\n      */\n     \"--data:set:bulk-action:export\": ({ targetElement }: CommandContext) => {\n       let todos: any[] = [];\n       try {\n         const existingData = targetElement.dataset.todos;\n         todos = existingData ? JSON.parse(existingData) : [];\n       } catch (e) {\n         todos = [];\n       }\n\n       const dataStr = JSON.stringify(todos, null, 2);\n       const dataBlob = new Blob([dataStr], { type: 'application/json' });\n       const url = URL.createObjectURL(dataBlob);\n\n       const link = document.createElement('a');\n       link.href = url;\n       link.download = `todos-${new Date().toISOString().split('T')[0]}.json`;\n       document.body.appendChild(link);\n       link.click();\n       document.body.removeChild(link);\n       URL.revokeObjectURL(url);\n     },\n\n\n\n     /**\n      * `--cookie:set`: Sets a browser cookie.\n      * @example `<button command=\"--cookie:set:theme:dark\" data-cookie-expires=\"365\">Set Dark Theme</button>`\n      */\n    \"--cookie:set\": ({ invoker, params }: CommandContext) => {\n      const key = params[0];\n      const value = params[1];\n      if (!key) {\n        throw createInvokerError('Cookie set command requires a key parameter', ErrorSeverity.ERROR, {\n          command: '--cookie:set', element: invoker\n        });\n      }\n\n      let cookieString = `${encodeURIComponent(key)}=${encodeURIComponent(value || '')}`;\n      const expires = invoker.dataset.cookieExpires;\n      if (expires) {\n        const days = parseInt(expires, 10);\n        if (!isNaN(days)) {\n          const date = new Date();\n          date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);\n          cookieString += `; expires=${date.toUTCString()}`;\n        }\n      }\n      cookieString += '; path=/';\n      document.cookie = cookieString;\n    },\n\n    /**\n     * `--cookie:get`: Gets a cookie value and sets it on the target element.\n     * @example `<button command=\"--cookie:get:theme\" commandfor=\"#theme-display\">Show Theme</button>`\n     */\n    \"--cookie:get\": ({ targetElement, params }: CommandContext) => {\n      const key = params[0];\n      if (!key) {\n        throw createInvokerError('Cookie get command requires a key parameter', ErrorSeverity.ERROR, {\n          command: '--cookie:get', element: targetElement\n        });\n      }\n\n      const cookies = document.cookie.split(';');\n      for (const cookie of cookies) {\n        const [cookieKey, cookieValue] = cookie.trim().split('=');\n        if (decodeURIComponent(cookieKey) === key) {\n          targetElement.textContent = decodeURIComponent(cookieValue || '');\n          return;\n        }\n      }\n      targetElement.textContent = ''; // Not found\n    },\n\n    /**\n     * `--cookie:remove`: Removes a browser cookie.\n     * @example `<button command=\"--cookie:remove:theme\">Clear Theme</button>`\n     */\n    \"--cookie:remove\": ({ params }: CommandContext) => {\n      const key = params[0];\n      if (!key) {\n        throw createInvokerError('Cookie remove command requires a key parameter', ErrorSeverity.ERROR, {\n          command: '--cookie:remove'\n        });\n      }\n\n      document.cookie = `${encodeURIComponent(key)}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;\n    },\n\n    /**\n     * `--command:trigger`: Triggers an event on another element.\n     * @example `<button command=\"--command:trigger:click\" commandfor=\"#save-btn\" data-and-then=\"--command:trigger:click\" data-then-target=\"#close-btn\">Save and Close</button>`\n     */\n    \"--command:trigger\": ({ targetElement, params }: CommandContext) => {\n      const eventType = params[0] || 'click';\n      const event = new Event(eventType, { bubbles: true, cancelable: true });\n      targetElement.dispatchEvent(event);\n    },\n\n    /**\n     * `--command:delay`: Waits for a specified number of milliseconds.\n     * @example `<button command=\"--text:set:Saved!\" commandfor=\"#status\" data-and-then=\"--command:delay:2000\" data-then-target=\"#status\">Save</button>`\n     */\n    \"--command:delay\": ({ params }: CommandContext) => {\n      const delay = parseInt(params[0], 10);\n      if (isNaN(delay) || delay < 0) {\n        throw createInvokerError('Delay command requires a valid positive number of milliseconds', ErrorSeverity.ERROR, {\n          command: '--command:delay'\n        });\n      }\n      return new Promise(resolve => setTimeout(resolve, delay));\n    },\n\n    /**\n     * `--on:interval`: Executes a command repeatedly at a given interval.\n     * The interval is cleared when the element is removed from the DOM.\n     * @example `<div command-on=\"load\" command=\"--on:interval:10000\" commandfor=\"#live-data\" data-interval-command=\"--fetch:get\" data-url=\"/api/latest-stats\">Loading...</div>`\n     */\n    \"--on:interval\": ({ invoker, targetElement, params }: CommandContext) => {\n      const intervalMs = parseInt(params[0], 10);\n      if (isNaN(intervalMs) || intervalMs <= 0) {\n        throw createInvokerError('Interval command requires a valid positive interval in milliseconds', ErrorSeverity.ERROR, {\n          command: '--on:interval', element: invoker\n        });\n      }\n\n      const intervalCommand = invoker.dataset.intervalCommand;\n      if (!intervalCommand) {\n        throw createInvokerError('Interval command requires data-interval-command attribute', ErrorSeverity.ERROR, {\n          command: '--on:interval', element: invoker\n        });\n      }\n\n      // Clear any existing interval\n      const existingIntervalId = (invoker as any)._invokerIntervalId;\n      if (existingIntervalId) {\n        clearInterval(existingIntervalId);\n      }\n\n      // Set up new interval\n      const intervalId = setInterval(() => {\n        // Execute the interval command programmatically\n        if (window.Invoker) {\n          const targetId = targetElement.id || `__invoker-target-${Date.now()}`;\n          if (!targetElement.id) targetElement.id = targetId;\n          window.Invoker.executeCommand(intervalCommand, targetId, invoker);\n        }\n      }, intervalMs);\n\n      // Store the interval ID\n      (invoker as any)._invokerIntervalId = intervalId;\n\n      // Clear interval when element is removed\n      const observer = new MutationObserver(() => {\n        if (!document.contains(invoker)) {\n          clearInterval(intervalId);\n          observer.disconnect();\n        }\n      });\n      observer.observe(document.body, { childList: true, subtree: true });\n    },\n\n    /**\n     * `--bind`: Creates a one-way data binding from the target element to another element.\n     * @example `<input command-on=\"input\" command=\"--bind:value\" commandfor=\"#input\" data-bind-to=\"#output\" data-bind-as=\"text\">`\n     */\n     \"--bind\": ({ invoker, targetElement, params }: CommandContext) => {\n       const sourceProperty = params.join(':');\n       if (!sourceProperty) {\n         throw createInvokerError('Bind command requires a source property (e.g., value, text, data:name)', ErrorSeverity.ERROR, {\n           command: '--bind', element: invoker\n         });\n       }\n\n       // Get the source value (prefer invoker if it has the property, otherwise targetElement)\n       let sourceValue: any;\n       const sourceElement = (sourceProperty === 'value' && (invoker instanceof HTMLInputElement || invoker instanceof HTMLTextAreaElement || invoker instanceof HTMLSelectElement)) ? invoker : targetElement;\n\n      if (sourceProperty === 'value' && (sourceElement instanceof HTMLInputElement || sourceElement instanceof HTMLTextAreaElement || sourceElement instanceof HTMLSelectElement)) {\n        sourceValue = sourceElement.value;\n      } else if (sourceProperty === 'text') {\n        sourceValue = sourceElement.textContent;\n      } else if (sourceProperty === 'html') {\n        sourceValue = sourceElement.innerHTML;\n      } else if (sourceProperty.startsWith('attr:')) {\n        const attrName = sourceProperty.substring(5);\n        sourceValue = sourceElement.getAttribute(attrName);\n      } else if (sourceProperty.startsWith('data:')) {\n        const dataName = sourceProperty.substring(5).replace(/-([a-z])/g, (_, letter) => letter.toUpperCase());\n        sourceValue = sourceElement.dataset[dataName];\n      } else {\n        throw createInvokerError(`Invalid source property for --bind: \"${sourceProperty}\"`, ErrorSeverity.ERROR, {\n          command: '--bind', element: invoker\n        });\n      }\n\n      // Find the destination (either data-bind-to or the targetElement)\n      const destinationSelector = invoker.dataset.bindTo;\n      const destinations = destinationSelector\n        ? resolveTargets(destinationSelector, invoker) as HTMLElement[]\n        : [targetElement];\n\n      // Apply to destinations\n      const destinationProperty = invoker.dataset.bindAs || 'text';\n\n      destinations.forEach(dest => {\n        if (destinationProperty === 'value' && (dest instanceof HTMLInputElement || dest instanceof HTMLTextAreaElement || dest instanceof HTMLSelectElement)) {\n          (dest as HTMLInputElement).value = sourceValue || '';\n        } else if (destinationProperty === 'text') {\n          dest.textContent = sourceValue || '';\n        } else if (destinationProperty === 'html') {\n          dest.innerHTML = sanitizeHTML(sourceValue || '');\n        } else if (destinationProperty.startsWith('attr:')) {\n          const attrName = destinationProperty.substring(5);\n          if (sourceValue === null || sourceValue === undefined) {\n            dest.removeAttribute(attrName);\n          } else {\n            dest.setAttribute(attrName, sourceValue);\n          }\n        } else if (destinationProperty.startsWith('data:')) {\n          const dataName = destinationProperty.substring(5).replace(/-([a-z])/g, (_, letter) => letter.toUpperCase());\n          if (sourceValue === null || sourceValue === undefined) {\n            delete dest.dataset[dataName];\n          } else {\n            dest.dataset[dataName] = sourceValue;\n          }\n        } else if (destinationProperty === 'class:add') {\n          if (sourceValue) dest.classList.add(sourceValue);\n         } else if (destinationProperty === 'class:remove') {\n           if (sourceValue) dest.classList.remove(sourceValue);\n         }\n       });\n     },\n  \r\n  /**\r\n   * `--text:copy`: Copies the `textContent` from one element to another.\r\n   * The source element is specified via a CSS selector in `data-copy-from` on the invoker.\r\n   * If `data-copy-from` is omitted, it copies the invoker's own `textContent`.\r\n   */\r\n   \"--text:copy\": (context: CommandContext) => {\n       const { invoker, targetElement } = context;\n       const sourceSelector = invoker.dataset.copyFrom;\n       let sourceElement: HTMLElement | null = invoker;\n\n       if (sourceSelector) {\n           sourceElement = document.querySelector(sourceSelector);\n           if (!sourceElement) {\n               throw createInvokerError(`Source element with selector \"${sourceSelector}\" not found`, ErrorSeverity.ERROR, {\n                   command: '--text:copy', element: invoker\n               });\n           }\n       }\n\n       const textToCopy = (sourceElement instanceof HTMLInputElement || sourceElement instanceof HTMLTextAreaElement)\n           ? sourceElement.value\n           : sourceElement.textContent || '';\n\n       targetElement.textContent = textToCopy;\n   },\n\n    /**\n     * `--text:set`: Sets the text content of the target element.\n     * @example `<button command=\"--text:set:Hello World\" commandfor=\"message\">Set Text</button>`\n     */\n    \"--text:set\": ({ targetElement, params }: CommandContext) => {\n        targetElement.textContent = params.join(':');\n    },\n\n   /**\n    * `--attr:set`: Sets an attribute on the target element.\n    * @example `<button command=\"--attr:set:disabled:true\" commandfor=\"button\">Disable</button>`\n    */\n   \"--attr:set\": ({ targetElement, params }: CommandContext) => {\n       const attr = params[0];\n       const value = params.slice(1).join(':');\n       targetElement.setAttribute(attr, value);\n   },\n\n   /**\n    * `--attr:remove`: Removes an attribute from the target element.\n    * @example `<button command=\"--attr:remove:hidden\" commandfor=\"toast\">Show</button>`\n    */\n   \"--attr:remove\": ({ targetElement, params }: CommandContext) => {\n       const attr = params[0];\n       targetElement.removeAttribute(attr);\n   },\n\r\n\r\n  // --- Fetch and Navigation Commands ---\r\n\r\n  /**\r\n   * `--fetch:get`: Performs a GET request and swaps the response HTML into the target.\r\n   * Supports loading/error states via templates.\r\n   *\r\n   * @example\r\n   * ```html\r\n   * <button type=\"button\"\r\n   *   command=\"--fetch:get\"\r\n   *   data-url=\"/api/content\"\r\n   *   commandfor=\"content-area\"\r\n   *   data-loading-template=\"spinner-template\"\r\n   *   data-after-error=\"--class:add:load-error\"\r\n   * >\r\n   *   Load Content\r\n   * </button>\r\n   * ```\r\n   */\r\n  \"--fetch:get\": async ({ invoker, targetElement }: CommandContext) => {\n    let url = invoker.dataset.url;\n    if (!url) {\n      throw createInvokerError('Fetch GET command requires a data-url attribute', ErrorSeverity.ERROR, {\n        command: '--fetch:get', element: invoker, recovery: 'Add data-url=\"/your/endpoint\" to the button.'\n      });\n    }\n\n    // Interpolate the URL\n    const context = {\n      this: {\n        ...invoker,\n        value: (invoker as any).value || '',\n      },\n      event: (invoker as any).triggeringEvent,\n    };\n    url = interpolateString(url, context);\n\n    // Dispatch fetch:before event for interceptors\n    const fetchEvent = new CustomEvent('fetch:before', { detail: { url, invoker }, cancelable: true });\n    window.dispatchEvent(fetchEvent);\n    if (fetchEvent.defaultPrevented) {\n      // Fetch was intercepted, skip actual fetch\n      setBusyState(invoker, false);\n      return;\n    }\n\n    setBusyState(invoker, true);\n    showFeedbackState(invoker, targetElement, \"data-loading-template\");\n\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30s timeout\n\n      const response = await fetch(url, {\n        method: \"GET\", headers: { Accept: \"text/html\", ...getHeadersFromAttributes(invoker) }, signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n\r\n      if (!response.ok) {\r\n        throw createInvokerError(`HTTP Error: ${response.status} ${response.statusText}`, ErrorSeverity.ERROR, {\r\n          command: '--fetch:get', element: invoker, context: { url, status: response.status }\r\n        });\r\n      }\r\n\r\n      const html = await response.text();\r\n      const newContent = parseHTML(html);\r\n      const updateDOM = () => targetElement.replaceChildren(newContent);\r\n      await (document.startViewTransition ? document.startViewTransition(updateDOM).finished : Promise.resolve(updateDOM()));\r\n    } catch (error) {\r\n      showFeedbackState(invoker, targetElement, \"data-error-template\");\r\n      // Re-throw the error (either the one we created or a new wrapped one)\r\n      // to allow the core manager to handle it for conditional chaining.\r\n      if (error instanceof Error && 'severity' in error) throw error;\r\n      throw createInvokerError('Fetch GET failed', ErrorSeverity.ERROR, {\r\n        command: '--fetch:get', element: invoker, cause: error as Error, context: { url },\r\n        recovery: 'Check the URL, network connection, and server response.'\r\n      });\r\n    } finally {\r\n      setBusyState(invoker, false);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * `--fetch:send`: Submits the target `<form>` via a POST/PUT/DELETE request.\r\n   * The response is swapped into the element from `data-response-target`, or the form itself.\r\n   *\r\n   * @example\r\n   * ```html\r\n   * <form id=\"my-form\" action=\"/api/submit\" method=\"post\"></form>\r\n   * <button type=\"button\"\r\n   *   command=\"--fetch:send\"\r\n   *   commandfor=\"my-form\"\r\n   *   data-response-target=\"#response-area\"\r\n   * >\r\n   *   Submit via Fetch\r\n   * </button>\r\n   * ```\r\n   */\r\n  \"--fetch:send\": async ({ invoker, targetElement }: CommandContext) => {\r\n    const validationErrors = validateElement(targetElement, { tagName: ['form'] });\r\n    if (validationErrors.length > 0) {\r\n      throw createInvokerError(`Fetch send failed: ${validationErrors.join(', ')}`, ErrorSeverity.ERROR, {\r\n        command: '--fetch:send', element: invoker, recovery: 'Ensure commandfor points to a <form> element.'\r\n      });\r\n    }\r\n    const form = targetElement as HTMLFormElement;\r\n\r\n    const responseSelector = invoker.dataset.responseTarget;\r\n    const responseTarget = responseSelector ? document.querySelector<HTMLElement>(responseSelector) : form;\r\n    if (!responseTarget) {\r\n      throw createInvokerError(`Response target \"${responseSelector}\" not found`, ErrorSeverity.ERROR, {\r\n        command: '--fetch:send', element: invoker\r\n      });\r\n    }\r\n\r\n    setBusyState(invoker, true);\r\n    showFeedbackState(invoker, responseTarget, \"data-loading-template\");\r\n\r\n    try {\r\n      const response = await fetch(form.action, {\r\n        method: form.method || \"POST\", body: new FormData(form), headers: getHeadersFromAttributes(invoker),\r\n      });\r\n\r\n      if (!response.ok) throw new Error(`HTTP Error: ${response.status} ${response.statusText}`);\r\n\r\n      const html = await response.text();\r\n      const newContent = parseHTML(html);\r\n      const updateDOM = () => responseTarget.replaceChildren(newContent);\r\n      await (document.startViewTransition ? document.startViewTransition(updateDOM).finished : Promise.resolve(updateDOM()));\r\n    } catch (error) {\r\n      showFeedbackState(invoker, responseTarget, \"data-error-template\");\r\n      throw createInvokerError('Fetch send failed', ErrorSeverity.ERROR, {\r\n        command: '--fetch:send', element: invoker, cause: error as Error,\r\n        recovery: 'Check the form action, network connection, and server response.'\r\n      });\r\n    } finally {\r\n      setBusyState(invoker, false);\r\n    }\r\n  },\r\n\r\n\n\n  /**\n   * `--navigate:to`: Navigates to a new URL using the History API.\n   *\n   * @example\n   * ```html\n   * <button type=\"button\" command=\"--navigate:to:/about\">Go to About Page</button>\n   * ```\n   */\n  \"--navigate:to\": (context: CommandContext) => {\n    const url = context.params.join(':'); // Rejoin params in case URL contains colons\n    if (!url) {\n      throw createInvokerError('Navigate command requires a URL parameter', ErrorSeverity.ERROR, {\n        command: '--navigate:to', element: context.invoker, recovery: 'Use format: --navigate:to:/your/path'\n      });\n    }\n\n    if (window.history?.pushState) {\n      window.history.pushState({}, \"\", url);\n      window.dispatchEvent(new PopStateEvent(\"popstate\", { state: {} }));\n    } else {\n      window.location.href = url;\n    }\n  },\n\n  /**\n   * `--emit`: Dispatches custom events for advanced interactions.\n   * The first parameter is the event type, remaining parameters form the event detail.\n   *\n   * @example\n   * ```html\n   * <button type=\"button\" command=\"--emit:user-action:save-form\">\n   *   Emit Save Event\n   * </button>\n   * ```\n   */\n   \"--emit\": ({ params, targetElement }: CommandContext) => {\n     const [eventType, ...detailParts] = params;\n     if (!eventType) {\n       throw createInvokerError('Emit command requires an event type parameter', ErrorSeverity.ERROR, {\n         command: '--emit', recovery: 'Use format: --emit:event-type or --emit:event-type:detail'\n       });\n     }\n\n     let detail = detailParts.length > 0 ? detailParts.join(':') : undefined;\n     // Try to parse as JSON if it looks like JSON\n     if (typeof detail === 'string' && (detail.startsWith('{') || detail.startsWith('['))) {\n       try {\n         detail = JSON.parse(detail);\n       } catch (e) {\n         // Keep as string if not valid JSON\n       }\n     }\n     const event = new CustomEvent(eventType, {\n       bubbles: true,\n       composed: true,\n       detail\n     });\n\n     // Dispatch to targetElement if available, otherwise to document.body\n     (targetElement || document.body).dispatchEvent(event);\n   },\n};\r\n\r\n/**\n * Registers commands from this module with the global `Invoker` instance.\n * This function is now simpler and more robust, ensuring all commands are found.\n *\n * @param specificCommands An optional array of command names to register. If omitted, all commands are registered.\n * @example\n * registerAll(); // Registers all commands\n * registerAll(['--media:toggle', '--scroll:to']); // Registers specific commands\n */\nexport function registerAll(specificCommands?: string[]): void {\r\n  if (!window.Invoker) {\r\n    console.error(\"Invokers: Core library not found. Ensure it is loaded before the commands module.\");\r\n    return;\r\n  }\r\n  const commandsToRegister = specificCommands || Object.keys(commands);\n\n  for (const name of commandsToRegister) {\n    // Normalize the name the user might have passed in (e.g., 'dom:swap' vs '--dom:swap')\n    const normalizedName = name.startsWith('--') ? name : `--${name}`;\n\n    if (commands[normalizedName]) {\n      // Always pass the key from our `commands` object and its callback.\n      // The core `register` method will handle everything else.\n      window.Invoker.register(normalizedName, commands[normalizedName]);\n    } else {\n      console.warn(`Invokers: Command \"${name}\" was requested but not found in the commands module. Skipping registration.`);\n    }\n  }\n}\r\n\r\n// --- Private Helper Functions ---\r\n\r\nfunction getSourceNode(invoker: HTMLButtonElement, commandName: string): DocumentFragment {\r\n  const templateId = invoker.dataset.templateId;\r\n  if (templateId) {\r\n    const template = document.getElementById(templateId);\r\n    if (!(template instanceof HTMLTemplateElement)) {\r\n      throw createInvokerError(`Source <template> with ID \"${templateId}\" not found`, ErrorSeverity.ERROR, {\r\n        command: `--dom:${commandName}`, element: invoker\r\n      });\r\n    }\r\n    return template.content;\r\n  }\r\n  throw createInvokerError(`DOM command --dom:${commandName} requires a data-template-id attribute`, ErrorSeverity.ERROR, {\r\n    command: `--dom:${commandName}`, element: invoker\r\n  });\r\n}\r\n\r\nfunction setBusyState(invoker: HTMLButtonElement, isBusy: boolean): void {\r\n  invoker.toggleAttribute(\"disabled\", isBusy);\r\n  invoker.setAttribute(\"aria-busy\", String(isBusy));\r\n}\r\n\r\nfunction showFeedbackState(invoker: HTMLButtonElement, target: HTMLElement, templateAttr: \"data-loading-template\" | \"data-error-template\"): void {\r\n  const templateKey = templateAttr.replace('data-', '').replace(/-(\\w)/g, (_, c) => c.toUpperCase());\r\n  const templateId = invoker.dataset[templateKey];\r\n\r\n  if (!templateId || !target) return;\r\n\r\n  const template = document.getElementById(templateId);\r\n  if (!(template instanceof HTMLTemplateElement)) {\r\n    // This is a non-critical warning, so we log instead of throwing.\r\n    const error = createInvokerError(`Feedback template \"#${templateId}\" not found or is not a <template>`, ErrorSeverity.WARNING, { element: invoker });\r\n    console.error(error);\r\n    return;\r\n  }\r\n\r\n  target.replaceChildren(template.content.cloneNode(true));\r\n}\r\n\r\nfunction getFormData(form: HTMLFormElement): Record<string, string> {\n  const data: Record<string, string> = {};\n  const formData = new FormData(form);\n  for (const [key, value] of formData.entries()) {\n    data[key] = value as string;\n  }\n  return data;\n}\n\nfunction generateId(): string {\n  return Date.now().toString(36) + Math.random().toString(36).substr(2);\n}\n\nfunction parseHTML(html: string): DocumentFragment {\n  const sanitizedHTML = sanitizeHTML(html);\n  const doc = new DOMParser().parseFromString(sanitizedHTML, \"text/html\");\n  const fragment = document.createDocumentFragment();\n  fragment.append(...Array.from(doc.body.childNodes));\n  return fragment;\n}\n\n/**\n * Processes a template fragment with data injection and contextual selector rewriting.\n * This is used by DOM commands when advanced templating features are enabled.\n */\nfunction processTemplateFragment(fragment: DocumentFragment, invoker: HTMLButtonElement): DocumentFragment {\n  const jsonData = invoker.dataset.withJson;\n  if (!jsonData) return fragment; // If no data, return the raw fragment\n\n  // Interpolate the JSON string itself first, to resolve {{...}} and {{__uid}}\n  const textInput = document.getElementById('text-input') as HTMLInputElement | null;\n  const context = {\n    this: {\n      ...invoker,\n      value: textInput?.value || '',\n    },\n    event: (invoker as any).triggeringEvent,\n  };\n\n  let interpolatedJson: string;\n  try {\n    interpolatedJson = interpolateString(jsonData, context);\n  } catch (error) {\n    console.error(\"Invokers: Failed to interpolate data-with-json:\", error);\n    return fragment; // Return raw fragment on interpolation error\n  }\n\n  let dataContext: Record<string, any>;\n  try {\n    dataContext = JSON.parse(interpolatedJson);\n  } catch (error) {\n    console.error(\"Invokers: Invalid JSON in data-with-json attribute:\", error);\n    return fragment; // Return raw fragment on JSON parse error\n  }\n\n  // 1. Inject data into the template clone\n  // Process data-tpl-text attributes\n  fragment.querySelectorAll('[data-tpl-text]').forEach(el => {\n    const key = el.getAttribute('data-tpl-text');\n    if (key && dataContext.hasOwnProperty(key)) {\n      const value = String(dataContext[key]);\n      if (el.children.length === 0) {\n        el.textContent = value;\n      } else {\n        // Insert the text as the first child\n        const textNode = document.createTextNode(value);\n        el.insertBefore(textNode, el.firstChild);\n      }\n    }\n  });\n\n  // Process data-tpl-attr attributes (format: data-tpl-attr=\"id:id,class:cssClass\")\n  fragment.querySelectorAll('[data-tpl-attr]').forEach(el => {\n    const attrMapping = el.getAttribute('data-tpl-attr');\n    if (attrMapping) {\n      attrMapping.split(',').forEach(mapping => {\n        const [attrName, key] = mapping.split(':').map(s => s.trim());\n        if (attrName && key && dataContext.hasOwnProperty(key)) {\n          el.setAttribute(attrName, String(dataContext[key]));\n        }\n      });\n    }\n  });\n\n  // Process data-tpl-value attributes\n  fragment.querySelectorAll('[data-tpl-value]').forEach(el => {\n    const key = el.getAttribute('data-tpl-value');\n    if (key && dataContext.hasOwnProperty(key) && 'value' in el) {\n      (el as HTMLInputElement).value = String(dataContext[key]);\n    }\n  });\n\n  // 2. Resolve contextual `commandfor` selectors within the fragment\n  // This is the crucial wiring step for advanced selectors\n  const firstElement = fragment.firstElementChild as HTMLElement;\n  if (firstElement?.id) {\n    // Rewrite @closest selectors to use the newly-set unique ID\n    fragment.querySelectorAll('[commandfor^=\"@\"]').forEach(childInvoker => {\n      const originalSelector = childInvoker.getAttribute('commandfor');\n      if (originalSelector?.startsWith('@closest(')) {\n        // Extract the inner selector from @closest(selector)\n        const match = originalSelector.match(/^@closest\\(([^)]+)\\)$/);\n        if (match) {\n          const innerSelector = match[1];\n          // Check if the inner selector matches the first element\n          if (firstElement.matches(innerSelector)) {\n            childInvoker.setAttribute('commandfor', firstElement.id);\n          }\n        }\n      }\n      // Add logic for other @ selectors if needed\n    });\n  }\n\n  return fragment;\n}\n\r\nfunction getHeadersFromAttributes(invoker: HTMLButtonElement): HeadersInit {\r\n  const headers: Record<string, string> = {};\r\n  for (const attr in invoker.dataset) {\r\n    if (attr.startsWith(\"header\")) {\r\n      const headerName = attr.substring(6).replace(/([A-Z])/g, \"-$1\").toLowerCase();\r\n      if (headerName) headers[headerName] = invoker.dataset[attr]!;\r\n    }\r\n  }\r\n  return headers;\n}", "/**\r\n * @file interest-invokers.ts\r\n * @summary Interest Invokers polyfill and TypeScript support for the Invokers library\r\n * @description\r\n * This module provides comprehensive support for Interest Invokers as specified in:\r\n * https://open-ui.org/components/interest-invokers.explainer/\r\n * \r\n * Based on the official polyfill by Mason Freed with TypeScript adaptation\r\n * and integration with the existing Invokers library patterns.\r\n * \r\n * @author Mason Freed (original polyfill), Patrick Glenn (TypeScript adaptation)\r\n * @license MIT / BSD (compatible with original polyfill license)\r\n */\r\n\r\n// --- TypeScript Interfaces and Types ---\r\n\r\n/**\r\n * Represents an InterestEvent as defined in the Interest Invokers specification\r\n */\r\nexport interface InterestEventInit extends EventInit {\r\n  source?: Element;\r\n}\r\n\r\nexport interface InterestEvent extends Event {\r\n  readonly source: Element | null;\r\n}\r\n\r\nexport interface InterestInvokerElement {\r\n  interestForElement: Element | null;\r\n}\r\n\r\n// Global type declarations\r\ndeclare global {\r\n  interface InterestEventInit extends EventInit {\r\n    source?: Element;\r\n  }\r\n  \r\n  interface InterestEvent extends Event {\r\n    readonly source: Element | null;\r\n  }\r\n\r\n  interface HTMLButtonElement extends InterestInvokerElement {}\r\n  interface HTMLAnchorElement extends InterestInvokerElement {}\r\n  interface HTMLAreaElement extends InterestInvokerElement {}\r\n  \r\n  // SVG support\r\n  interface SVGAElement extends InterestInvokerElement {}\r\n\r\n  interface Window {\r\n    interestForPolyfillInstalled?: boolean;\r\n    interestForUsePolyfillAlways?: boolean;\r\n  }\r\n}\r\n\r\n// --- Interest Invokers Polyfill Implementation ---\r\n\r\n/**\r\n * Feature detection function to check if Interest Invokers are natively supported\r\n */\r\nexport function isInterestInvokersSupported(): boolean {\r\n  return (\r\n    typeof HTMLButtonElement !== \"undefined\" &&\r\n    \"interestForElement\" in HTMLButtonElement.prototype\r\n  );\r\n}\r\n\r\n/**\r\n * Main Interest Invokers polyfill class\r\n * Adapted from Mason Freed's official polyfill with TypeScript support\r\n */\r\nclass InterestInvokersPolyfill {\r\n  private static instance: InterestInvokersPolyfill | null = null;\r\n  private initialized = false;\r\n\r\n  // Constants\r\n  private readonly attributeName = \"interestfor\";\r\n  private readonly interestEventName = \"interest\";\r\n  private readonly loseInterestEventName = \"loseinterest\";\r\n  private readonly interestDelayStartProp = \"--interest-delay-start\";\r\n  private readonly interestDelayEndProp = \"--interest-delay-end\";\r\n  private readonly interestDelayProp = \"--interest-delay\";\r\n  private readonly dataField = \"__interestForData\";\r\n  private readonly targetDataField = \"__interestForTargetData\";\r\n\r\n  // State tracking\r\n  private readonly invokersWithInterest = new Set<HTMLElement>();\r\n  private touchInProgress = false;\r\n\r\n  // State enum\r\n  private readonly InterestState = {\r\n    NoInterest: \"none\",\r\n    FullInterest: \"full\",\r\n  } as const;\r\n\r\n  // Source enum\r\n  private readonly Source = {\r\n    Hover: \"hover\",\r\n    DeHover: \"dehover\",\r\n    Focus: \"focus\",\r\n    Blur: \"blur\",\r\n    Touch: \"touch\",\r\n  } as const;\r\n\r\n  private constructor() {}\r\n\r\n  static getInstance(): InterestInvokersPolyfill {\r\n    if (!InterestInvokersPolyfill.instance) {\r\n      InterestInvokersPolyfill.instance = new InterestInvokersPolyfill();\r\n    }\r\n    return InterestInvokersPolyfill.instance;\r\n  }\r\n\r\n  /**\r\n   * Initialize the Interest Invokers polyfill\r\n   */\r\n  public apply(): void {\r\n    // Feature detection and early return\r\n    if (window.interestForPolyfillInstalled) {\r\n      return;\r\n    }\r\n\r\n    window.interestForPolyfillInstalled = true;\r\n    const nativeSupported = isInterestInvokersSupported();\r\n\r\n    if (nativeSupported && !window.interestForUsePolyfillAlways) {\r\n      return;\r\n    }\r\n\r\n    if (nativeSupported) {\r\n      this.disableNativeSupport();\r\n    }\r\n\r\n    this.setupPolyfill();\r\n    this.initialized = true;\r\n\r\n    console.log(`Interest Invokers polyfill installed (native: ${nativeSupported}).`);\r\n  }\r\n\r\n  /**\r\n   * Disable native support if present to allow polyfill to take effect\r\n   */\r\n  private disableNativeSupport(): void {\r\n    const cancel = (e: Event) => {\r\n      if (e.isTrusted) {\r\n        e.preventDefault();\r\n        e.stopImmediatePropagation();\r\n      }\r\n    };\r\n\r\n    document.body.addEventListener(this.interestEventName, cancel, { capture: true });\r\n    document.body.addEventListener(this.loseInterestEventName, cancel, { capture: true });\r\n  }\r\n\r\n  /**\r\n   * Setup the complete polyfill\r\n   */\r\n  private setupPolyfill(): void {\r\n    this.registerCustomProperties();\r\n    this.addEventHandlers();\r\n    this.setupElementMixins();\r\n  }\r\n\r\n  /**\r\n   * Register CSS custom properties for interest delays\r\n   */\r\n  private registerCustomProperties(): void {\r\n    const style = document.createElement(\"style\");\r\n    style.textContent = `\r\n      @property ${this.interestDelayStartProp} {\r\n        syntax: \"normal | <time>\";\r\n        inherits: false;\r\n        initial-value: normal;\r\n      }\r\n      @property ${this.interestDelayEndProp} {\r\n        syntax: \"normal | <time>\";\r\n        inherits: false;\r\n        initial-value: normal;\r\n      }\r\n      @property ${this.interestDelayProp} {\r\n        syntax: \"[ normal | <time> ]{1,2}\";\r\n        inherits: false;\r\n        initial-value: normal;\r\n      }\r\n    `;\r\n    document.head.appendChild(style);\r\n    (document as any)[this.dataField] = { globalPropsStyle: style };\r\n  }\r\n\r\n  /**\r\n   * Setup element mixins for supported elements\r\n   */\r\n  private setupElementMixins(): void {\r\n    // Button support\r\n    this.applyInterestInvokerMixin(HTMLButtonElement);\r\n    \r\n    // Anchor support\r\n    this.applyInterestInvokerMixin(HTMLAnchorElement);\r\n    \r\n    // Area support  \r\n    this.applyInterestInvokerMixin(HTMLAreaElement);\r\n\r\n    // SVG Anchor support (if available)\r\n    if (typeof SVGAElement !== 'undefined') {\r\n      this.applyInterestInvokerMixin(SVGAElement as any);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply the interestForElement property to supported elements\r\n   */\r\n  private applyInterestInvokerMixin(ElementClass: any): void {\r\n    Object.defineProperty(ElementClass.prototype, 'interestForElement', {\r\n      enumerable: true,\r\n      configurable: true,\r\n      get(this: HTMLElement): Element | null {\r\n        const id = this.getAttribute('interestfor');\r\n        return id ? document.getElementById(id) : null;\r\n      },\r\n      set(this: HTMLElement, value: Element | null) {\r\n        if (value === null) {\r\n          this.removeAttribute('interestfor');\r\n        } else if (value && typeof value === 'object' && 'id' in value) {\r\n          this.setAttribute('interestfor', value.id || '');\r\n        } else {\r\n          throw new TypeError('interestForElement must be an element or null');\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add all event handlers for interest detection\r\n   */\r\n  private addEventHandlers(): void {\r\n    // Mouse events\r\n    document.body.addEventListener(\"mouseover\", (e) => \r\n      this.handleInterestHoverOrFocus(e.target as HTMLElement, this.Source.Hover)\r\n    );\r\n    document.body.addEventListener(\"mouseout\", (e) => \r\n      this.handleInterestHoverOrFocus(e.target as HTMLElement, this.Source.DeHover)\r\n    );\r\n\r\n    // Keyboard events\r\n    document.body.addEventListener(\"focusin\", (e) => \r\n      this.handleInterestHoverOrFocus(e.target as HTMLElement, this.Source.Focus)\r\n    );\r\n    document.body.addEventListener(\"focusout\", (e) => \r\n      this.handleInterestHoverOrFocus(e.target as HTMLElement, this.Source.Blur)\r\n    );\r\n\r\n    // Escape key to clear all interest\r\n    document.body.addEventListener(\"keydown\", (e) => {\r\n      if (e.key === \"Escape\") {\r\n        this.invokersWithInterest.forEach((invoker) => {\r\n          this.clearState(invoker);\r\n        });\r\n      }\r\n    });\r\n\r\n    // Touch events\r\n    this.setupTouchHandlers();\r\n  }\r\n\r\n  /**\r\n   * Setup touch event handlers for long press support\r\n   */\r\n  private setupTouchHandlers(): void {\r\n    const longPressTime = 500;\r\n\r\n    document.body.addEventListener(\"touchstart\", (e) => {\r\n      this.touchInProgress = true;\r\n      const invoker = (e.target as HTMLElement).closest(\"button[interestfor]\") as HTMLElement;\r\n      if (invoker) {\r\n        this.initializeDataField(invoker);\r\n        const data = (invoker as any)[this.dataField];\r\n        data.longPressTimer = setTimeout(() => {\r\n          this.gainOrLoseInterest(\r\n            invoker, \r\n            this.getInterestForTarget(invoker), \r\n            this.InterestState.FullInterest\r\n          );\r\n          data.longPressTimer = null;\r\n        }, longPressTime);\r\n      }\r\n    });\r\n\r\n    const cancelLongPress = (e: Event) => {\r\n      const invoker = (e.target as HTMLElement).closest(\"button[interestfor]\") as HTMLElement;\r\n      if (invoker) {\r\n        const data = (invoker as any)[this.dataField];\r\n        if (data?.longPressTimer) {\r\n          clearTimeout(data.longPressTimer);\r\n          data.longPressTimer = null;\r\n        }\r\n      }\r\n    };\r\n\r\n    document.body.addEventListener(\"touchend\", (e) => {\r\n      cancelLongPress(e);\r\n      this.touchInProgress = false;\r\n    });\r\n    document.body.addEventListener(\"touchmove\", cancelLongPress);\r\n  }\r\n\r\n  /**\r\n   * Handle interest changes from hover or focus events\r\n   */\r\n  private handleInterestHoverOrFocus(\r\n    el: HTMLElement, \r\n    source: string\r\n  ): void {\r\n    if (this.touchInProgress) return;\r\n    if (!el.isConnected) return;\r\n\r\n    const target = this.getInterestForTarget(el);\r\n    if (!target) {\r\n      this.handleUpstreamInterest(el, source);\r\n      return;\r\n    }\r\n\r\n    // Safety check: don't interfere if element is disabled\r\n    if (el instanceof HTMLButtonElement && el.disabled) {\r\n      return;\r\n    }\r\n\r\n    this.initializeDataField(el);\r\n    const data = (el as any)[this.dataField];\r\n    const upstreamInvoker = this.getInterestInvoker(el);\r\n\r\n    if (source === this.Source.Hover || source === this.Source.Focus) {\r\n      data.clearLostTask?.();\r\n      (upstreamInvoker as any)?.[this.dataField]?.clearLostTask?.();\r\n      this.scheduleInterestGainedTask(el, this.InterestState.FullInterest);\r\n    } else {\r\n      data.clearGainedTask?.();\r\n      if (data.state !== this.InterestState.NoInterest) {\r\n        this.scheduleInterestLostTask(el);\r\n      }\r\n      if (upstreamInvoker) {\r\n        (upstreamInvoker as any)[this.dataField]?.clearGainedTask?.();\r\n        if (source === this.Source.Blur || !el.matches(\":hover\")) {\r\n          this.scheduleInterestLostTask(upstreamInvoker);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle upstream interest for elements without direct targets\r\n   */\r\n  private handleUpstreamInterest(el: HTMLElement, source: string): void {\r\n    const containingTarget = el.closest(\".interest-target\") as HTMLElement;\r\n    if (containingTarget) {\r\n      const upstreamInvoker = this.getInterestInvoker(containingTarget);\r\n      if (upstreamInvoker) {\r\n        const data = (upstreamInvoker as any)[this.dataField];\r\n        if (source === this.Source.Hover || source === this.Source.Focus) {\r\n          data?.clearLostTask?.();\r\n        } else {\r\n          if (source === this.Source.Blur || !el.matches(\":hover\")) {\r\n            this.scheduleInterestLostTask(upstreamInvoker);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gain or lose interest in an element\r\n   */\r\n  private gainOrLoseInterest(\r\n    invoker: HTMLElement, \r\n    target: HTMLElement | null, \r\n    newState: string\r\n  ): boolean {\r\n    if (!invoker || !target) return false;\r\n\r\n    if (!invoker.isConnected || \r\n        this.getInterestForTarget(invoker) !== target ||\r\n        (newState === this.InterestState.NoInterest && \r\n         this.getInterestInvoker(target) !== invoker)) {\r\n      return false;\r\n    }\r\n\r\n    if (newState !== this.InterestState.NoInterest) {\r\n      const existing = this.getInterestInvoker(target);\r\n      if (existing) {\r\n        if (existing === invoker) {\r\n          (existing as any)[this.dataField]?.clearLostTask?.();\r\n          return false;\r\n        } else {\r\n          if (!this.gainOrLoseInterest(existing, target, this.InterestState.NoInterest)) {\r\n            return false;\r\n          }\r\n          if (!invoker.isConnected || this.getInterestForTarget(invoker) !== target) {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n      return this.applyState(invoker, newState);\r\n    }\r\n\r\n    this.clearState(invoker);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Apply interest state to an invoker\r\n   */\r\n  private applyState(invoker: HTMLElement, newState: string): boolean {\r\n    const data = (invoker as any)[this.dataField];\r\n    const target = this.getInterestForTarget(invoker);\r\n    if (!target) return false;\r\n\r\n    switch (newState) {\r\n      case this.InterestState.FullInterest:\r\n        if (data.state !== this.InterestState.NoInterest) {\r\n          throw new Error(\"Invalid state\");\r\n        }\r\n\r\n        // Dispatch interest event\r\n        const interestEvent = new CustomEvent(this.interestEventName, {\r\n          bubbles: true, // Allow bubbling for integration with command system\r\n          cancelable: true\r\n        });\r\n        Object.defineProperty(interestEvent, 'source', { \r\n          value: invoker, \r\n          writable: false \r\n        });\r\n        target.dispatchEvent(interestEvent);\r\n        \r\n        // Also dispatch on the invoker for potential command chaining\r\n        invoker.dispatchEvent(new CustomEvent('interest:shown', {\r\n          bubbles: true,\r\n          detail: { target, source: invoker }\r\n        }));\r\n\r\n        // Show popover if applicable\r\n        try {\r\n          if (target.hasAttribute('popover') && typeof (target as any).showPopover === 'function') {\r\n            (target as any).showPopover();\r\n            // If anchor positioning not supported, position manually\r\n            if (!this.supportsAnchorPositioning()) {\r\n              requestAnimationFrame(() => this.positionPopover(invoker, target));\r\n            }\r\n          }\r\n        } catch {}\r\n\r\n        // Update state\r\n        data.state = this.InterestState.FullInterest;\r\n        if (!(target as any)[this.targetDataField]) {\r\n          (target as any)[this.targetDataField] = {};\r\n        }\r\n        (target as any)[this.targetDataField].invoker = invoker;\r\n\r\n        // Setup popover toggle listener if popover\r\n        if (target.hasAttribute('popover')) {\r\n          const toggleListener = this.createPopoverToggleListener();\r\n          (target as any)[this.targetDataField].toggleListener = toggleListener;\r\n          target.addEventListener('toggle', toggleListener);\r\n        }\r\n\r\n        // Update classes and ARIA\r\n        this.invokersWithInterest.add(invoker);\r\n        invoker.classList.add(\"interest-source\");\r\n        target.classList.add(\"interest-target\");\r\n\r\n        if (!this.isPlainHint(target)) {\r\n          invoker.setAttribute(\"aria-expanded\", \"true\");\r\n        }\r\n\r\n        // Setup anchor positioning\r\n        this.setupAnchorPositioning(invoker, target, data);\r\n        break;\r\n\r\n      default:\r\n        throw new Error(\"Invalid state\");\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Clear interest state from an invoker\r\n   */\r\n  private clearState(invoker: HTMLElement): void {\r\n    const data = (invoker as any)[this.dataField];\r\n    if (!data) return;\r\n\r\n    clearTimeout(data.gainedTimer);\r\n    clearTimeout(data.lostTimer);\r\n\r\n    if (data.state !== this.InterestState.NoInterest) {\r\n      const target = this.getInterestForTarget(invoker);\r\n      if (target) {\r\n        // Dispatch loseinterest event\r\n        const loseInterestEvent = new CustomEvent(this.loseInterestEventName, {\r\n          bubbles: true, // Allow bubbling for integration with command system\r\n          cancelable: true\r\n        });\r\n        Object.defineProperty(loseInterestEvent, 'source', { \r\n          value: invoker, \r\n          writable: false \r\n        });\r\n        target.dispatchEvent(loseInterestEvent);\r\n        \r\n        // Also dispatch on the invoker for potential command chaining\r\n        invoker.dispatchEvent(new CustomEvent('interest:lost', {\r\n          bubbles: true,\r\n          detail: { target, source: invoker }\r\n        }));\r\n\r\n        // Hide popover\r\n        try {\r\n          if (typeof (target as any).hidePopover === 'function') {\r\n            (target as any).hidePopover();\r\n          }\r\n        } catch {}\r\n\r\n        // Cleanup listeners\r\n        const targetData = (target as any)[this.targetDataField];\r\n        if (targetData?.toggleListener) {\r\n          target.removeEventListener('toggle', targetData.toggleListener);\r\n        }\r\n        (target as any)[this.targetDataField] = null;\r\n\r\n        // Update classes and ARIA\r\n        this.invokersWithInterest.delete(invoker);\r\n        invoker.classList.remove(\"interest-source\");\r\n        target.classList.remove(\"interest-target\");\r\n\r\n        if (!this.isPlainHint(target)) {\r\n          invoker.setAttribute(\"aria-expanded\", \"false\");\r\n        }\r\n\r\n        // Cleanup anchor positioning\r\n        this.cleanupAnchorPositioning(invoker, target, data);\r\n      }\r\n      \r\n      data.state = this.InterestState.NoInterest;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if anchor positioning is supported\r\n   */\r\n   private supportsAnchorPositioning(): boolean {\r\n     return 'anchorName' in document.body.style;\r\n   }\r\n\r\n  /**\r\n   * Setup anchor positioning between invoker and target\r\n   */\r\n   private setupAnchorPositioning(\r\n     invoker: HTMLElement,\r\n     target: HTMLElement,\r\n     data: any\r\n   ): void {\r\n     const anchorName = `--interest-anchor-${Math.random().toString(36).substring(2)}`;\r\n     (invoker.style as any).anchorName = anchorName;\r\n     (target.style as any).positionAnchor = anchorName;\r\n     data.anchorName = anchorName;\r\n\r\n  if (this.supportsAnchorPositioning()) {\r\n    // Add CSS for anchor positioning using position-area for automatic fallbacks\r\n    const className = `interest-anchored-${Math.random().toString(36).substring(2)}`;\r\n    const style = document.createElement('style');\r\n    style.textContent = `\r\n      .${className} {\r\n        margin: 0;\r\n        top: calc(anchor(${anchorName} bottom) - 4px);\r\n        left: anchor(${anchorName});\r\n        justify-self: center;\r\n      }\r\n    `;\r\n    document.head.appendChild(style);\r\n    target.classList.add(className);\r\n    data.styleElement = style;\r\n    data.className = className;\r\n  }\r\n   }\r\n\r\n\r\n\r\n  /**\r\n   * Cleanup anchor positioning\r\n   */\r\n   private cleanupAnchorPositioning(\r\n     invoker: HTMLElement,\r\n     target: HTMLElement,\r\n     data: any\r\n   ): void {\r\n     if (data.anchorName) {\r\n       (invoker.style as any).anchorName = \"\";\r\n       (target.style as any).positionAnchor = \"\";\r\n       data.anchorName = null;\r\n     }\r\n     // Cleanup style element\r\n     if (data.styleElement) {\r\n       data.styleElement.remove();\r\n       data.styleElement = null;\r\n     }\r\n     // Cleanup class\r\n     if (data.className) {\r\n       target.classList.remove(data.className);\r\n       data.className = null;\r\n     }\r\n     // Cleanup manual positioning\r\n     (target as HTMLElement).style.position = \"\";\r\n     (target as HTMLElement).style.top = \"\";\r\n     (target as HTMLElement).style.left = \"\";\r\n     (target as HTMLElement).style.zIndex = \"\";\r\n   }\r\n\r\n  /**\r\n   * Position popover relative to invoker since top-layer popovers are centered by default\r\n   * Prefers positioning below (GitHub-style), then above if not enough space\r\n   */\r\n  private positionPopover(invoker: HTMLElement, target: HTMLElement): void {\r\n    const invokerRect = invoker.getBoundingClientRect();\r\n    const targetRect = target.getBoundingClientRect();\r\n\r\n    const viewportWidth = window.innerWidth;\r\n    const viewportHeight = window.innerHeight;\r\n\r\n    let top: number;\r\n    let left: number;\r\n\r\n    // Position centered horizontally on the invoker\r\n    left = invokerRect.left + (invokerRect.width / 2) - (targetRect.width / 2);\r\n\r\n    // Try positioning below first\r\n    top = invokerRect.bottom - 4;\r\n\r\n    // Check if it fits below\r\n    if (top + targetRect.height > viewportHeight) {\r\n      // Try positioning above\r\n      top = invokerRect.top - targetRect.height + 4;\r\n      if (top < 0) {\r\n        // If above also doesn't fit, keep below and adjust\r\n        top = invokerRect.bottom + 8;\r\n      }\r\n    }\r\n\r\n    // Ensure it doesn't go off-screen with final adjustments\r\n    const adjustedLeft = Math.max(8, Math.min(left, viewportWidth - targetRect.width - 8));\r\n    const adjustedTop = Math.max(8, Math.min(top, viewportHeight - targetRect.height - 8));\r\n\r\n    (target as HTMLElement).style.position = 'fixed';\r\n    (target as HTMLElement).style.top = `${adjustedTop}px`;\r\n    (target as HTMLElement).style.left = `${adjustedLeft}px`;\r\n    (target as HTMLElement).style.zIndex = '9999';\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Create popover toggle event listener\r\n   */\r\n  private createPopoverToggleListener() {\r\n    return (e: Event) => {\r\n      const popover = e.target as HTMLElement;\r\n      const toggleEvent = e as any; // ToggleEvent\r\n      if (toggleEvent.newState === 'closed') {\r\n        const targetData = (popover as any)[this.targetDataField];\r\n        const invoker = targetData?.invoker;\r\n        if (invoker) {\r\n          this.gainOrLoseInterest(invoker, popover, this.InterestState.NoInterest);\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Schedule task to gain interest after delay\r\n   */\r\n  private scheduleInterestGainedTask(invoker: HTMLElement, newState: string): void {\r\n    const delay = this.getDelaySeconds(invoker, this.interestDelayStartProp) * 1000;\r\n    if (!isFinite(delay) || delay < 0) return;\r\n\r\n    const data = (invoker as any)[this.dataField];\r\n    data.clearGainedTask?.();\r\n    data.gainedTimer = setTimeout(() => {\r\n      this.gainOrLoseInterest(invoker, this.getInterestForTarget(invoker), newState);\r\n    }, delay);\r\n  }\r\n\r\n  /**\r\n   * Schedule task to lose interest after delay\r\n   */\r\n  private scheduleInterestLostTask(invoker: HTMLElement): void {\r\n    const delay = this.getDelaySeconds(invoker, this.interestDelayEndProp) * 1000;\r\n    if (!isFinite(delay) || delay < 0) return;\r\n\r\n    const data = (invoker as any)[this.dataField];\r\n    data.clearLostTask?.();\r\n    data.lostTimer = setTimeout(() => {\r\n      this.gainOrLoseInterest(\r\n        invoker, \r\n        this.getInterestForTarget(invoker), \r\n        this.InterestState.NoInterest\r\n      );\r\n    }, delay);\r\n  }\r\n\r\n  /**\r\n   * Get delay in seconds for a CSS property\r\n   */\r\n  private getDelaySeconds(el: HTMLElement, prop: string): number {\r\n    const style = getComputedStyle(el);\r\n    const longhandValue = style.getPropertyValue(prop).trim();\r\n\r\n    // Longhand has priority\r\n    if (longhandValue.toLowerCase() !== 'normal') {\r\n      return this.parseTimeValue(longhandValue);\r\n    }\r\n\r\n    // Check shorthand\r\n    const shorthand = style.getPropertyValue(this.interestDelayProp).trim();\r\n    if (shorthand && shorthand.toLowerCase() !== 'normal') {\r\n      const parts = shorthand.split(/\\s+/).filter((s) => s.length > 0);\r\n      if (parts.length > 0) {\r\n        const firstValue = parts[0];\r\n        const secondValue = parts.length > 1 ? parts[1] : firstValue;\r\n        const valueFromShorthand = prop === this.interestDelayStartProp \r\n          ? firstValue \r\n          : secondValue;\r\n\r\n        if (valueFromShorthand.toLowerCase() !== 'normal') {\r\n          return this.parseTimeValue(valueFromShorthand);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Default values\r\n    return prop === this.interestDelayStartProp ? 0.5 : 0.25;\r\n  }\r\n\r\n  /**\r\n   * Parse time value from CSS\r\n   */\r\n  private parseTimeValue(val: string): number {\r\n    const s = String(val).trim();\r\n    const m_s = s.match(/^([\\d.]+)s$/);\r\n    if (m_s) {\r\n      return parseFloat(m_s[1]);\r\n    }\r\n    const m_ms = s.match(/^([\\d.]+)ms$/);\r\n    if (m_ms) {\r\n      return parseFloat(m_ms[1]) / 1000;\r\n    }\r\n    return parseFloat(s) || 0;\r\n  }\r\n\r\n  /**\r\n   * Initialize data field for an element\r\n   */\r\n  private initializeDataField(el: HTMLElement): void {\r\n    if ((el as any)[this.dataField]) return;\r\n\r\n    (el as any)[this.dataField] = {\r\n      state: this.InterestState.NoInterest,\r\n      gainedTimer: null,\r\n      lostTimer: null,\r\n      longPressTimer: null,\r\n      anchorName: null,\r\n      clearGainedTask() {\r\n        clearTimeout(this.gainedTimer);\r\n      },\r\n      clearLostTask() {\r\n        clearTimeout(this.lostTimer);\r\n      },\r\n    };\r\n\r\n    const target = this.getInterestForTarget(el);\r\n    if (target) {\r\n      this.setupAccessibility(el, target);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setup accessibility attributes\r\n   */\r\n  private setupAccessibility(invoker: HTMLElement, target: HTMLElement): void {\r\n    if (this.isPlainHint(target)) {\r\n      invoker.setAttribute(\"aria-describedby\", target.id);\r\n    } else {\r\n      // Rich hint\r\n      invoker.setAttribute(\"aria-details\", target.id);\r\n      invoker.setAttribute(\"aria-expanded\", \"false\");\r\n      if (!target.hasAttribute(\"role\")) {\r\n        target.setAttribute(\"role\", \"tooltip\");\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if target is a plain hint (simple tooltip)\r\n   */\r\n  private isPlainHint(target: HTMLElement): boolean {\r\n    if (target.getAttribute(\"popover\")?.toLowerCase() !== \"hint\") {\r\n      return false;\r\n    }\r\n\r\n    // Check for focusable elements\r\n    const focusableSelector = [\r\n      \"a[href]\",\r\n      \"area[href]\",\r\n      \"input:not([disabled])\",\r\n      \"select:not([disabled])\",\r\n      \"textarea:not([disabled])\",\r\n      \"button:not([disabled])\",\r\n      \"iframe\",\r\n      \"object\",\r\n      \"embed\",\r\n      \"[contenteditable]\",\r\n      '[tabindex]:not([tabindex=\"-1\"])',\r\n    ].join(\",\");\r\n\r\n    if (target.querySelector(focusableSelector)) {\r\n      return false;\r\n    }\r\n\r\n    // Check for structural elements\r\n    const structuralSelector = [\r\n      \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\",\r\n      \"ul\", \"ol\", \"li\", \"table\", \"nav\", \r\n      \"header\", \"footer\", \"main\", \"aside\",\r\n      \"article\", \"section\", \"form\", \"blockquote\",\r\n      \"details\", \"summary\", \"dialog\"\r\n    ].join(\",\");\r\n\r\n    if (target.querySelector(structuralSelector)) {\r\n      return false;\r\n    }\r\n\r\n    // Check ARIA roles\r\n    const elementsWithRoles = target.querySelectorAll(\"[role]\");\r\n    for (const el of elementsWithRoles) {\r\n      const role = el.getAttribute(\"role\")?.toLowerCase();\r\n      if (role && ![\"presentation\", \"none\", \"generic\", \"image\"].includes(role)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get interest target for an element\r\n   */\r\n  private getInterestForTarget(el: HTMLElement): HTMLElement | null {\r\n    const id = el.getAttribute(this.attributeName);\r\n    return id ? document.getElementById(id) : null;\r\n  }\r\n\r\n  /**\r\n   * Get interest invoker for a target element\r\n   */\r\n  private getInterestInvoker(target: HTMLElement): HTMLElement | null {\r\n    const targetData = (target as any)[this.targetDataField];\r\n    const inv = targetData?.invoker || null;\r\n    return inv && (inv as any)[this.dataField]?.state !== this.InterestState.NoInterest\r\n      ? inv\r\n      : null;\r\n  }\r\n\r\n  /**\r\n   * Check if polyfill is initialized\r\n   */\r\n  public isInitialized(): boolean {\r\n    return this.initialized;\r\n  }\r\n}\r\n\r\n// --- Export Functions ---\r\n\r\n/**\r\n * Apply the Interest Invokers polyfill\r\n */\r\nexport function applyInterestInvokers(): void {\r\n  const polyfill = InterestInvokersPolyfill.getInstance();\r\n  \r\n  if (document.readyState === \"complete\") {\r\n    polyfill.apply();\r\n  } else {\r\n    window.addEventListener(\"load\", () => polyfill.apply());\r\n  }\r\n}\r\n\r\n/**\r\n * Create an InterestEvent\r\n */\r\nexport function createInterestEvent(\r\n  type: \"interest\" | \"loseinterest\", \r\n  source?: Element\r\n): InterestEvent {\r\n  const event = new CustomEvent(type, {\r\n    bubbles: false,\r\n    cancelable: false\r\n  }) as any;\r\n\r\n  // Define source property\r\n  Object.defineProperty(event, 'source', {\r\n    value: source || null,\r\n    writable: false,\r\n    enumerable: true\r\n  });\r\n\r\n  return event as InterestEvent;\r\n\r\n  return event;\r\n}\r\n\r\n// Auto-apply the polyfill when this module is imported\r\napplyInterestInvokers();\r\n"],
  "mappings": "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",
  "names": ["ErrorSeverity", "HookPoint", "commands", "paramName", "focusableElements", "_a"]
}
